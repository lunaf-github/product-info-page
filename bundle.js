/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={6782:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r,o,i=n(7294);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}const l=function(e){return i.createElement("svg",a({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",id:"stackline_logo_svg__Layer_1",x:0,y:0,viewBox:"0 0 3415 597.8"},e),r||(r=i.createElement("style",null,".stackline_logo_svg__st0{fill:#fff}")),o||(o=i.createElement("g",{id:"stackline_logo_svg__on_black"},i.createElement("path",{d:"M92.4 594.5c-51-.1-92.3-41.4-92.4-92.4v-82.6h101v59c0 12.7 10.3 23 23 23h160c12.7 0 23-10.3 23-23v-72.3c0-24.1-11.2-30.9-34.7-36.3l-156-33.6c-39.5-8.5-66.3-20-84.3-36.2C11.8 282 2 256.9 2 223.4V115.9c.1-51 41.4-92.3 92.4-92.4h215.2c51 .1 92.3 41.4 92.4 92.4v75.6H301v-52c0-12.7-10.3-23-23-23H130c-12.7 0-23 10.3-23 23V205c0 24.1 11.2 30.9 34.7 36.3l156 33.6c39.5 8.5 66.3 20 84.3 36.2 20.2 18.1 30 43.2 30 76.7v114.3c-.1 51-41.4 92.3-92.4 92.4zM617 594.5c-46.4-.1-83.9-37.6-84-84v-275h-67v-78h69V71.1l96-20.7v107.1h99v78h-97V492c0 12.4 10.1 22.5 22.5 22.5H730v80zM910.9 597.8c-42.5 0-70.4-8.7-87.9-27.3-17.7-18.8-26-48.9-26-94.8 0-43.3 9.6-74.5 29.3-95.5 17.5-18.6 43.4-30 81.6-35.9 41.5-6.4 84.8-9.7 145.5-13.3l7.5-.4v-71.7c0-12.4-10.1-22.5-22.5-22.5h-105c-12.4 0-22.5 10.1-22.5 22.5v22.5h-98v-40c.1-46.4 37.6-83.9 84-84h180c46.4.1 83.9 37.6 84 84v353h-100v-87.6l-14.5 20.5c-19.2 27.1-35.6 43.2-55 53.8-20.7 11.5-46.3 16.7-80.5 16.7m141.3-206.3c-48.4 5.1-97.6 14.1-121.1 20.4-24.4 6.5-35.3 15.6-35.3 52.2 0 18.2 1.2 31.2 7.1 39.5 6.6 9.3 17.2 11.2 31 11.2 55.6 0 86.7-16.7 119.6-34.4l7.5-4v-85.9zM1343 594.5c-46.4-.1-83.9-37.6-84-84v-269c.1-46.4 37.6-83.9 84-84h180c46.4.1 83.9 37.6 84 84v66h-100V265c0-12.4-10.1-22.5-22.5-22.5h-103c-12.4 0-22.5 10.1-22.5 22.5v223c0 12.4 10.1 22.5 22.5 22.5h103c12.4 0 22.5-10.1 22.5-22.5v-43.5h100v66c-.1 46.4-37.6 83.9-84 84zM1978.2 594.5l-101.1-193.7-73.1 91.5v102.2h-98V21.1L1804 0v367.3l159-209.8h109.8l-133.7 166.4 145.4 270.6zM2149 594.5V21.8L2249 .3v594.2zM2371 594.5v-437h100v437zm-3-503V23.3L2474 .4v91.1zM2858 594.5V271.3c0-25.1-13.1-29.8-37.3-29.8-44.8 0-86.4 12-124 35.5l-3.7 2.3v315.2h-100v-437h100v84.1l14.6-21.1c34.7-50.1 69-67 136-67 41.9 0 71 8.1 88.8 24.8 17.5 16.4 25.7 41.7 25.7 79.6v336.6zM3140 594.5c-46.4-.1-83.9-37.6-84-84v-269c.1-46.4 37.6-83.9 84-84h191c46.4.1 83.9 37.6 84 84v159h-259V494c0 12.4 10.1 22.5 22.5 22.5h114c12.4 0 22.5-10.1 22.5-22.5v-31.5h100v48c-.1 46.4-37.6 83.9-84 84zm38.5-359c-12.4 0-22.5 10.1-22.5 22.5v80.5h159V258c0-12.4-10.1-22.5-22.5-22.5z",className:"stackline_logo_svg__st0"}))))}},3712:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7294),o=n(9370),i=n.n(o),a=n(488),l=n.n(a);const u=function(){return r.createElement("div",{className:"grid-container"},r.createElement(i(),null),r.createElement(l(),null))}},28:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,':root {\n  /* CSS Grid Variables */\n  --product-min-width: 250px;\n  --header-min-height: 80px;\n  --chart-min-height: 600px;\n  --table-min-height: 700px;\n\n  /* Color Variables */\n  --light-gray: #F2F2F2;\n  --gray: gray;\n  --container-background-color: white;\n  --header-background-color: #052849;\n\n  /* Border Variables */\n  --border-vertical-width: 10px;\n  --border-double-vertical-width: 20px;\n  --border-horiz-width: 55px;\n  --thin-vertical-border: var(--border-vertical-width) solid var(--light-gray);\n  --thick-vertical-border: var(--border-double-vertical-width) solid var(--light-gray);\n  --horizontal-border: var(--border-horiz-width) solid var(--light-gray);\n}\n\n* {\n    margin: 0;\n    box-sizing: border-box;\n}\n\n\nbody {\n    min-height: 100vh;\n    height: 100vh;\n}\n\n#root {\n    height: 100%;\n}\n\nsvg {\n    height: 100%;\n}\n\n.logo {\n    height: 60%;\n    margin: 0;\n}\n\n.chart-container {\n    grid-area: chart-container;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: var(--container-background-color);\n    border-left: var(--thin-vertical-border);\n    border-right: var(--thick-vertical-border);\n    border-top: var(--horizontal-border);\n    border-bottom: var(--horizontal-border);\n  }\n\n\n.grid-container {\n        display: grid;\n        min-height: 100%;\n        grid-template-columns: minmax(var(--product-min-width), 0.4fr) 1.3fr;\n        grid-auto-rows: minmax(var(--header-min-height), 0.15fr)\n          minmax(var(--chart-min-height), 1.4fr)\n          minmax(var(--table-min-height), max-content);\n        grid-template-areas: "header-container header-container" "product-container chart-container" "product-container table-container";\n}\n\n\n.header-container {\n    grid-area: header-container;\n    background-color: var(--header-background-color);\n    text-align: left;\n    color: black;\n}\n  \n\n\n/* Table Styles */\n.table-container {\n    grid-area: table-container;\n    background-color: var(--container-background-color);\n    border-left: var(--thin-vertical-border);\n    border-right: var(--thick-vertical-border);\n    border-bottom: var(--horizontal-border);\n  }\n  #table {\n    text-align: center;\n  }\n  table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n  table th {\n    padding: 2%;\n    font-weight: 300;\n  }\n  tbody td {\n    border-top: 2px solid var(--light-gray);\n    padding: 2%;\n  }\n  th:hover {\n    cursor: pointer;\n  }\n\n  /* Product Styles */\n.product-container {\n  grid-area: product-container;\n  background-color: var(--container-background-color);\n  border-left: var(--thick-vertical-border);\n  border-right: var(--thin-vertical-border);\n  border-top: var(--horizontal-border);\n  border-bottom: var(--horizontal-border);\n}\n#product img {\n  height: 100%;\n  width: 100%;\n}\n#title {\n  text-align: center;\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: 2%;\n}\n#subtitle {\n  text-align: center;\n  font-weight: 300;\n  color: var(--gray);\n  padding: 2%;\n}\n#spans {\n  text-align: center;\n}\n.tags {\n  border: 2px solid var(--light-gray);\n  border-radius: 5px;\n  padding: 2%;\n  margin: 2%;\n  display: inline-block;\n}\n\n#product hr {\n  background-color: var(--light-gray);\n  height: 2px;\n  border: 0;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,0BAA0B;EAC1B,yBAAyB;EACzB,yBAAyB;EACzB,yBAAyB;;EAEzB,oBAAoB;EACpB,qBAAqB;EACrB,YAAY;EACZ,mCAAmC;EACnC,kCAAkC;;EAElC,qBAAqB;EACrB,6BAA6B;EAC7B,oCAAoC;EACpC,0BAA0B;EAC1B,4EAA4E;EAC5E,oFAAoF;EACpF,sEAAsE;AACxE;;AAEA;IACI,SAAS;IACT,sBAAsB;AAC1B;;;AAGA;IACI,iBAAiB;IACjB,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,SAAS;AACb;;AAEA;IACI,0BAA0B;IAC1B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mDAAmD;IACnD,wCAAwC;IACxC,0CAA0C;IAC1C,oCAAoC;IACpC,uCAAuC;EACzC;;;AAGF;QACQ,aAAa;QACb,gBAAgB;QAChB,oEAAoE;QACpE;;sDAE8C;QAC9C,gIAAgI;AACxI;;;AAGA;IACI,2BAA2B;IAC3B,gDAAgD;IAChD,gBAAgB;IAChB,YAAY;AAChB;;;;AAIA,iBAAiB;AACjB;IACI,0BAA0B;IAC1B,mDAAmD;IACnD,wCAAwC;IACxC,0CAA0C;IAC1C,uCAAuC;EACzC;EACA;IACE,kBAAkB;EACpB;EACA;IACE,WAAW;IACX,yBAAyB;EAC3B;EACA;IACE,WAAW;IACX,gBAAgB;EAClB;EACA;IACE,uCAAuC;IACvC,WAAW;EACb;EACA;IACE,eAAe;EACjB;;EAEA,mBAAmB;AACrB;EACE,4BAA4B;EAC5B,mDAAmD;EACnD,yCAAyC;EACzC,yCAAyC;EACzC,oCAAoC;EACpC,uCAAuC;AACzC;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,iBAAiB;EACjB,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,kBAAkB;EAClB,WAAW;AACb;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mCAAmC;EACnC,kBAAkB;EAClB,WAAW;EACX,UAAU;EACV,qBAAqB;AACvB;;AAEA;EACE,mCAAmC;EACnC,WAAW;EACX,SAAS;AACX",sourcesContent:[':root {\r\n  /* CSS Grid Variables */\r\n  --product-min-width: 250px;\r\n  --header-min-height: 80px;\r\n  --chart-min-height: 600px;\r\n  --table-min-height: 700px;\r\n\r\n  /* Color Variables */\r\n  --light-gray: #F2F2F2;\r\n  --gray: gray;\r\n  --container-background-color: white;\r\n  --header-background-color: #052849;\r\n\r\n  /* Border Variables */\r\n  --border-vertical-width: 10px;\r\n  --border-double-vertical-width: 20px;\r\n  --border-horiz-width: 55px;\r\n  --thin-vertical-border: var(--border-vertical-width) solid var(--light-gray);\r\n  --thick-vertical-border: var(--border-double-vertical-width) solid var(--light-gray);\r\n  --horizontal-border: var(--border-horiz-width) solid var(--light-gray);\r\n}\r\n\r\n* {\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\nbody {\r\n    min-height: 100vh;\r\n    height: 100vh;\r\n}\r\n\r\n#root {\r\n    height: 100%;\r\n}\r\n\r\nsvg {\r\n    height: 100%;\r\n}\r\n\r\n.logo {\r\n    height: 60%;\r\n    margin: 0;\r\n}\r\n\r\n.chart-container {\r\n    grid-area: chart-container;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: var(--container-background-color);\r\n    border-left: var(--thin-vertical-border);\r\n    border-right: var(--thick-vertical-border);\r\n    border-top: var(--horizontal-border);\r\n    border-bottom: var(--horizontal-border);\r\n  }\r\n\r\n\r\n.grid-container {\r\n        display: grid;\r\n        min-height: 100%;\r\n        grid-template-columns: minmax(var(--product-min-width), 0.4fr) 1.3fr;\r\n        grid-auto-rows: minmax(var(--header-min-height), 0.15fr)\r\n          minmax(var(--chart-min-height), 1.4fr)\r\n          minmax(var(--table-min-height), max-content);\r\n        grid-template-areas: "header-container header-container" "product-container chart-container" "product-container table-container";\r\n}\r\n\r\n\r\n.header-container {\r\n    grid-area: header-container;\r\n    background-color: var(--header-background-color);\r\n    text-align: left;\r\n    color: black;\r\n}\r\n  \r\n\r\n\r\n/* Table Styles */\r\n.table-container {\r\n    grid-area: table-container;\r\n    background-color: var(--container-background-color);\r\n    border-left: var(--thin-vertical-border);\r\n    border-right: var(--thick-vertical-border);\r\n    border-bottom: var(--horizontal-border);\r\n  }\r\n  #table {\r\n    text-align: center;\r\n  }\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n  table th {\r\n    padding: 2%;\r\n    font-weight: 300;\r\n  }\r\n  tbody td {\r\n    border-top: 2px solid var(--light-gray);\r\n    padding: 2%;\r\n  }\r\n  th:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  /* Product Styles */\r\n.product-container {\r\n  grid-area: product-container;\r\n  background-color: var(--container-background-color);\r\n  border-left: var(--thick-vertical-border);\r\n  border-right: var(--thin-vertical-border);\r\n  border-top: var(--horizontal-border);\r\n  border-bottom: var(--horizontal-border);\r\n}\r\n#product img {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n#title {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  padding: 2%;\r\n}\r\n#subtitle {\r\n  text-align: center;\r\n  font-weight: 300;\r\n  color: var(--gray);\r\n  padding: 2%;\r\n}\r\n#spans {\r\n  text-align: center;\r\n}\r\n.tags {\r\n  border: 2px solid var(--light-gray);\r\n  border-radius: 5px;\r\n  padding: 2%;\r\n  margin: 2%;\r\n  display: inline-block;\r\n}\r\n\r\n#product hr {\r\n  background-color: var(--light-gray);\r\n  height: 2px;\r\n  border: 0;\r\n}'],sourceRoot:""}]);const l=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(a[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},9887:function(e,t,n){var r;!function(o){"use strict";var i,a=1e9,l={precision:20,rounding:4,toExpNeg:-7,toExpPos:21,LN10:"2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"},u=!0,c="[DecimalError] ",s=c+"Invalid argument: ",f=c+"Exponent out of range: ",p=Math.floor,d=Math.pow,h=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,y=1e7,v=7,m=9007199254740991,g=p(m/v),b={};function x(e,t){var n,r,o,i,a,l,c,s,f=e.constructor,p=f.precision;if(!e.s||!t.s)return t.s||(t=new f(e)),u?_(t,p):t;if(c=e.d,s=t.d,a=e.e,o=t.e,c=c.slice(),i=a-o){for(i<0?(r=c,i=-i,l=s.length):(r=s,o=a,l=c.length),i>(l=(a=Math.ceil(p/v))>l?a+1:l+1)&&(i=l,r.length=1),r.reverse();i--;)r.push(0);r.reverse()}for((l=c.length)-(i=s.length)<0&&(i=l,r=s,s=c,c=r),n=0;i;)n=(c[--i]=c[i]+s[i]+n)/y|0,c[i]%=y;for(n&&(c.unshift(n),++o),l=c.length;0==c[--l];)c.pop();return t.d=c,t.e=o,u?_(t,p):t}function w(e,t,n){if(e!==~~e||e<t||e>n)throw Error(s+e)}function O(e){var t,n,r,o=e.length-1,i="",a=e[0];if(o>0){for(i+=a,t=1;t<o;t++)r=e[t]+"",(n=v-r.length)&&(i+=j(n)),i+=r;a=e[t],(n=v-(r=a+"").length)&&(i+=j(n))}else if(0===a)return"0";for(;a%10==0;)a/=10;return i+a}b.absoluteValue=b.abs=function(){var e=new this.constructor(this);return e.s&&(e.s=1),e},b.comparedTo=b.cmp=function(e){var t,n,r,o,i=this;if(e=new i.constructor(e),i.s!==e.s)return i.s||-e.s;if(i.e!==e.e)return i.e>e.e^i.s<0?1:-1;for(t=0,n=(r=i.d.length)<(o=e.d.length)?r:o;t<n;++t)if(i.d[t]!==e.d[t])return i.d[t]>e.d[t]^i.s<0?1:-1;return r===o?0:r>o^i.s<0?1:-1},b.decimalPlaces=b.dp=function(){var e=this,t=e.d.length-1,n=(t-e.e)*v;if(t=e.d[t])for(;t%10==0;t/=10)n--;return n<0?0:n},b.dividedBy=b.div=function(e){return S(this,new this.constructor(e))},b.dividedToIntegerBy=b.idiv=function(e){var t=this.constructor;return _(S(this,new t(e),0,1),t.precision)},b.equals=b.eq=function(e){return!this.cmp(e)},b.exponent=function(){return k(this)},b.greaterThan=b.gt=function(e){return this.cmp(e)>0},b.greaterThanOrEqualTo=b.gte=function(e){return this.cmp(e)>=0},b.isInteger=b.isint=function(){return this.e>this.d.length-2},b.isNegative=b.isneg=function(){return this.s<0},b.isPositive=b.ispos=function(){return this.s>0},b.isZero=function(){return 0===this.s},b.lessThan=b.lt=function(e){return this.cmp(e)<0},b.lessThanOrEqualTo=b.lte=function(e){return this.cmp(e)<1},b.logarithm=b.log=function(e){var t,n=this,r=n.constructor,o=r.precision,a=o+5;if(void 0===e)e=new r(10);else if((e=new r(e)).s<1||e.eq(i))throw Error(c+"NaN");if(n.s<1)throw Error(c+(n.s?"NaN":"-Infinity"));return n.eq(i)?new r(0):(u=!1,t=S(P(n,a),P(e,a),a),u=!0,_(t,o))},b.minus=b.sub=function(e){var t=this;return e=new t.constructor(e),t.s==e.s?T(t,e):x(t,(e.s=-e.s,e))},b.modulo=b.mod=function(e){var t,n=this,r=n.constructor,o=r.precision;if(!(e=new r(e)).s)throw Error(c+"NaN");return n.s?(u=!1,t=S(n,e,0,1).times(e),u=!0,n.minus(t)):_(new r(n),o)},b.naturalExponential=b.exp=function(){return A(this)},b.naturalLogarithm=b.ln=function(){return P(this)},b.negated=b.neg=function(){var e=new this.constructor(this);return e.s=-e.s||0,e},b.plus=b.add=function(e){var t=this;return e=new t.constructor(e),t.s==e.s?x(t,e):T(t,(e.s=-e.s,e))},b.precision=b.sd=function(e){var t,n,r,o=this;if(void 0!==e&&e!==!!e&&1!==e&&0!==e)throw Error(s+e);if(t=k(o)+1,n=(r=o.d.length-1)*v+1,r=o.d[r]){for(;r%10==0;r/=10)n--;for(r=o.d[0];r>=10;r/=10)n++}return e&&t>n?t:n},b.squareRoot=b.sqrt=function(){var e,t,n,r,o,i,a,l=this,s=l.constructor;if(l.s<1){if(!l.s)return new s(0);throw Error(c+"NaN")}for(e=k(l),u=!1,0==(o=Math.sqrt(+l))||o==1/0?(((t=O(l.d)).length+e)%2==0&&(t+="0"),o=Math.sqrt(t),e=p((e+1)/2)-(e<0||e%2),r=new s(t=o==1/0?"5e"+e:(t=o.toExponential()).slice(0,t.indexOf("e")+1)+e)):r=new s(o.toString()),o=a=(n=s.precision)+3;;)if(r=(i=r).plus(S(l,i,a+2)).times(.5),O(i.d).slice(0,a)===(t=O(r.d)).slice(0,a)){if(t=t.slice(a-3,a+1),o==a&&"4999"==t){if(_(i,n+1,0),i.times(i).eq(l)){r=i;break}}else if("9999"!=t)break;a+=4}return u=!0,_(r,n)},b.times=b.mul=function(e){var t,n,r,o,i,a,l,c,s,f=this,p=f.constructor,d=f.d,h=(e=new p(e)).d;if(!f.s||!e.s)return new p(0);for(e.s*=f.s,n=f.e+e.e,(c=d.length)<(s=h.length)&&(i=d,d=h,h=i,a=c,c=s,s=a),i=[],r=a=c+s;r--;)i.push(0);for(r=s;--r>=0;){for(t=0,o=c+r;o>r;)l=i[o]+h[r]*d[o-r-1]+t,i[o--]=l%y|0,t=l/y|0;i[o]=(i[o]+t)%y|0}for(;!i[--a];)i.pop();return t?++n:i.shift(),e.d=i,e.e=n,u?_(e,p.precision):e},b.toDecimalPlaces=b.todp=function(e,t){var n=this,r=n.constructor;return n=new r(n),void 0===e?n:(w(e,0,a),void 0===t?t=r.rounding:w(t,0,8),_(n,e+k(n)+1,t))},b.toExponential=function(e,t){var n,r=this,o=r.constructor;return void 0===e?n=M(r,!0):(w(e,0,a),void 0===t?t=o.rounding:w(t,0,8),n=M(r=_(new o(r),e+1,t),!0,e+1)),n},b.toFixed=function(e,t){var n,r,o=this,i=o.constructor;return void 0===e?M(o):(w(e,0,a),void 0===t?t=i.rounding:w(t,0,8),n=M((r=_(new i(o),e+k(o)+1,t)).abs(),!1,e+k(r)+1),o.isneg()&&!o.isZero()?"-"+n:n)},b.toInteger=b.toint=function(){var e=this,t=e.constructor;return _(new t(e),k(e)+1,t.rounding)},b.toNumber=function(){return+this},b.toPower=b.pow=function(e){var t,n,r,o,a,l,s=this,f=s.constructor,d=+(e=new f(e));if(!e.s)return new f(i);if(!(s=new f(s)).s){if(e.s<1)throw Error(c+"Infinity");return s}if(s.eq(i))return s;if(r=f.precision,e.eq(i))return _(s,r);if(l=(t=e.e)>=(n=e.d.length-1),a=s.s,l){if((n=d<0?-d:d)<=m){for(o=new f(i),t=Math.ceil(r/v+4),u=!1;n%2&&N((o=o.times(s)).d,t),0!==(n=p(n/2));)N((s=s.times(s)).d,t);return u=!0,e.s<0?new f(i).div(o):_(o,r)}}else if(a<0)throw Error(c+"NaN");return a=a<0&&1&e.d[Math.max(t,n)]?-1:1,s.s=1,u=!1,o=e.times(P(s,r+12)),u=!0,(o=A(o)).s=a,o},b.toPrecision=function(e,t){var n,r,o=this,i=o.constructor;return void 0===e?r=M(o,(n=k(o))<=i.toExpNeg||n>=i.toExpPos):(w(e,1,a),void 0===t?t=i.rounding:w(t,0,8),r=M(o=_(new i(o),e,t),e<=(n=k(o))||n<=i.toExpNeg,e)),r},b.toSignificantDigits=b.tosd=function(e,t){var n=this.constructor;return void 0===e?(e=n.precision,t=n.rounding):(w(e,1,a),void 0===t?t=n.rounding:w(t,0,8)),_(new n(this),e,t)},b.toString=b.valueOf=b.val=b.toJSON=function(){var e=this,t=k(e),n=e.constructor;return M(e,t<=n.toExpNeg||t>=n.toExpPos)};var S=function(){function e(e,t){var n,r=0,o=e.length;for(e=e.slice();o--;)n=e[o]*t+r,e[o]=n%y|0,r=n/y|0;return r&&e.unshift(r),e}function t(e,t,n,r){var o,i;if(n!=r)i=n>r?1:-1;else for(o=i=0;o<n;o++)if(e[o]!=t[o]){i=e[o]>t[o]?1:-1;break}return i}function n(e,t,n){for(var r=0;n--;)e[n]-=r,r=e[n]<t[n]?1:0,e[n]=r*y+e[n]-t[n];for(;!e[0]&&e.length>1;)e.shift()}return function(r,o,i,a){var l,u,s,f,p,d,h,m,g,b,x,w,O,S,A,E,j,P,C=r.constructor,T=r.s==o.s?1:-1,M=r.d,N=o.d;if(!r.s)return new C(r);if(!o.s)throw Error(c+"Division by zero");for(u=r.e-o.e,j=N.length,A=M.length,m=(h=new C(T)).d=[],s=0;N[s]==(M[s]||0);)++s;if(N[s]>(M[s]||0)&&--u,(w=null==i?i=C.precision:a?i+(k(r)-k(o))+1:i)<0)return new C(0);if(w=w/v+2|0,s=0,1==j)for(f=0,N=N[0],w++;(s<A||f)&&w--;s++)O=f*y+(M[s]||0),m[s]=O/N|0,f=O%N|0;else{for((f=y/(N[0]+1)|0)>1&&(N=e(N,f),M=e(M,f),j=N.length,A=M.length),S=j,b=(g=M.slice(0,j)).length;b<j;)g[b++]=0;(P=N.slice()).unshift(0),E=N[0],N[1]>=y/2&&++E;do{f=0,(l=t(N,g,j,b))<0?(x=g[0],j!=b&&(x=x*y+(g[1]||0)),(f=x/E|0)>1?(f>=y&&(f=y-1),1==(l=t(p=e(N,f),g,d=p.length,b=g.length))&&(f--,n(p,j<d?P:N,d))):(0==f&&(l=f=1),p=N.slice()),(d=p.length)<b&&p.unshift(0),n(g,p,b),-1==l&&(l=t(N,g,j,b=g.length))<1&&(f++,n(g,j<b?P:N,b)),b=g.length):0===l&&(f++,g=[0]),m[s++]=f,l&&g[0]?g[b++]=M[S]||0:(g=[M[S]],b=1)}while((S++<A||void 0!==g[0])&&w--)}return m[0]||m.shift(),h.e=u,_(h,a?i+k(h)+1:i)}}();function A(e,t){var n,r,o,a,l,c=0,s=0,p=e.constructor,h=p.precision;if(k(e)>16)throw Error(f+k(e));if(!e.s)return new p(i);for(null==t?(u=!1,l=h):l=t,a=new p(.03125);e.abs().gte(.1);)e=e.times(a),s+=5;for(l+=Math.log(d(2,s))/Math.LN10*2+5|0,n=r=o=new p(i),p.precision=l;;){if(r=_(r.times(e),l),n=n.times(++c),O((a=o.plus(S(r,n,l))).d).slice(0,l)===O(o.d).slice(0,l)){for(;s--;)o=_(o.times(o),l);return p.precision=h,null==t?(u=!0,_(o,h)):o}o=a}}function k(e){for(var t=e.e*v,n=e.d[0];n>=10;n/=10)t++;return t}function E(e,t,n){if(t>e.LN10.sd())throw u=!0,n&&(e.precision=n),Error(c+"LN10 precision limit exceeded");return _(new e(e.LN10),t)}function j(e){for(var t="";e--;)t+="0";return t}function P(e,t){var n,r,o,a,l,s,f,p,d,h=1,y=e,v=y.d,m=y.constructor,g=m.precision;if(y.s<1)throw Error(c+(y.s?"NaN":"-Infinity"));if(y.eq(i))return new m(0);if(null==t?(u=!1,p=g):p=t,y.eq(10))return null==t&&(u=!0),E(m,p);if(p+=10,m.precision=p,r=(n=O(v)).charAt(0),a=k(y),!(Math.abs(a)<15e14))return f=E(m,p+2,g).times(a+""),y=P(new m(r+"."+n.slice(1)),p-10).plus(f),m.precision=g,null==t?(u=!0,_(y,g)):y;for(;r<7&&1!=r||1==r&&n.charAt(1)>3;)r=(n=O((y=y.times(e)).d)).charAt(0),h++;for(a=k(y),r>1?(y=new m("0."+n),a++):y=new m(r+"."+n.slice(1)),s=l=y=S(y.minus(i),y.plus(i),p),d=_(y.times(y),p),o=3;;){if(l=_(l.times(d),p),O((f=s.plus(S(l,new m(o),p))).d).slice(0,p)===O(s.d).slice(0,p))return s=s.times(2),0!==a&&(s=s.plus(E(m,p+2,g).times(a+""))),s=S(s,new m(h),p),m.precision=g,null==t?(u=!0,_(s,g)):s;s=f,o+=2}}function C(e,t){var n,r,o;for((n=t.indexOf("."))>-1&&(t=t.replace(".","")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;48===t.charCodeAt(r);)++r;for(o=t.length;48===t.charCodeAt(o-1);)--o;if(t=t.slice(r,o)){if(o-=r,n=n-r-1,e.e=p(n/v),e.d=[],r=(n+1)%v,n<0&&(r+=v),r<o){for(r&&e.d.push(+t.slice(0,r)),o-=v;r<o;)e.d.push(+t.slice(r,r+=v));t=t.slice(r),r=v-t.length}else r-=o;for(;r--;)t+="0";if(e.d.push(+t),u&&(e.e>g||e.e<-g))throw Error(f+n)}else e.s=0,e.e=0,e.d=[0];return e}function _(e,t,n){var r,o,i,a,l,c,s,h,m=e.d;for(a=1,i=m[0];i>=10;i/=10)a++;if((r=t-a)<0)r+=v,o=t,s=m[h=0];else{if((h=Math.ceil((r+1)/v))>=(i=m.length))return e;for(s=i=m[h],a=1;i>=10;i/=10)a++;o=(r%=v)-v+a}if(void 0!==n&&(l=s/(i=d(10,a-o-1))%10|0,c=t<0||void 0!==m[h+1]||s%i,c=n<4?(l||c)&&(0==n||n==(e.s<0?3:2)):l>5||5==l&&(4==n||c||6==n&&(r>0?o>0?s/d(10,a-o):0:m[h-1])%10&1||n==(e.s<0?8:7))),t<1||!m[0])return c?(i=k(e),m.length=1,t=t-i-1,m[0]=d(10,(v-t%v)%v),e.e=p(-t/v)||0):(m.length=1,m[0]=e.e=e.s=0),e;if(0==r?(m.length=h,i=1,h--):(m.length=h+1,i=d(10,v-r),m[h]=o>0?(s/d(10,a-o)%d(10,o)|0)*i:0),c)for(;;){if(0==h){(m[0]+=i)==y&&(m[0]=1,++e.e);break}if(m[h]+=i,m[h]!=y)break;m[h--]=0,i=1}for(r=m.length;0===m[--r];)m.pop();if(u&&(e.e>g||e.e<-g))throw Error(f+k(e));return e}function T(e,t){var n,r,o,i,a,l,c,s,f,p,d=e.constructor,h=d.precision;if(!e.s||!t.s)return t.s?t.s=-t.s:t=new d(e),u?_(t,h):t;if(c=e.d,p=t.d,r=t.e,s=e.e,c=c.slice(),a=s-r){for((f=a<0)?(n=c,a=-a,l=p.length):(n=p,r=s,l=c.length),a>(o=Math.max(Math.ceil(h/v),l)+2)&&(a=o,n.length=1),n.reverse(),o=a;o--;)n.push(0);n.reverse()}else{for((f=(o=c.length)<(l=p.length))&&(l=o),o=0;o<l;o++)if(c[o]!=p[o]){f=c[o]<p[o];break}a=0}for(f&&(n=c,c=p,p=n,t.s=-t.s),l=c.length,o=p.length-l;o>0;--o)c[l++]=0;for(o=p.length;o>a;){if(c[--o]<p[o]){for(i=o;i&&0===c[--i];)c[i]=y-1;--c[i],c[o]+=y}c[o]-=p[o]}for(;0===c[--l];)c.pop();for(;0===c[0];c.shift())--r;return c[0]?(t.d=c,t.e=r,u?_(t,h):t):new d(0)}function M(e,t,n){var r,o=k(e),i=O(e.d),a=i.length;return t?(n&&(r=n-a)>0?i=i.charAt(0)+"."+i.slice(1)+j(r):a>1&&(i=i.charAt(0)+"."+i.slice(1)),i=i+(o<0?"e":"e+")+o):o<0?(i="0."+j(-o-1)+i,n&&(r=n-a)>0&&(i+=j(r))):o>=a?(i+=j(o+1-a),n&&(r=n-o-1)>0&&(i=i+"."+j(r))):((r=o+1)<a&&(i=i.slice(0,r)+"."+i.slice(r)),n&&(r=n-a)>0&&(o+1===a&&(i+="."),i+=j(r))),e.s<0?"-"+i:i}function N(e,t){if(e.length>t)return e.length=t,!0}function I(e){if(!e||"object"!=typeof e)throw Error(c+"Object expected");var t,n,r,o=["precision",1,a,"rounding",0,8,"toExpNeg",-1/0,0,"toExpPos",0,1/0];for(t=0;t<o.length;t+=3)if(void 0!==(r=e[n=o[t]])){if(!(p(r)===r&&r>=o[t+1]&&r<=o[t+2]))throw Error(s+n+": "+r);this[n]=r}if(void 0!==(r=e[n="LN10"])){if(r!=Math.LN10)throw Error(s+n+": "+r);this[n]=new this(r)}return this}(l=function e(t){var n,r,o;function i(e){var t=this;if(!(t instanceof i))return new i(e);if(t.constructor=i,e instanceof i)return t.s=e.s,t.e=e.e,void(t.d=(e=e.d)?e.slice():e);if("number"==typeof e){if(0*e!=0)throw Error(s+e);if(e>0)t.s=1;else{if(!(e<0))return t.s=0,t.e=0,void(t.d=[0]);e=-e,t.s=-1}return e===~~e&&e<1e7?(t.e=0,void(t.d=[e])):C(t,e.toString())}if("string"!=typeof e)throw Error(s+e);if(45===e.charCodeAt(0)?(e=e.slice(1),t.s=-1):t.s=1,!h.test(e))throw Error(s+e);C(t,e)}if(i.prototype=b,i.ROUND_UP=0,i.ROUND_DOWN=1,i.ROUND_CEIL=2,i.ROUND_FLOOR=3,i.ROUND_HALF_UP=4,i.ROUND_HALF_DOWN=5,i.ROUND_HALF_EVEN=6,i.ROUND_HALF_CEIL=7,i.ROUND_HALF_FLOOR=8,i.clone=e,i.config=i.set=I,void 0===t&&(t={}),t)for(o=["precision","rounding","toExpNeg","toExpPos","LN10"],n=0;n<o.length;)t.hasOwnProperty(r=o[n++])||(t[r]=this[r]);return i.config(t),i}(l)).default=l.Decimal=l,i=new l(1),void 0===(r=function(){return l}.call(t,n,t,e))||(e.exports=r)}()},8141:(e,t,n)=>{"use strict";var r=n(4836);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n(404));e.exports=t.default},404:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},602:e=>{"use strict";function t(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,n){e.classList?e.classList.remove(n):"string"==typeof e.className?e.className=t(e.className,n):e.setAttribute("class",t(e.className&&e.className.baseVal||"",n))}},6729:e=>{"use strict";var t=Object.prototype.hasOwnProperty,n="~";function r(){}function o(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function i(e,t,r,i,a){if("function"!=typeof r)throw new TypeError("The listener must be a function");var l=new o(r,i||e,a),u=n?n+t:t;return e._events[u]?e._events[u].fn?e._events[u]=[e._events[u],l]:e._events[u].push(l):(e._events[u]=l,e._eventsCount++),e}function a(e,t){0==--e._eventsCount?e._events=new r:delete e._events[t]}function l(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),l.prototype.eventNames=function(){var e,r,o=[];if(0===this._eventsCount)return o;for(r in e=this._events)t.call(e,r)&&o.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(e)):o},l.prototype.listeners=function(e){var t=n?n+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var o=0,i=r.length,a=new Array(i);o<i;o++)a[o]=r[o].fn;return a},l.prototype.listenerCount=function(e){var t=n?n+e:e,r=this._events[t];return r?r.fn?1:r.length:0},l.prototype.emit=function(e,t,r,o,i,a){var l=n?n+e:e;if(!this._events[l])return!1;var u,c,s=this._events[l],f=arguments.length;if(s.fn){switch(s.once&&this.removeListener(e,s.fn,void 0,!0),f){case 1:return s.fn.call(s.context),!0;case 2:return s.fn.call(s.context,t),!0;case 3:return s.fn.call(s.context,t,r),!0;case 4:return s.fn.call(s.context,t,r,o),!0;case 5:return s.fn.call(s.context,t,r,o,i),!0;case 6:return s.fn.call(s.context,t,r,o,i,a),!0}for(c=1,u=new Array(f-1);c<f;c++)u[c-1]=arguments[c];s.fn.apply(s.context,u)}else{var p,d=s.length;for(c=0;c<d;c++)switch(s[c].once&&this.removeListener(e,s[c].fn,void 0,!0),f){case 1:s[c].fn.call(s[c].context);break;case 2:s[c].fn.call(s[c].context,t);break;case 3:s[c].fn.call(s[c].context,t,r);break;case 4:s[c].fn.call(s[c].context,t,r,o);break;default:if(!u)for(p=1,u=new Array(f-1);p<f;p++)u[p-1]=arguments[p];s[c].fn.apply(s[c].context,u)}}return!0},l.prototype.on=function(e,t,n){return i(this,e,t,n,!1)},l.prototype.once=function(e,t,n){return i(this,e,t,n,!0)},l.prototype.removeListener=function(e,t,r,o){var i=n?n+e:e;if(!this._events[i])return this;if(!t)return a(this,i),this;var l=this._events[i];if(l.fn)l.fn!==t||o&&!l.once||r&&l.context!==r||a(this,i);else{for(var u=0,c=[],s=l.length;u<s;u++)(l[u].fn!==t||o&&!l[u].once||r&&l[u].context!==r)&&c.push(l[u]);c.length?this._events[i]=1===c.length?c[0]:c:a(this,i)}return this},l.prototype.removeAllListeners=function(e){var t;return e?(t=n?n+e:e,this._events[t]&&a(this,t)):(this._events=new r,this._eventsCount=0),this},l.prototype.off=l.prototype.removeListener,l.prototype.addListener=l.prototype.on,l.prefixed=n,l.EventEmitter=l,e.exports=l},8552:(e,t,n)=>{var r=n(852)(n(5639),"DataView");e.exports=r},1989:(e,t,n)=>{var r=n(1789),o=n(401),i=n(7667),a=n(1327),l=n(1866);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=l,e.exports=u},8407:(e,t,n)=>{var r=n(7040),o=n(4125),i=n(2117),a=n(7518),l=n(4705);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=l,e.exports=u},7071:(e,t,n)=>{var r=n(852)(n(5639),"Map");e.exports=r},3369:(e,t,n)=>{var r=n(4785),o=n(1285),i=n(6e3),a=n(9916),l=n(5265);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=a,u.prototype.set=l,e.exports=u},3818:(e,t,n)=>{var r=n(852)(n(5639),"Promise");e.exports=r},8525:(e,t,n)=>{var r=n(852)(n(5639),"Set");e.exports=r},8668:(e,t,n)=>{var r=n(3369),o=n(619),i=n(2385);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},6384:(e,t,n)=>{var r=n(8407),o=n(7465),i=n(3779),a=n(7599),l=n(4758),u=n(4309);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=l,c.prototype.set=u,e.exports=c},2705:(e,t,n)=>{var r=n(5639).Symbol;e.exports=r},1149:(e,t,n)=>{var r=n(5639).Uint8Array;e.exports=r},577:(e,t,n)=>{var r=n(852)(n(5639),"WeakMap");e.exports=r},6874:e=>{e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},7412:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},6193:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}},4963:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},7443:(e,t,n)=>{var r=n(2118);e.exports=function(e,t){return!(null==e||!e.length)&&r(e,t,0)>-1}},1196:e=>{e.exports=function(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}},4636:(e,t,n)=>{var r=n(2545),o=n(5694),i=n(1469),a=n(4144),l=n(5776),u=n(6719),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),s=!n&&o(e),f=!n&&!s&&a(e),p=!n&&!s&&!f&&u(e),d=n||s||f||p,h=d?r(e.length,String):[],y=h.length;for(var v in e)!t&&!c.call(e,v)||d&&("length"==v||f&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,y))||h.push(v);return h}},9932:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},2488:e=>{e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},4286:e=>{e.exports=function(e){return e.split("")}},4865:(e,t,n)=>{var r=n(9465),o=n(7813),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},8470:(e,t,n)=>{var r=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},4037:(e,t,n)=>{var r=n(8363),o=n(3674);e.exports=function(e,t){return e&&r(t,o(t),e)}},3886:(e,t,n)=>{var r=n(8363),o=n(1704);e.exports=function(e,t){return e&&r(t,o(t),e)}},9465:(e,t,n)=>{var r=n(8777);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},5990:(e,t,n)=>{var r=n(6384),o=n(7412),i=n(4865),a=n(4037),l=n(3886),u=n(4626),c=n(278),s=n(5341),f=n(1911),p=n(8234),d=n(6904),h=n(4160),y=n(3824),v=n(9148),m=n(8517),g=n(1469),b=n(4144),x=n(6688),w=n(3218),O=n(2928),S=n(3674),A=n(1704),k="[object Arguments]",E="[object Function]",j="[object Object]",P={};P[k]=P["[object Array]"]=P["[object ArrayBuffer]"]=P["[object DataView]"]=P["[object Boolean]"]=P["[object Date]"]=P["[object Float32Array]"]=P["[object Float64Array]"]=P["[object Int8Array]"]=P["[object Int16Array]"]=P["[object Int32Array]"]=P["[object Map]"]=P["[object Number]"]=P[j]=P["[object RegExp]"]=P["[object Set]"]=P["[object String]"]=P["[object Symbol]"]=P["[object Uint8Array]"]=P["[object Uint8ClampedArray]"]=P["[object Uint16Array]"]=P["[object Uint32Array]"]=!0,P["[object Error]"]=P[E]=P["[object WeakMap]"]=!1,e.exports=function e(t,n,C,_,T,M){var N,I=1&n,D=2&n,R=4&n;if(C&&(N=T?C(t,_,T,M):C(t)),void 0!==N)return N;if(!w(t))return t;var L=g(t);if(L){if(N=y(t),!I)return c(t,N)}else{var B=h(t),z=B==E||"[object GeneratorFunction]"==B;if(b(t))return u(t,I);if(B==j||B==k||z&&!T){if(N=D||z?{}:m(t),!I)return D?f(t,l(N,t)):s(t,a(N,t))}else{if(!P[B])return T?t:{};N=v(t,B,I)}}M||(M=new r);var F=M.get(t);if(F)return F;M.set(t,N),O(t)?t.forEach((function(r){N.add(e(r,n,C,r,t,M))})):x(t)&&t.forEach((function(r,o){N.set(o,e(r,n,C,o,t,M))}));var U=L?void 0:(R?D?d:p:D?A:S)(t);return o(U||t,(function(r,o){U&&(r=t[o=r]),i(N,o,e(r,n,C,o,t,M))})),N}},3118:(e,t,n)=>{var r=n(3218),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},9881:(e,t,n)=>{var r=n(7816),o=n(9291)(r);e.exports=o},3239:(e,t,n)=>{var r=n(9881);e.exports=function(e,t){var n=!0;return r(e,(function(e,r,o){return n=!!t(e,r,o)})),n}},6029:(e,t,n)=>{var r=n(3448);e.exports=function(e,t,n){for(var o=-1,i=e.length;++o<i;){var a=e[o],l=t(a);if(null!=l&&(void 0===u?l==l&&!r(l):n(l,u)))var u=l,c=a}return c}},1848:e=>{e.exports=function(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}},1078:(e,t,n)=>{var r=n(2488),o=n(7285);e.exports=function e(t,n,i,a,l){var u=-1,c=t.length;for(i||(i=o),l||(l=[]);++u<c;){var s=t[u];n>0&&i(s)?n>1?e(s,n-1,i,a,l):r(l,s):a||(l[l.length]=s)}return l}},8483:(e,t,n)=>{var r=n(5063)();e.exports=r},7816:(e,t,n)=>{var r=n(8483),o=n(3674);e.exports=function(e,t){return e&&r(e,t,o)}},7786:(e,t,n)=>{var r=n(1811),o=n(327);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},8866:(e,t,n)=>{var r=n(2488),o=n(1469);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},4239:(e,t,n)=>{var r=n(2705),o=n(9607),i=n(2333),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},3325:e=>{e.exports=function(e,t){return e>t}},13:e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},2118:(e,t,n)=>{var r=n(1848),o=n(2722),i=n(2351);e.exports=function(e,t,n){return t==t?i(e,t,n):r(e,o,n)}},9454:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},939:(e,t,n)=>{var r=n(2492),o=n(7005);e.exports=function e(t,n,i,a,l){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,a,e,l))}},2492:(e,t,n)=>{var r=n(6384),o=n(7114),i=n(8351),a=n(6096),l=n(4160),u=n(1469),c=n(4144),s=n(6719),f="[object Arguments]",p="[object Array]",d="[object Object]",h=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,y,v,m){var g=u(e),b=u(t),x=g?p:l(e),w=b?p:l(t),O=(x=x==f?d:x)==d,S=(w=w==f?d:w)==d,A=x==w;if(A&&c(e)){if(!c(t))return!1;g=!0,O=!1}if(A&&!O)return m||(m=new r),g||s(e)?o(e,t,n,y,v,m):i(e,t,x,n,y,v,m);if(!(1&n)){var k=O&&h.call(e,"__wrapped__"),E=S&&h.call(t,"__wrapped__");if(k||E){var j=k?e.value():e,P=E?t.value():t;return m||(m=new r),v(j,P,n,y,m)}}return!!A&&(m||(m=new r),a(e,t,n,y,v,m))}},5588:(e,t,n)=>{var r=n(4160),o=n(7005);e.exports=function(e){return o(e)&&"[object Map]"==r(e)}},2958:(e,t,n)=>{var r=n(6384),o=n(939);e.exports=function(e,t,n,i){var a=n.length,l=a,u=!i;if(null==e)return!l;for(e=Object(e);a--;){var c=n[a];if(u&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++a<l;){var s=(c=n[a])[0],f=e[s],p=c[1];if(u&&c[2]){if(void 0===f&&!(s in e))return!1}else{var d=new r;if(i)var h=i(f,p,s,e,t,d);if(!(void 0===h?o(p,f,3,i,d):h))return!1}}return!0}},2722:e=>{e.exports=function(e){return e!=e}},8458:(e,t,n)=>{var r=n(3560),o=n(5346),i=n(3218),a=n(346),l=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,s=u.toString,f=c.hasOwnProperty,p=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?p:l).test(a(e))}},9221:(e,t,n)=>{var r=n(4160),o=n(7005);e.exports=function(e){return o(e)&&"[object Set]"==r(e)}},8749:(e,t,n)=>{var r=n(4239),o=n(1780),i=n(7005),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},7206:(e,t,n)=>{var r=n(1573),o=n(6432),i=n(6557),a=n(1469),l=n(9601);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?o(e[0],e[1]):r(e):l(e)}},280:(e,t,n)=>{var r=n(5726),o=n(6916),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},313:(e,t,n)=>{var r=n(3218),o=n(5726),i=n(3498),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var l in e)("constructor"!=l||!t&&a.call(e,l))&&n.push(l);return n}},433:e=>{e.exports=function(e,t){return e<t}},9199:(e,t,n)=>{var r=n(9881),o=n(8612);e.exports=function(e,t){var n=-1,i=o(e)?Array(e.length):[];return r(e,(function(e,r,o){i[++n]=t(e,r,o)})),i}},1573:(e,t,n)=>{var r=n(2958),o=n(1499),i=n(2634);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},6432:(e,t,n)=>{var r=n(939),o=n(7361),i=n(9095),a=n(5403),l=n(9162),u=n(2634),c=n(327);e.exports=function(e,t){return a(e)&&l(t)?u(c(e),t):function(n){var a=o(n,e);return void 0===a&&a===t?i(n,e):r(t,a,3)}}},9556:(e,t,n)=>{var r=n(9932),o=n(7786),i=n(7206),a=n(9199),l=n(1131),u=n(1717),c=n(5022),s=n(6557),f=n(1469);e.exports=function(e,t,n){t=t.length?r(t,(function(e){return f(e)?function(t){return o(t,1===e.length?e[0]:e)}:e})):[s];var p=-1;t=r(t,u(i));var d=a(e,(function(e,n,o){return{criteria:r(t,(function(t){return t(e)})),index:++p,value:e}}));return l(d,(function(e,t){return c(e,t,n)}))}},371:e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},9152:(e,t,n)=>{var r=n(7786);e.exports=function(e){return function(t){return r(t,e)}}},98:e=>{var t=Math.ceil,n=Math.max;e.exports=function(e,r,o,i){for(var a=-1,l=n(t((r-e)/(o||1)),0),u=Array(l);l--;)u[i?l:++a]=e,e+=o;return u}},5976:(e,t,n)=>{var r=n(6557),o=n(5357),i=n(61);e.exports=function(e,t){return i(o(e,t,r),e+"")}},6560:(e,t,n)=>{var r=n(5703),o=n(8777),i=n(6557),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},4259:e=>{e.exports=function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}},5076:(e,t,n)=>{var r=n(9881);e.exports=function(e,t){var n;return r(e,(function(e,r,o){return!(n=t(e,r,o))})),!!n}},1131:e=>{e.exports=function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}},7762:e=>{e.exports=function(e,t){for(var n,r=-1,o=e.length;++r<o;){var i=t(e[r]);void 0!==i&&(n=void 0===n?i:n+i)}return n}},2545:e=>{e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},531:(e,t,n)=>{var r=n(2705),o=n(9932),i=n(1469),a=n(3448),l=r?r.prototype:void 0,u=l?l.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return u?u.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},7561:(e,t,n)=>{var r=n(7990),o=/^\s+/;e.exports=function(e){return e?e.slice(0,r(e)+1).replace(o,""):e}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},5652:(e,t,n)=>{var r=n(8668),o=n(7443),i=n(1196),a=n(4757),l=n(3593),u=n(1814);e.exports=function(e,t,n){var c=-1,s=o,f=e.length,p=!0,d=[],h=d;if(n)p=!1,s=i;else if(f>=200){var y=t?null:l(e);if(y)return u(y);p=!1,s=a,h=new r}else h=t?[]:d;e:for(;++c<f;){var v=e[c],m=t?t(v):v;if(v=n||0!==v?v:0,p&&m==m){for(var g=h.length;g--;)if(h[g]===m)continue e;t&&h.push(m),d.push(v)}else s(h,m,n)||(h!==d&&h.push(m),d.push(v))}return d}},7406:(e,t,n)=>{var r=n(1811),o=n(928),i=n(292),a=n(327);e.exports=function(e,t){return t=r(t,e),null==(e=i(e,t))||delete e[a(o(t))]}},4757:e=>{e.exports=function(e,t){return e.has(t)}},1811:(e,t,n)=>{var r=n(1469),o=n(5403),i=n(5514),a=n(9833);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(a(e))}},180:(e,t,n)=>{var r=n(4259);e.exports=function(e,t,n){var o=e.length;return n=void 0===n?o:n,!t&&n>=o?e:r(e,t,n)}},4318:(e,t,n)=>{var r=n(1149);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},4626:(e,t,n)=>{e=n.nmd(e);var r=n(5639),o=t&&!t.nodeType&&t,i=o&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,l=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=l?l(n):new e.constructor(n);return e.copy(r),r}},7157:(e,t,n)=>{var r=n(4318);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},3147:e=>{var t=/\w*$/;e.exports=function(e){var n=new e.constructor(e.source,t.exec(e));return n.lastIndex=e.lastIndex,n}},419:(e,t,n)=>{var r=n(2705),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},7133:(e,t,n)=>{var r=n(4318);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},6393:(e,t,n)=>{var r=n(3448);e.exports=function(e,t){if(e!==t){var n=void 0!==e,o=null===e,i=e==e,a=r(e),l=void 0!==t,u=null===t,c=t==t,s=r(t);if(!u&&!s&&!a&&e>t||a&&l&&c&&!u&&!s||o&&l&&c||!n&&c||!i)return 1;if(!o&&!a&&!s&&e<t||s&&n&&i&&!o&&!a||u&&n&&i||!l&&i||!c)return-1}return 0}},5022:(e,t,n)=>{var r=n(6393);e.exports=function(e,t,n){for(var o=-1,i=e.criteria,a=t.criteria,l=i.length,u=n.length;++o<l;){var c=r(i[o],a[o]);if(c)return o>=u?c:c*("desc"==n[o]?-1:1)}return e.index-t.index}},278:e=>{e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},8363:(e,t,n)=>{var r=n(4865),o=n(9465);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var l=-1,u=t.length;++l<u;){var c=t[l],s=i?i(n[c],e[c],c,n,e):void 0;void 0===s&&(s=e[c]),a?o(n,c,s):r(n,c,s)}return n}},5341:(e,t,n)=>{var r=n(8363),o=n(9551);e.exports=function(e,t){return r(e,o(e),t)}},1911:(e,t,n)=>{var r=n(8363),o=n(1442);e.exports=function(e,t){return r(e,o(e),t)}},4429:(e,t,n)=>{var r=n(5639)["__core-js_shared__"];e.exports=r},9291:(e,t,n)=>{var r=n(8612);e.exports=function(e,t){return function(n,o){if(null==n)return n;if(!r(n))return e(n,o);for(var i=n.length,a=t?i:-1,l=Object(n);(t?a--:++a<i)&&!1!==o(l[a],a,l););return n}}},5063:e=>{e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),l=a.length;l--;){var u=a[e?l:++o];if(!1===n(i[u],u,i))break}return t}}},8805:(e,t,n)=>{var r=n(180),o=n(2689),i=n(3140),a=n(9833);e.exports=function(e){return function(t){t=a(t);var n=o(t)?i(t):void 0,l=n?n[0]:t.charAt(0),u=n?r(n,1).join(""):t.slice(1);return l[e]()+u}}},7740:(e,t,n)=>{var r=n(7206),o=n(8612),i=n(3674);e.exports=function(e){return function(t,n,a){var l=Object(t);if(!o(t)){var u=r(n,3);t=i(t),n=function(e){return u(l[e],e,l)}}var c=e(t,n,a);return c>-1?l[u?t[c]:c]:void 0}}},7445:(e,t,n)=>{var r=n(98),o=n(6612),i=n(8601);e.exports=function(e){return function(t,n,a){return a&&"number"!=typeof a&&o(t,n,a)&&(n=a=void 0),t=i(t),void 0===n?(n=t,t=0):n=i(n),a=void 0===a?t<n?1:-1:i(a),r(t,n,a,e)}}},3593:(e,t,n)=>{var r=n(8525),o=n(308),i=n(1814),a=r&&1/i(new r([,-0]))[1]==1/0?function(e){return new r(e)}:o;e.exports=a},696:(e,t,n)=>{var r=n(8630);e.exports=function(e){return r(e)?void 0:e}},8777:(e,t,n)=>{var r=n(852),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},7114:(e,t,n)=>{var r=n(8668),o=n(2908),i=n(4757);e.exports=function(e,t,n,a,l,u){var c=1&n,s=e.length,f=t.length;if(s!=f&&!(c&&f>s))return!1;var p=u.get(e),d=u.get(t);if(p&&d)return p==t&&d==e;var h=-1,y=!0,v=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++h<s;){var m=e[h],g=t[h];if(a)var b=c?a(g,m,h,t,e,u):a(m,g,h,e,t,u);if(void 0!==b){if(b)continue;y=!1;break}if(v){if(!o(t,(function(e,t){if(!i(v,t)&&(m===e||l(m,e,n,a,u)))return v.push(t)}))){y=!1;break}}else if(m!==g&&!l(m,g,n,a,u)){y=!1;break}}return u.delete(e),u.delete(t),y}},8351:(e,t,n)=>{var r=n(2705),o=n(1149),i=n(7813),a=n(7114),l=n(8776),u=n(1814),c=r?r.prototype:void 0,s=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,f,p){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var d=l;case"[object Set]":var h=1&r;if(d||(d=u),e.size!=t.size&&!h)return!1;var y=p.get(e);if(y)return y==t;r|=2,p.set(e,t);var v=a(d(e),d(t),r,c,f,p);return p.delete(e),v;case"[object Symbol]":if(s)return s.call(e)==s.call(t)}return!1}},6096:(e,t,n)=>{var r=n(8234),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,a,l){var u=1&n,c=r(e),s=c.length;if(s!=r(t).length&&!u)return!1;for(var f=s;f--;){var p=c[f];if(!(u?p in t:o.call(t,p)))return!1}var d=l.get(e),h=l.get(t);if(d&&h)return d==t&&h==e;var y=!0;l.set(e,t),l.set(t,e);for(var v=u;++f<s;){var m=e[p=c[f]],g=t[p];if(i)var b=u?i(g,m,p,t,e,l):i(m,g,p,e,t,l);if(!(void 0===b?m===g||a(m,g,n,i,l):b)){y=!1;break}v||(v="constructor"==p)}if(y&&!v){var x=e.constructor,w=t.constructor;x==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(y=!1)}return l.delete(e),l.delete(t),y}},9021:(e,t,n)=>{var r=n(5564),o=n(5357),i=n(61);e.exports=function(e){return i(o(e,void 0,r),e+"")}},1957:(e,t,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=r},8234:(e,t,n)=>{var r=n(8866),o=n(9551),i=n(3674);e.exports=function(e){return r(e,i,o)}},6904:(e,t,n)=>{var r=n(8866),o=n(1442),i=n(1704);e.exports=function(e){return r(e,i,o)}},5050:(e,t,n)=>{var r=n(7019);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},1499:(e,t,n)=>{var r=n(9162),o=n(3674);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var i=t[n],a=e[i];t[n]=[i,a,r(a)]}return t}},852:(e,t,n)=>{var r=n(8458),o=n(7801);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},5924:(e,t,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);e.exports=r},9607:(e,t,n)=>{var r=n(2705),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[l]=n:delete e[l]),o}},9551:(e,t,n)=>{var r=n(4963),o=n(479),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,l=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return i.call(e,t)})))}:o;e.exports=l},1442:(e,t,n)=>{var r=n(2488),o=n(5924),i=n(9551),a=n(479),l=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=l},4160:(e,t,n)=>{var r=n(8552),o=n(7071),i=n(3818),a=n(8525),l=n(577),u=n(4239),c=n(346),s="[object Map]",f="[object Promise]",p="[object Set]",d="[object WeakMap]",h="[object DataView]",y=c(r),v=c(o),m=c(i),g=c(a),b=c(l),x=u;(r&&x(new r(new ArrayBuffer(1)))!=h||o&&x(new o)!=s||i&&x(i.resolve())!=f||a&&x(new a)!=p||l&&x(new l)!=d)&&(x=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case y:return h;case v:return s;case m:return f;case g:return p;case b:return d}return t}),e.exports=x},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},222:(e,t,n)=>{var r=n(1811),o=n(5694),i=n(1469),a=n(5776),l=n(1780),u=n(327);e.exports=function(e,t,n){for(var c=-1,s=(t=r(t,e)).length,f=!1;++c<s;){var p=u(t[c]);if(!(f=null!=e&&n(e,p)))break;e=e[p]}return f||++c!=s?f:!!(s=null==e?0:e.length)&&l(s)&&a(p,s)&&(i(e)||o(e))}},2689:e=>{var t=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return t.test(e)}},1789:(e,t,n)=>{var r=n(4536);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var r=n(4536),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var r=n(4536),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},1866:(e,t,n)=>{var r=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},3824:e=>{var t=Object.prototype.hasOwnProperty;e.exports=function(e){var n=e.length,r=new e.constructor(n);return n&&"string"==typeof e[0]&&t.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},9148:(e,t,n)=>{var r=n(4318),o=n(7157),i=n(3147),a=n(419),l=n(7133);e.exports=function(e,t,n){var u=e.constructor;switch(t){case"[object ArrayBuffer]":return r(e);case"[object Boolean]":case"[object Date]":return new u(+e);case"[object DataView]":return o(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return l(e,n);case"[object Map]":case"[object Set]":return new u;case"[object Number]":case"[object String]":return new u(e);case"[object RegExp]":return i(e);case"[object Symbol]":return a(e)}}},8517:(e,t,n)=>{var r=n(3118),o=n(5924),i=n(5726);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},7285:(e,t,n)=>{var r=n(2705),o=n(5694),i=n(1469),a=r?r.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||o(e)||!!(a&&e&&e[a])}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var r=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&t.test(e))&&e>-1&&e%1==0&&e<n}},6612:(e,t,n)=>{var r=n(7813),o=n(8612),i=n(5776),a=n(3218);e.exports=function(e,t,n){if(!a(n))return!1;var l=typeof t;return!!("number"==l?o(n)&&i(t,n.length):"string"==l&&t in n)&&r(n[t],e)}},5403:(e,t,n)=>{var r=n(1469),o=n(3448),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||a.test(e)||!i.test(e)||null!=t&&e in Object(t)}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var r,o=n(4429),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},9162:(e,t,n)=>{var r=n(3218);e.exports=function(e){return e==e&&!r(e)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var r=n(8470),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var r=n(8470);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var r=n(8470);e.exports=function(e){return r(this.__data__,e)>-1}},4705:(e,t,n)=>{var r=n(8470);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},4785:(e,t,n)=>{var r=n(1989),o=n(8407),i=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},1285:(e,t,n)=>{var r=n(5050);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).get(e)}},9916:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).has(e)}},5265:(e,t,n)=>{var r=n(5050);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},2634:e=>{e.exports=function(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}},4523:(e,t,n)=>{var r=n(8306);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},4536:(e,t,n)=>{var r=n(852)(Object,"create");e.exports=r},6916:(e,t,n)=>{var r=n(5569)(Object.keys,Object);e.exports=r},3498:e=>{e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},1167:(e,t,n)=>{e=n.nmd(e);var r=n(1957),o=t&&!t.nodeType&&t,i=o&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,l=function(){try{return i&&i.require&&i.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=l},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5357:(e,t,n)=>{var r=n(6874),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,a=-1,l=o(i.length-t,0),u=Array(l);++a<l;)u[a]=i[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=i[a];return c[t]=n(u),r(e,this,c)}}},292:(e,t,n)=>{var r=n(7786),o=n(4259);e.exports=function(e,t){return t.length<2?e:r(e,o(t,0,-1))}},5639:(e,t,n)=>{var r=n(1957),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},61:(e,t,n)=>{var r=n(6560),o=n(1275)(r);e.exports=o},1275:e=>{var t=Date.now;e.exports=function(e){var n=0,r=0;return function(){var o=t(),i=16-(o-r);if(r=o,i>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},7465:(e,t,n)=>{var r=n(8407);e.exports=function(){this.__data__=new r,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var r=n(8407),o=n(7071),i=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},2351:e=>{e.exports=function(e,t,n){for(var r=n-1,o=e.length;++r<o;)if(e[r]===t)return r;return-1}},3140:(e,t,n)=>{var r=n(4286),o=n(2689),i=n(676);e.exports=function(e){return o(e)?i(e):r(e)}},5514:(e,t,n)=>{var r=n(4523),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)})),t}));e.exports=a},327:(e,t,n)=>{var r=n(3448);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7990:e=>{var t=/\s/;e.exports=function(e){for(var n=e.length;n--&&t.test(e.charAt(n)););return n}},676:e=>{var t="\\ud800-\\udfff",n="["+t+"]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",o="\\ud83c[\\udffb-\\udfff]",i="[^"+t+"]",a="(?:\\ud83c[\\udde6-\\uddff]){2}",l="[\\ud800-\\udbff][\\udc00-\\udfff]",u="(?:"+r+"|"+o+")?",c="[\\ufe0e\\ufe0f]?",s=c+u+"(?:\\u200d(?:"+[i,a,l].join("|")+")"+c+u+")*",f="(?:"+[i+r+"?",r,a,l,n].join("|")+")",p=RegExp(o+"(?="+o+")|"+f+s,"g");e.exports=function(e){return e.match(p)||[]}},5703:e=>{e.exports=function(e){return function(){return e}}},3279:(e,t,n)=>{var r=n(3218),o=n(7771),i=n(4841),a=Math.max,l=Math.min;e.exports=function(e,t,n){var u,c,s,f,p,d,h=0,y=!1,v=!1,m=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function g(t){var n=u,r=c;return u=c=void 0,h=t,f=e.apply(r,n)}function b(e){var n=e-d;return void 0===d||n>=t||n<0||v&&e-h>=s}function x(){var e=o();if(b(e))return w(e);p=setTimeout(x,function(e){var n=t-(e-d);return v?l(n,s-(e-h)):n}(e))}function w(e){return p=void 0,m&&u?g(e):(u=c=void 0,f)}function O(){var e=o(),n=b(e);if(u=arguments,c=this,d=e,n){if(void 0===p)return function(e){return h=e,p=setTimeout(x,t),y?g(e):f}(d);if(v)return clearTimeout(p),p=setTimeout(x,t),g(d)}return void 0===p&&(p=setTimeout(x,t)),f}return t=i(t)||0,r(n)&&(y=!!n.leading,s=(v="maxWait"in n)?a(i(n.maxWait)||0,t):s,m="trailing"in n?!!n.trailing:m),O.cancel=function(){void 0!==p&&clearTimeout(p),h=0,u=d=c=p=void 0},O.flush=function(){return void 0===p?f:w(o())},O}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},711:(e,t,n)=>{var r=n(6193),o=n(3239),i=n(7206),a=n(1469),l=n(6612);e.exports=function(e,t,n){var u=a(e)?r:o;return n&&l(e,t,n)&&(t=void 0),u(e,i(t,3))}},3311:(e,t,n)=>{var r=n(7740)(n(998));e.exports=r},998:(e,t,n)=>{var r=n(1848),o=n(7206),i=n(554),a=Math.max;e.exports=function(e,t,n){var l=null==e?0:e.length;if(!l)return-1;var u=null==n?0:i(n);return u<0&&(u=a(l+u,0)),r(e,o(t,3),u)}},8804:(e,t,n)=>{e.exports=n(1175)},4654:(e,t,n)=>{var r=n(1078),o=n(5161);e.exports=function(e,t){return r(o(e,t),1)}},5564:(e,t,n)=>{var r=n(1078);e.exports=function(e){return null!=e&&e.length?r(e,1):[]}},7361:(e,t,n)=>{var r=n(7786);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},9095:(e,t,n)=>{var r=n(13),o=n(222);e.exports=function(e,t){return null!=e&&o(e,t,r)}},1175:e=>{e.exports=function(e){return e&&e.length?e[0]:void 0}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,n)=>{var r=n(9454),o=n(7005),i=Object.prototype,a=i.hasOwnProperty,l=i.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!l.call(e,"callee")};e.exports=u},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var r=n(3560),o=n(1780);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},1584:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return!0===e||!1===e||o(e)&&"[object Boolean]"==r(e)}},4144:(e,t,n)=>{e=n.nmd(e);var r=n(5639),o=n(5062),i=t&&!t.nodeType&&t,a=i&&e&&!e.nodeType&&e,l=a&&a.exports===i?r.Buffer:void 0,u=(l?l.isBuffer:void 0)||o;e.exports=u},8446:(e,t,n)=>{var r=n(939);e.exports=function(e,t){return r(e,t)}},3560:(e,t,n)=>{var r=n(4239),o=n(3218);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},6688:(e,t,n)=>{var r=n(5588),o=n(1717),i=n(1167),a=i&&i.isMap,l=a?o(a):r;e.exports=l},7654:(e,t,n)=>{var r=n(1763);e.exports=function(e){return r(e)&&e!=+e}},4293:e=>{e.exports=function(e){return null==e}},1763:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return"number"==typeof e||o(e)&&"[object Number]"==r(e)}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},8630:(e,t,n)=>{var r=n(4239),o=n(5924),i=n(7005),a=Function.prototype,l=Object.prototype,u=a.toString,c=l.hasOwnProperty,s=u.call(Object);e.exports=function(e){if(!i(e)||"[object Object]"!=r(e))return!1;var t=o(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&u.call(n)==s}},2928:(e,t,n)=>{var r=n(9221),o=n(1717),i=n(1167),a=i&&i.isSet,l=a?o(a):r;e.exports=l},7037:(e,t,n)=>{var r=n(4239),o=n(1469),i=n(7005);e.exports=function(e){return"string"==typeof e||!o(e)&&i(e)&&"[object String]"==r(e)}},3448:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},6719:(e,t,n)=>{var r=n(8749),o=n(1717),i=n(1167),a=i&&i.isTypedArray,l=a?o(a):r;e.exports=l},3674:(e,t,n)=>{var r=n(4636),o=n(280),i=n(8612);e.exports=function(e){return i(e)?r(e):o(e)}},1704:(e,t,n)=>{var r=n(4636),o=n(313),i=n(8612);e.exports=function(e){return i(e)?r(e,!0):o(e)}},928:e=>{e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},5161:(e,t,n)=>{var r=n(9932),o=n(7206),i=n(9199),a=n(1469);e.exports=function(e,t){return(a(e)?r:i)(e,o(t,3))}},6604:(e,t,n)=>{var r=n(9465),o=n(7816),i=n(7206);e.exports=function(e,t){var n={};return t=i(t,3),o(e,(function(e,o,i){r(n,o,t(e,o,i))})),n}},6162:(e,t,n)=>{var r=n(6029),o=n(3325),i=n(6557);e.exports=function(e){return e&&e.length?r(e,i,o):void 0}},4753:(e,t,n)=>{var r=n(6029),o=n(3325),i=n(7206);e.exports=function(e,t){return e&&e.length?r(e,i(t,2),o):void 0}},8306:(e,t,n)=>{var r=n(3369);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},3632:(e,t,n)=>{var r=n(6029),o=n(433),i=n(6557);e.exports=function(e){return e&&e.length?r(e,i,o):void 0}},2762:(e,t,n)=>{var r=n(6029),o=n(7206),i=n(433);e.exports=function(e,t){return e&&e.length?r(e,o(t,2),i):void 0}},308:e=>{e.exports=function(){}},7771:(e,t,n)=>{var r=n(5639);e.exports=function(){return r.Date.now()}},7557:(e,t,n)=>{var r=n(9932),o=n(5990),i=n(7406),a=n(1811),l=n(8363),u=n(696),c=n(9021),s=n(6904),f=c((function(e,t){var n={};if(null==e)return n;var c=!1;t=r(t,(function(t){return t=a(t,e),c||(c=t.length>1),t})),l(e,s(e),n),c&&(n=o(n,7,u));for(var f=t.length;f--;)i(n,t[f]);return n}));e.exports=f},9601:(e,t,n)=>{var r=n(371),o=n(9152),i=n(5403),a=n(327);e.exports=function(e){return i(e)?r(a(e)):o(e)}},6026:(e,t,n)=>{var r=n(7445)();e.exports=r},9704:(e,t,n)=>{var r=n(2908),o=n(7206),i=n(5076),a=n(1469),l=n(6612);e.exports=function(e,t,n){var u=a(e)?r:i;return n&&l(e,t,n)&&(t=void 0),u(e,o(t,3))}},9734:(e,t,n)=>{var r=n(1078),o=n(9556),i=n(5976),a=n(6612),l=i((function(e,t){if(null==e)return[];var n=t.length;return n>1&&a(e,t[0],t[1])?t=[]:n>2&&a(t[0],t[1],t[2])&&(t=[t[0]]),o(e,r(t,1),[])}));e.exports=l},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},3303:(e,t,n)=>{var r=n(7206),o=n(7762);e.exports=function(e,t){return e&&e.length?o(e,r(t,2)):0}},3493:(e,t,n)=>{var r=n(3279),o=n(3218);e.exports=function(e,t,n){var i=!0,a=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return o(n)&&(i="leading"in n?!!n.leading:i,a="trailing"in n?!!n.trailing:a),r(e,t,{leading:i,maxWait:t,trailing:a})}},8601:(e,t,n)=>{var r=n(4841);e.exports=function(e){return e?Infinity===(e=r(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},554:(e,t,n)=>{var r=n(8601);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},4841:(e,t,n)=>{var r=n(7561),o=n(3218),i=n(3448),a=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,u=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(i(e))return NaN;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=r(e);var n=l.test(e);return n||u.test(e)?c(e.slice(2),n?2:8):a.test(e)?NaN:+e}},9833:(e,t,n)=>{var r=n(531);e.exports=function(e){return null==e?"":r(e)}},5578:(e,t,n)=>{var r=n(7206),o=n(5652);e.exports=function(e,t){return e&&e.length?o(e,r(t,2)):[]}},1700:(e,t,n)=>{var r=n(8805)("toUpperCase");e.exports=r},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)a.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},h={};function y(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var m=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(d,e)&&(p.test(e)?h[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(m,g);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(m,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(m,g);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),O=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),A=Symbol.for("react.strict_mode"),k=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),j=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),C=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),M=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var N=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var R,L=Object.assign;function B(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var z=!1;function F(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l]){var u="\n"+o[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=a&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function U(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case O:return"Portal";case k:return"Profiler";case A:return"StrictMode";case C:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case j:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case M:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===A?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Q(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){Q(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ie(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ye(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ye(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(de).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var me=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(me[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Se=null,Ae=null;function ke(e){if(e=xo(e)){if("function"!=typeof Oe)throw Error(i(280));var t=e.stateNode;t&&(t=Oo(t),Oe(e.stateNode,e.type,t))}}function Ee(e){Se?Ae?Ae.push(e):Ae=[e]:Se=e}function je(){if(Se){var e=Se,t=Ae;if(Ae=Se=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function Pe(e,t){return e(t)}function Ce(){}var _e=!1;function Te(e,t,n){if(_e)return e(t,n);_e=!0;try{return Pe(e,t,n)}finally{_e=!1,(null!==Se||null!==Ae)&&(Ce(),je())}}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=Oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ne=!1;if(s)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){Ne=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(se){Ne=!1}function De(e,t,n,r,o,i,a,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Re=!1,Le=null,Be=!1,ze=null,Fe={onError:function(e){Re=!0,Le=e}};function Ue(e,t,n,r,o,i,a,l,u){Re=!1,Le=null,De.apply(Fe,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(We(e)!==e)throw Error(i(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ve(o),e;if(a===r)return Ve(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?qe(e):null}function qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=qe(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,Xe=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Ye=o.unstable_requestPaint,Qe=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=ft(l):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function yt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function mt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function xt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,Ot,St,At,kt,Et=!1,jt=[],Pt=null,Ct=null,_t=null,Tt=new Map,Mt=new Map,Nt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ct=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function Rt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=xo(t))&&Ot(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Lt(e){var t=bo(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void kt(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=xo(n))&&Ot(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function zt(e,t,n){Bt(e)&&n.delete(t)}function Ft(){Et=!1,null!==Pt&&Bt(Pt)&&(Pt=null),null!==Ct&&Bt(Ct)&&(Ct=null),null!==_t&&Bt(_t)&&(_t=null),Tt.forEach(zt),Mt.forEach(zt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Et||(Et=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function Wt(e){function t(t){return Ut(t,e)}if(0<jt.length){Ut(jt[0],e);for(var n=1;n<jt.length;n++){var r=jt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Ut(Pt,e),null!==Ct&&Ut(Ct,e),null!==_t&&Ut(_t,e),Tt.forEach(t),Mt.forEach(t),n=0;n<Nt.length;n++)(r=Nt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Nt.length&&null===(n=Nt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Nt.shift()}var $t=x.ReactCurrentBatchConfig,Vt=!0;function Ht(e,t,n,r){var o=bt,i=$t.transition;$t.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,$t.transition=i}}function qt(e,t,n,r){var o=bt,i=$t.transition;$t.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,$t.transition=i}}function Kt(e,t,n,r){if(Vt){var o=Gt(e,t,n,r);if(null===o)Vr(e,t,r,Xt,n),Dt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Rt(Pt,e,t,n,r,o),!0;case"dragenter":return Ct=Rt(Ct,e,t,n,r,o),!0;case"mouseover":return _t=Rt(_t,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Tt.set(i,Rt(Tt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Mt.set(i,Rt(Mt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==o;){var i=xo(o);if(null!==i&&wt(i),null===(i=Gt(e,t,n,r))&&Vr(e,t,r,Xt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Xt=null;function Gt(e,t,n,r){if(Xt=null,null!==(e=bo(e=we(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Xt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Qt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Qt?Qt.value:Qt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=L({},cn,{view:0,detail:0}),pn=on(fn),dn=L({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:kn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(dn),yn=on(L({},dn,{dataTransfer:0})),vn=on(L({},fn,{relatedTarget:0})),mn=on(L({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=L({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),xn=on(L({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},On={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function An(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function kn(){return An}var En=L({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?On[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:kn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),jn=on(En),Pn=on(L({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=on(L({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:kn})),_n=on(L({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=L({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Mn=on(Tn),Nn=[9,13,27,32],In=s&&"CompositionEvent"in window,Dn=null;s&&"documentMode"in document&&(Dn=document.documentMode);var Rn=s&&"TextEvent"in window&&!Dn,Ln=s&&(!In||Dn&&8<Dn&&11>=Dn),Bn=String.fromCharCode(32),zn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Hn(e,t,n,r){Ee(r),0<(t=qr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Kn=null;function Xn(e){Br(e,0)}function Gn(e){if(K(wo(e)))return e}function Yn(e,t){if("change"===e)return t}var Qn=!1;if(s){var Zn;if(s){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Qn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){qn&&(qn.detachEvent("onpropertychange",nr),Kn=qn=null)}function nr(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];Hn(t,Kn,e,we(e)),Te(Xn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function ir(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=sr(n,i);var a=sr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var yr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,gr=null,br=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==X(r)||(r="selectionStart"in(r=vr)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=qr(mr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Or={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},Sr={},Ar={};function kr(e){if(Sr[e])return Sr[e];if(!Or[e])return e;var t,n=Or[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ar)return Sr[e]=n[t];return e}s&&(Ar=document.createElement("div").style,"AnimationEvent"in window||(delete Or.animationend.animation,delete Or.animationiteration.animation,delete Or.animationstart.animation),"TransitionEvent"in window||delete Or.transitionend.transition);var Er=kr("animationend"),jr=kr("animationiteration"),Pr=kr("animationstart"),Cr=kr("transitionend"),_r=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Mr(e,t){_r.set(e,t),u(t,[e])}for(var Nr=0;Nr<Tr.length;Nr++){var Ir=Tr[Nr];Mr(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Mr(Er,"onAnimationEnd"),Mr(jr,"onAnimationIteration"),Mr(Pr,"onAnimationStart"),Mr("dblclick","onDoubleClick"),Mr("focusin","onFocus"),Mr("focusout","onBlur"),Mr(Cr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,c){if(Ue.apply(this,arguments),Re){if(!Re)throw Error(i(198));var s=Le;Re=!1,Le=null,Be||(Be=!0,ze=s)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Lr(o,l,c),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,c=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Lr(o,l,c),i=u}}}if(Be)throw e=ze,Be=!1,ze=null,e}function zr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Ur]){e[Ur]=!0,a.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Fr("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Yt(t)){case 1:var o=Ht;break;case 4:o=qt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Ne||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=bo(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=i,o=we(n),a=[];e:{var l=_r.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=jn;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Cn;break;case Er:case jr:case Pr:u=mn;break;case Cr:u=_n;break;case"scroll":u=pn;break;case"wheel":u=Mn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var s=0!=(4&t),f=!s&&"scroll"===e,p=s?null!==l?l+"Capture":null:l;s=[];for(var d,h=r;null!==h;){var y=(d=h).stateNode;if(5===d.tag&&null!==y&&(d=y,null!==p&&null!=(y=Me(h,p))&&s.push(Hr(h,y,d))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),a.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[yo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=We(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,y="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Pn,y="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==u?l:wo(u),d=null==c?l:wo(c),(l=new s(y,h+"leave",u,n,o)).target=f,l.relatedTarget=d,y=null,bo(o)===r&&((s=new s(p,h+"enter",c,n,o)).target=d,s.relatedTarget=f,y=s),f=y,u&&c)e:{for(p=c,h=0,d=s=u;d;d=Kr(d))h++;for(d=0,y=p;y;y=Kr(y))d++;for(;0<h-d;)s=Kr(s),h--;for(;0<d-h;)p=Kr(p),d--;for(;h--;){if(s===p||null!==p&&s===p.alternate)break e;s=Kr(s),p=Kr(p)}s=null}else s=null;null!==u&&Xr(a,l,u,s,!1),null!==c&&null!==f&&Xr(a,f,c,s,!0)}if("select"===(u=(l=r?wo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yn;else if(Vn(l))if(Qn)v=ar;else{v=or;var m=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ir);switch(v&&(v=v(e,r))?Hn(a,v,n,o):(m&&m(e,l,r),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&ee(l,"number",l.value)),m=r?wo(r):window,e){case"focusin":(Vn(m)||"true"===m.contentEditable)&&(vr=m,mr=r,gr=null);break;case"focusout":gr=mr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,xr(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":xr(a,n,o)}var g;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=en()):(Zt="value"in(Qt=o)?Qt.value:Qt.textContent,Wn=!0)),0<(m=qr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:m}),(g||null!==(g=Un(n)))&&(b.data=g))),(g=Rn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(zn=!0,Bn);case"textInput":return(e=t.data)===Bn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!In&&Fn(e,t)?(e=en(),Jt=Zt=Qt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=qr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Br(a,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Me(e,n))&&r.unshift(Hr(e,i,o)),null!=(i=Me(e,t))&&r.push(Hr(e,i,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Xr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Me(n,i))&&a.unshift(Hr(n,u,l)):o||null!=(u=Me(n,i))&&a.push(Hr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Gr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Qr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Yr,"")}function Zr(e,t,n){if(t=Qr(t),Qr(e)!==t&&n)throw Error(i(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,yo="__reactContainer$"+fo,vo="__reactEvents$"+fo,mo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[yo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function xo(e){return!(e=e[po]||e[yo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Oo(e){return e[ho]||null}var So=[],Ao=-1;function ko(e){return{current:e}}function Eo(e){0>Ao||(e.current=So[Ao],So[Ao]=null,Ao--)}function jo(e,t){Ao++,So[Ao]=e.current,e.current=t}var Po={},Co=ko(Po),_o=ko(!1),To=Po;function Mo(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function No(e){return null!=e.childContextTypes}function Io(){Eo(_o),Eo(Co)}function Do(e,t,n){if(Co.current!==Po)throw Error(i(168));jo(Co,t),jo(_o,n)}function Ro(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,$(e)||"Unknown",o));return L({},n,r)}function Lo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,To=Co.current,jo(Co,e),jo(_o,_o.current),!0}function Bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Ro(e,t,To),r.__reactInternalMemoizedMergedChildContext=e,Eo(_o),Eo(Co),jo(Co,e)):Eo(_o),jo(_o,n)}var zo=null,Fo=!1,Uo=!1;function Wo(e){null===zo?zo=[e]:zo.push(e)}function $o(){if(!Uo&&null!==zo){Uo=!0;var e=0,t=bt;try{var n=zo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Fo=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ke(Je,$o),t}finally{bt=t,Uo=!1}}return null}var Vo=[],Ho=0,qo=null,Ko=0,Xo=[],Go=0,Yo=null,Qo=1,Zo="";function Jo(e,t){Vo[Ho++]=Ko,Vo[Ho++]=qo,qo=e,Ko=t}function ei(e,t,n){Xo[Go++]=Qo,Xo[Go++]=Zo,Xo[Go++]=Yo,Yo=e;var r=Qo;e=Zo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Qo=1<<32-at(t)+o|n<<o|r,Zo=i+e}else Qo=1<<i|n<<o|r,Zo=e}function ti(e){null!==e.return&&(Jo(e,1),ei(e,1,0))}function ni(e){for(;e===qo;)qo=Vo[--Ho],Vo[Ho]=null,Ko=Vo[--Ho],Vo[Ho]=null;for(;e===Yo;)Yo=Xo[--Go],Xo[Go]=null,Zo=Xo[--Go],Xo[Go]=null,Qo=Xo[--Go],Xo[Go]=null}var ri=null,oi=null,ii=!1,ai=null;function li(e,t){var n=Mc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ui(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yo?{id:Qo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Mc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function ci(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function si(e){if(ii){var t=oi;if(t){var n=t;if(!ui(e,t)){if(ci(e))throw Error(i(418));t=co(n.nextSibling);var r=ri;t&&ui(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(ci(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function pi(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(ci(e))throw di(),Error(i(418));for(;t;)li(e,t),t=co(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?co(e.stateNode.nextSibling):null;return!0}function di(){for(var e=oi;e;)e=co(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function yi(e){null===ai?ai=[e]:ai.push(e)}var vi=x.ReactCurrentBatchConfig;function mi(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var gi=ko(null),bi=null,xi=null,wi=null;function Oi(){wi=xi=bi=null}function Si(e){var t=gi.current;Eo(gi),e._currentValue=t}function Ai(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ki(e,t){bi=e,wi=xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(xl=!0),e.firstContext=null)}function Ei(e){var t=e._currentValue;if(wi!==e)if(e={context:e,memoizedValue:t,next:null},null===xi){if(null===bi)throw Error(i(308));xi=e,bi.dependencies={lanes:0,firstContext:e}}else xi=xi.next=e;return t}var ji=null;function Pi(e){null===ji?ji=[e]:ji.push(e)}function Ci(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pi(t)):(n.next=o.next,o.next=n),t.interleaved=n,_i(e,r)}function _i(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ti=!1;function Mi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ii(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Di(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Cu)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,_i(e,n)}return null===(o=r.interleaved)?(t.next=t,Pi(r)):(t.next=o.next,o.next=t),r.interleaved=t,_i(e,n)}function Ri(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Bi(e,t,n,r){var o=e.updateQueue;Ti=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===a?i=c:a.next=c,a=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==a&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==i){var f=o.baseState;for(a=0,s=c=u=null,l=i;;){var p=l.lane,d=l.eventTime;if((r&p)===p){null!==s&&(s=s.next={eventTime:d,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,y=l;switch(p=t,d=n,y.tag){case 1:if("function"==typeof(h=y.payload)){f=h.call(d,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=y.payload)?h.call(d,f,p):h))break e;f=L({},f,p);break e;case 2:Ti=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[l]:p.push(l))}else d={eventTime:d,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=d,u=f):s=s.next=d,a|=p;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Lu|=a,e.lanes=a,e.memoizedState=f}}function zi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Fi=(new r.Component).refs;function Ui(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Wi={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Ii(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Di(e,i,o))&&(rc(t,e,o,r),Ri(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Ii(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Di(e,i,o))&&(rc(t,e,o,r),Ri(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Ii(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Di(e,o,r))&&(rc(t,e,r,n),Ri(t,e,r))}};function $i(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function Vi(e,t,n){var r=!1,o=Po,i=t.contextType;return"object"==typeof i&&null!==i?i=Ei(i):(o=No(t)?To:Co.current,i=(r=null!=(r=t.contextTypes))?Mo(e,o):Po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Wi.enqueueReplaceState(t,t.state,null)}function qi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fi,Mi(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Ei(i):(i=No(t)?To:Co.current,o.context=Mo(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(Ui(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Wi.enqueueReplaceState(o,o.state,null),Bi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Fi&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Xi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Gi(e){return(0,e._init)(e._payload)}function Yi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ic(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Bc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var i=n.type;return i===S?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===M&&Gi(i)===t.type)?((r=o(t,n.props)).ref=Ki(e,t,n),r.return=e,r):((r=Dc(n.type,n.key,n.props,null,e.mode,r)).ref=Ki(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Rc(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Dc(t.type,t.key,t.props,null,e.mode,n)).ref=Ki(e,null,t),n.return=e,n;case O:return(t=zc(t,e.mode,n)).return=e,t;case M:return p(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Rc(t,e.mode,n,null)).return=e,t;Xi(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?c(e,t,n,r):null;case O:return n.key===o?s(e,t,n,r):null;case M:return d(e,t,(o=n._init)(n._payload),r)}if(te(n)||D(n))return null!==o?null:f(e,t,n,r,null);Xi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case O:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case M:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||D(r))return f(t,e=e.get(n)||null,r,o,null);Xi(t,r)}return null}function y(o,i,l,u){for(var c=null,s=null,f=i,y=i=0,v=null;null!==f&&y<l.length;y++){f.index>y?(v=f,f=null):v=f.sibling;var m=d(o,f,l[y],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,y),null===s?c=m:s.sibling=m,s=m,f=v}if(y===l.length)return n(o,f),ii&&Jo(o,y),c;if(null===f){for(;y<l.length;y++)null!==(f=p(o,l[y],u))&&(i=a(f,i,y),null===s?c=f:s.sibling=f,s=f);return ii&&Jo(o,y),c}for(f=r(o,f);y<l.length;y++)null!==(v=h(f,o,y,l[y],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?y:v.key),i=a(v,i,y),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),ii&&Jo(o,y),c}function v(o,l,u,c){var s=D(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,y=l,v=l=0,m=null,g=u.next();null!==y&&!g.done;v++,g=u.next()){y.index>v?(m=y,y=null):m=y.sibling;var b=d(o,y,g.value,c);if(null===b){null===y&&(y=m);break}e&&y&&null===b.alternate&&t(o,y),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,y=m}if(g.done)return n(o,y),ii&&Jo(o,v),s;if(null===y){for(;!g.done;v++,g=u.next())null!==(g=p(o,g.value,c))&&(l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return ii&&Jo(o,v),s}for(y=r(o,y);!g.done;v++,g=u.next())null!==(g=h(y,o,v,g.value,c))&&(e&&null!==g.alternate&&y.delete(null===g.key?v:g.key),l=a(g,l,v),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach((function(e){return t(o,e)})),ii&&Jo(o,v),s}return function e(r,i,a,u){if("object"==typeof a&&null!==a&&a.type===S&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var c=a.key,s=i;null!==s;){if(s.key===c){if((c=a.type)===S){if(7===s.tag){n(r,s.sibling),(i=o(s,a.props.children)).return=r,r=i;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===M&&Gi(c)===s.type){n(r,s.sibling),(i=o(s,a.props)).ref=Ki(r,s,a),i.return=r,r=i;break e}n(r,s);break}t(r,s),s=s.sibling}a.type===S?((i=Rc(a.props.children,r.mode,u,a.key)).return=r,r=i):((u=Dc(a.type,a.key,a.props,null,r.mode,u)).ref=Ki(r,i,a),u.return=r,r=u)}return l(r);case O:e:{for(s=a.key;null!==i;){if(i.key===s){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zc(a,r.mode,u)).return=r,r=i}return l(r);case M:return e(r,i,(s=a._init)(a._payload),u)}if(te(a))return y(r,i,a,u);if(D(a))return v(r,i,a,u);Xi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=Bc(a,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var Qi=Yi(!0),Zi=Yi(!1),Ji={},ea=ko(Ji),ta=ko(Ji),na=ko(Ji);function ra(e){if(e===Ji)throw Error(i(174));return e}function oa(e,t){switch(jo(na,t),jo(ta,e),jo(ea,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Eo(ea),jo(ea,t)}function ia(){Eo(ea),Eo(ta),Eo(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=ue(t,e.type);t!==n&&(jo(ta,e),jo(ea,n))}function la(e){ta.current===e&&(Eo(ea),Eo(ta))}var ua=ko(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var sa=[];function fa(){for(var e=0;e<sa.length;e++)sa[e]._workInProgressVersionPrimary=null;sa.length=0}var pa=x.ReactCurrentDispatcher,da=x.ReactCurrentBatchConfig,ha=0,ya=null,va=null,ma=null,ga=!1,ba=!1,xa=0,wa=0;function Oa(){throw Error(i(321))}function Sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Aa(e,t,n,r,o,a){if(ha=a,ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),ba){a=0;do{if(ba=!1,xa=0,25<=a)throw Error(i(301));a+=1,ma=va=null,t.updateQueue=null,pa.current=cl,e=n(r,o)}while(ba)}if(pa.current=al,t=null!==va&&null!==va.next,ha=0,ma=va=ya=null,ga=!1,t)throw Error(i(300));return e}function ka(){var e=0!==xa;return xa=0,e}function Ea(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ma?ya.memoizedState=ma=e:ma=ma.next=e,ma}function ja(){if(null===va){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ma?ya.memoizedState:ma.next;if(null!==t)ma=t,va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ma?ya.memoizedState=ma=e:ma=ma.next=e}return ma}function Pa(e,t){return"function"==typeof t?t(e):t}function Ca(e){var t=ja(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var u=l=null,c=null,s=a;do{var f=s.lane;if((ha&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var p={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=p,l=r):c=c.next=p,ya.lanes|=f,Lu|=f}s=s.next}while(null!==s&&s!==a);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(xl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ya.lanes|=a,Lu|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function _a(e){var t=ja(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);lr(a,t.memoizedState)||(xl=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ta(){}function Ma(e,t){var n=ya,r=ja(),o=t(),a=!lr(r.memoizedState,o);if(a&&(r.memoizedState=o,xl=!0),r=r.queue,Va(Da.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ma&&1&ma.memoizedState.tag){if(n.flags|=2048,za(9,Ia.bind(null,n,r,o,t),void 0,null),null===_u)throw Error(i(349));0!=(30&ha)||Na(n,t,o)}return o}function Na(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ya.updateQueue)?(t={lastEffect:null,stores:null},ya.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ia(e,t,n,r){t.value=n,t.getSnapshot=r,Ra(t)&&La(e)}function Da(e,t,n){return n((function(){Ra(t)&&La(e)}))}function Ra(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function La(e){var t=_i(e,1);null!==t&&rc(t,e,1,-1)}function Ba(e){var t=Ea();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pa,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,ya,e),[t.memoizedState,e]}function za(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ya.updateQueue)?(t={lastEffect:null,stores:null},ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Fa(){return ja().memoizedState}function Ua(e,t,n,r){var o=Ea();ya.flags|=e,o.memoizedState=za(1|t,n,void 0,void 0===r?null:r)}function Wa(e,t,n,r){var o=ja();r=void 0===r?null:r;var i=void 0;if(null!==va){var a=va.memoizedState;if(i=a.destroy,null!==r&&Sa(r,a.deps))return void(o.memoizedState=za(t,n,i,r))}ya.flags|=e,o.memoizedState=za(1|t,n,i,r)}function $a(e,t){return Ua(8390656,8,e,t)}function Va(e,t){return Wa(2048,8,e,t)}function Ha(e,t){return Wa(4,2,e,t)}function qa(e,t){return Wa(4,4,e,t)}function Ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Xa(e,t,n){return n=null!=n?n.concat([e]):null,Wa(4,4,Ka.bind(null,t,e),n)}function Ga(){}function Ya(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Qa(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,xl=!0),e.memoizedState=n):(lr(n,t)||(n=yt(),ya.lanes|=n,Lu|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=da.transition;da.transition={};try{e(!1),t()}finally{bt=n,da.transition=r}}function el(){return ja().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ci(e,t,n,r))&&(rc(n,e,r,tc()),il(n,t,r))}function nl(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,a)){var u=t.interleaved;return null===u?(o.next=o,Pi(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ci(e,t,o,r))&&(rc(n,e,r,o=tc()),il(n,t,r))}}function rl(e){var t=e.alternate;return e===ya||null!==t&&t===ya}function ol(e,t){ba=ga=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function il(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var al={readContext:Ei,useCallback:Oa,useContext:Oa,useEffect:Oa,useImperativeHandle:Oa,useInsertionEffect:Oa,useLayoutEffect:Oa,useMemo:Oa,useReducer:Oa,useRef:Oa,useState:Oa,useDebugValue:Oa,useDeferredValue:Oa,useTransition:Oa,useMutableSource:Oa,useSyncExternalStore:Oa,useId:Oa,unstable_isNewReconciler:!1},ll={readContext:Ei,useCallback:function(e,t){return Ea().memoizedState=[e,void 0===t?null:t],e},useContext:Ei,useEffect:$a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ua(4194308,4,Ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ua(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ua(4,2,e,t)},useMemo:function(e,t){var n=Ea();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ea();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ea().memoizedState=e},useState:Ba,useDebugValue:Ga,useDeferredValue:function(e){return Ea().memoizedState=e},useTransition:function(){var e=Ba(!1),t=e[0];return e=Ja.bind(null,e[1]),Ea().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ya,o=Ea();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===_u)throw Error(i(349));0!=(30&ha)||Na(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,$a(Da.bind(null,r,a,e),[e]),r.flags|=2048,za(9,Ia.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Ea(),t=_u.identifierPrefix;if(ii){var n=Zo;t=":"+t+"R"+(n=(Qo&~(1<<32-at(Qo)-1)).toString(32)+n),0<(n=xa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=wa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Ei,useCallback:Ya,useContext:Ei,useEffect:Va,useImperativeHandle:Xa,useInsertionEffect:Ha,useLayoutEffect:qa,useMemo:Qa,useReducer:Ca,useRef:Fa,useState:function(){return Ca(Pa)},useDebugValue:Ga,useDeferredValue:function(e){return Za(ja(),va.memoizedState,e)},useTransition:function(){return[Ca(Pa)[0],ja().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Ma,useId:el,unstable_isNewReconciler:!1},cl={readContext:Ei,useCallback:Ya,useContext:Ei,useEffect:Va,useImperativeHandle:Xa,useInsertionEffect:Ha,useLayoutEffect:qa,useMemo:Qa,useReducer:_a,useRef:Fa,useState:function(){return _a(Pa)},useDebugValue:Ga,useDeferredValue:function(e){var t=ja();return null===va?t.memoizedState=e:Za(t,va.memoizedState,e)},useTransition:function(){return[_a(Pa)[0],ja().memoizedState]},useMutableSource:Ta,useSyncExternalStore:Ma,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var dl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ii(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hu||(Hu=!0,qu=r),pl(0,t)},n}function yl(e,t,n){(n=Ii(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){pl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new dl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ec.bind(null,e,t,n),t.then(e,e))}function ml(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ii(-1,1)).tag=2,Di(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=x.ReactCurrentOwner,xl=!1;function wl(e,t,n,r){t.child=null===e?Zi(t,null,n,r):Qi(t,e.child,n,r)}function Ol(e,t,n,r,o){n=n.render;var i=t.ref;return ki(t,o),r=Aa(e,t,n,r,i,o),n=ka(),null===e||xl?(ii&&n&&ti(t),t.flags|=1,wl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Sl(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Nc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Dc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Al(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)return Hl(e,t,o)}return t.flags|=1,(e=Ic(i,r)).ref=t.ref,e.return=t,t.child=e}function Al(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(ur(i,r)&&e.ref===t.ref){if(xl=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,Hl(e,t,o);0!=(131072&e.flags)&&(xl=!0)}}return jl(e,t,n,r,o)}function kl(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},jo(Iu,Nu),Nu|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,jo(Iu,Nu),Nu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,jo(Iu,Nu),Nu|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,jo(Iu,Nu),Nu|=r;return wl(e,t,o,n),t.child}function El(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function jl(e,t,n,r,o){var i=No(n)?To:Co.current;return i=Mo(t,i),ki(t,o),n=Aa(e,t,n,r,i,o),r=ka(),null===e||xl?(ii&&r&&ti(t),t.flags|=1,wl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Hl(e,t,o))}function Pl(e,t,n,r,o){if(No(n)){var i=!0;Lo(t)}else i=!1;if(ki(t,o),null===t.stateNode)Vl(e,t),Vi(t,n,r),qi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,c=n.contextType;c="object"==typeof c&&null!==c?Ei(c):Mo(t,c=No(n)?To:Co.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==c)&&Hi(t,a,r,c),Ti=!1;var p=t.memoizedState;a.state=p,Bi(t,r,a,o),u=t.memoizedState,l!==r||p!==u||_o.current||Ti?("function"==typeof s&&(Ui(t,n,s,r),u=t.memoizedState),(l=Ti||$i(t,n,l,r,p,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=c,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ni(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:mi(t.type,l),a.props=c,f=t.pendingProps,p=a.context,u="object"==typeof(u=n.contextType)&&null!==u?Ei(u):Mo(t,u=No(n)?To:Co.current);var d=n.getDerivedStateFromProps;(s="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||p!==u)&&Hi(t,a,r,u),Ti=!1,p=t.memoizedState,a.state=p,Bi(t,r,a,o);var h=t.memoizedState;l!==f||p!==h||_o.current||Ti?("function"==typeof d&&(Ui(t,n,d,r),h=t.memoizedState),(c=Ti||$i(t,n,c,r,p,h,u)||!1)?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Cl(e,t,n,r,i,o)}function Cl(e,t,n,r,o,i){El(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Bo(t,n,!1),Hl(e,t,i);r=t.stateNode,bl.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Qi(t,e.child,null,i),t.child=Qi(t,null,l,i)):wl(e,t,l,i),t.memoizedState=r.state,o&&Bo(t,n,!0),t.child}function _l(e){var t=e.stateNode;t.pendingContext?Do(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Do(0,t.context,!1),oa(e,t.containerInfo)}function Tl(e,t,n,r,o){return hi(),yi(o),t.flags|=256,wl(e,t,n,r),t.child}var Ml,Nl,Il,Dl,Rl={dehydrated:null,treeContext:null,retryLane:0};function Ll(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bl(e,t,n){var r,o=t.pendingProps,a=ua.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),jo(ua,1&a),null===e)return si(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Lc(u,o,0,null),e=Rc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ll(n),t.memoizedState=Rl,e):zl(t,u));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=fl(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Lc({mode:"visible",children:r.children},o,0,null),(a=Rc(a,o,l,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Qi(t,e.child,null,l),t.child.memoizedState=Ll(l),t.memoizedState=Rl,a);if(0==(1&t.mode))return Fl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Fl(e,t,l,r=fl(a=Error(i(419)),r,void 0))}if(u=0!=(l&e.childLanes),xl||u){if(null!==(r=_u)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==a.retryLane&&(a.retryLane=o,_i(e,o),rc(r,e,o,-1))}return vc(),Fl(e,t,l,r=fl(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Pc.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=co(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Xo[Go++]=Qo,Xo[Go++]=Zo,Xo[Go++]=Yo,Qo=e.id,Zo=e.overflow,Yo=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,a,n);if(l){l=o.fallback,u=t.mode,r=(a=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Ic(a,c)).subtreeFlags=14680064&a.subtreeFlags,null!==r?l=Ic(r,l):(l=Rc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Ll(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Rl,o}return e=(l=e.child).sibling,o=Ic(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&yi(r),Qi(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ul(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ai(e.return,t,n)}function Wl(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function $l(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(wl(e,t,r.children,n),0!=(2&(r=ua.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ul(e,n,t);else if(19===e.tag)Ul(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(jo(ua,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Wl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Wl(t,!0,n,null,i);break;case"together":Wl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Vl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Hl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ic(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ic(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function ql(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Xl(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return No(t.type)&&Io(),Kl(t),null;case 3:return r=t.stateNode,ia(),Eo(_o),Eo(Co),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(lc(ai),ai=null))),Nl(e,t),Kl(t),null;case 5:la(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Il(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Kl(t),null}if(e=ra(ea.current),pi(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Dr.length;o++)zr(Dr[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":Y(r,a),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},zr("invalid",r);break;case"textarea":oe(r,a),zr("invalid",r)}for(var u in ge(n,a),o=null,a)if(a.hasOwnProperty(u)){var c=a[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==a.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&zr("scroll",r)}switch(n){case"input":q(r),J(r,a,!0);break;case"textarea":q(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Ml(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Dr.length;o++)zr(Dr[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":Y(e,r),o=G(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=L({},r,{value:void 0}),zr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),zr("invalid",e)}for(a in ge(n,o),c=o)if(c.hasOwnProperty(a)){var s=c[a];"style"===a?ve(e,s):"dangerouslySetInnerHTML"===a?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===a?"string"==typeof s?("textarea"!==n||""!==s)&&pe(e,s):"number"==typeof s&&pe(e,""+s):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=s&&"onScroll"===a&&zr("scroll",e):null!=s&&b(e,a,s,u))}switch(n){case"input":q(e),J(e,r,!1);break;case"textarea":q(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Dl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),pi(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Kl(t),null;case 13:if(Eo(ua),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))di(),hi(),t.flags|=98560,a=!1;else if(a=pi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),a=!1}else null!==ai&&(lc(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ua.current)?0===Du&&(Du=3):vc())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return ia(),Nl(e,t),null===e&&Wr(t.stateNode.containerInfo),Kl(t),null;case 10:return Si(t.type._context),Kl(t),null;case 19:if(Eo(ua),null===(a=t.memoizedState))return Kl(t),null;if(r=0!=(128&t.flags),null===(u=a.rendering))if(r)ql(a,!1);else{if(0!==Du||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ca(e))){for(t.flags|=128,ql(a,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(u=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=u.childLanes,a.lanes=u.lanes,a.child=u.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=u.memoizedProps,a.memoizedState=u.memoizedState,a.updateQueue=u.updateQueue,a.type=u.type,e=u.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return jo(ua,1&ua.current|2),t.child}e=e.sibling}null!==a.tail&&Qe()>$u&&(t.flags|=128,r=!0,ql(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ca(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ql(a,!0),null===a.tail&&"hidden"===a.tailMode&&!u.alternate&&!ii)return Kl(t),null}else 2*Qe()-a.renderingStartTime>$u&&1073741824!==n&&(t.flags|=128,r=!0,ql(a,!1),t.lanes=4194304);a.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=a.last)?n.sibling=u:t.child=u,a.last=u)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Qe(),t.sibling=null,n=ua.current,jo(ua,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return pc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nu)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Gl(e,t){switch(ni(t),t.tag){case 1:return No(t.type)&&Io(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),Eo(_o),Eo(Co),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(Eo(ua),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Eo(ua),null;case 4:return ia(),null;case 10:return Si(t.type._context),null;case 22:case 23:return pc(),null;default:return null}}Ml=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Nl=function(){},Il=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=G(e,o),r=G(e,r),a=[];break;case"select":o=L({},o,{value:void 0}),r=L({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(s in ge(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?a||(a=[]):(a=a||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(a||(a=[]),a.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(a=a||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&zr("scroll",e),a||u===c||(a=[])):(a=a||[]).push(s,c))}n&&(a=a||[]).push("style",n);var s=a;(t.updateQueue=s)&&(t.flags|=4)}},Dl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yl=!1,Ql=!1,Zl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){kc(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tu(t,n,i)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function iu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[mo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var fu=null,pu=!1;function du(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Ql||eu(n,t);case 6:var r=fu,o=pu;fu=null,du(e,t,n),pu=o,null!==(fu=r)&&(pu?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(pu?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Wt(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=pu,fu=n.stateNode.containerInfo,pu=!0,du(e,t,n),fu=r,pu=o;break;case 0:case 11:case 14:case 15:if(!Ql&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tu(n,t,a),o=o.next}while(o!==r)}du(e,t,n);break;case 1:if(!Ql&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){kc(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Ql=(r=Ql)||null!==n.memoizedState,du(e,t,n),Ql=r):du(e,t,n);break;default:du(e,t,n)}}function yu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=Cc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,pu=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,pu=!0;break e}u=u.return}if(null===fu)throw Error(i(160));hu(a,l,o),fu=null,pu=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){kc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)mu(t,e),t=t.sibling}function mu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),gu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){kc(e,e.return,t)}try{ru(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),gu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){kc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,l=null!==n?n.memoizedProps:a,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===a.type&&null!=a.name&&Q(o,a),be(u,l);var s=be(u,a);for(l=0;l<c.length;l+=2){var f=c[l],p=c[l+1];"style"===f?ve(o,p):"dangerouslySetInnerHTML"===f?fe(o,p):"children"===f?pe(o,p):b(o,f,p,s)}switch(u){case"input":Z(o,a);break;case"textarea":ie(o,a);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):d!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){kc(e,e.return,t)}}break;case 6:if(vu(t,e),gu(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){kc(e,e.return,t)}}break;case 3:if(vu(t,e),gu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:vu(t,e),gu(e);break;case 13:vu(t,e),gu(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Wu=Qe())),4&r&&yu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Ql=(s=Ql)||f,vu(t,e),Ql=s):vu(t,e),gu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Jl=e,f=e.child;null!==f;){for(p=Jl=f;null!==Jl;){switch(h=(d=Jl).child,d.tag){case 0:case 11:case 14:case 15:ru(4,d,d.return);break;case 1:eu(d,d.return);var y=d.stateNode;if("function"==typeof y.componentWillUnmount){r=d,n=d.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(e){kc(r,n,e)}}break;case 5:eu(d,d.return);break;case 22:if(null!==d.memoizedState){Ou(p);continue}}null!==h?(h.return=d,Jl=h):Ou(p)}f=f.sibling}e:for(f=null,p=e;;){if(5===p.tag){if(null===f){f=p;try{o=p.stateNode,s?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(u=p.stateNode,l=null!=(c=p.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=ye("display",l))}catch(t){kc(e,e.return,t)}}}else if(6===p.tag){if(null===f)try{p.stateNode.nodeValue=s?"":p.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;f===p&&(f=null),p=p.return}f===p&&(f=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:vu(t,e),gu(e),4&r&&yu(e);case 21:}}function gu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;cu(e,uu(e),a);break;default:throw Error(i(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Jl=e,xu(e,t,n)}function xu(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Yl;if(!a){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Ql;l=Yl;var c=Ql;if(Yl=a,(Ql=u)&&!c)for(Jl=o;null!==Jl;)u=(a=Jl).child,22===a.tag&&null!==a.memoizedState?Su(o):null!==u?(u.return=a,Jl=u):Su(o);for(;null!==i;)Jl=i,xu(i,t,n),i=i.sibling;Jl=o,Yl=l,Ql=c}wu(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Jl=i):wu(e)}}function wu(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ql||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ql)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:mi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&zi(t,a,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zi(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var p=f.dehydrated;null!==p&&Wt(p)}}}break;default:throw Error(i(163))}Ql||512&t.flags&&iu(t)}catch(e){kc(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function Ou(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Su(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){kc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){kc(t,o,e)}}var i=t.return;try{iu(t)}catch(e){kc(t,i,e)}break;case 5:var a=t.return;try{iu(t)}catch(e){kc(t,a,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Au,ku=Math.ceil,Eu=x.ReactCurrentDispatcher,ju=x.ReactCurrentOwner,Pu=x.ReactCurrentBatchConfig,Cu=0,_u=null,Tu=null,Mu=0,Nu=0,Iu=ko(0),Du=0,Ru=null,Lu=0,Bu=0,zu=0,Fu=null,Uu=null,Wu=0,$u=1/0,Vu=null,Hu=!1,qu=null,Ku=null,Xu=!1,Gu=null,Yu=0,Qu=0,Zu=null,Ju=-1,ec=0;function tc(){return 0!=(6&Cu)?Qe():-1!==Ju?Ju:Ju=Qe()}function nc(e){return 0==(1&e.mode)?1:0!=(2&Cu)&&0!==Mu?Mu&-Mu:null!==vi.transition?(0===ec&&(ec=yt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function rc(e,t,n,r){if(50<Qu)throw Qu=0,Zu=null,Error(i(185));mt(e,n,r),0!=(2&Cu)&&e===_u||(e===_u&&(0==(2&Cu)&&(Bu|=n),4===Du&&uc(e,Mu)),oc(e,r),1===n&&0===Cu&&0==(1&t.mode)&&($u=Qe()+500,Fo&&$o()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=dt(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=pt(e,e===_u?Mu:0);if(0===r)null!==n&&Xe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Xe(n),1===t)0===e.tag?function(e){Fo=!0,Wo(e)}(cc.bind(null,e)):Wo(cc.bind(null,e)),ao((function(){0==(6&Cu)&&$o()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=_c(n,ic.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ic(e,t){if(Ju=-1,ec=0,0!=(6&Cu))throw Error(i(327));var n=e.callbackNode;if(Sc()&&e.callbackNode!==n)return null;var r=pt(e,e===_u?Mu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=mc(e,r);else{t=r;var o=Cu;Cu|=2;var a=yc();for(_u===e&&Mu===t||(Vu=null,$u=Qe()+500,dc(e,t));;)try{bc();break}catch(t){hc(e,t)}Oi(),Eu.current=a,Cu=o,null!==Tu?t=0:(_u=null,Mu=0,t=Du)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ac(e,o)),1===t)throw n=Ru,dc(e,0),uc(e,r),oc(e,Qe()),n;if(6===t)uc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=mc(e,r))&&0!==(a=ht(e))&&(r=a,t=ac(e,a)),1===t))throw n=Ru,dc(e,0),uc(e,r),oc(e,Qe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:Oc(e,Uu,Vu);break;case 3:if(uc(e,r),(130023424&r)===r&&10<(t=Wu+500-Qe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Oc.bind(null,e,Uu,Vu),t);break}Oc(e,Uu,Vu);break;case 4:if(uc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-at(r);a=1<<l,(l=t[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ro(Oc.bind(null,e,Uu,Vu),r);break}Oc(e,Uu,Vu);break;default:throw Error(i(329))}}}return oc(e,Qe()),e.callbackNode===n?ic.bind(null,e):null}function ac(e,t){var n=Fu;return e.current.memoizedState.isDehydrated&&(dc(e,t).flags|=256),2!==(e=mc(e,t))&&(t=Uu,Uu=n,null!==t&&lc(t)),e}function lc(e){null===Uu?Uu=e:Uu.push.apply(Uu,e)}function uc(e,t){for(t&=~zu,t&=~Bu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&Cu))throw Error(i(327));Sc();var t=pt(e,0);if(0==(1&t))return oc(e,Qe()),null;var n=mc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=Ru,dc(e,0),uc(e,t),oc(e,Qe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Oc(e,Uu,Vu),oc(e,Qe()),null}function sc(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&($u=Qe()+500,Fo&&$o())}}function fc(e){null!==Gu&&0===Gu.tag&&0==(6&Cu)&&Sc();var t=Cu;Cu|=1;var n=Pu.transition,r=bt;try{if(Pu.transition=null,bt=1,e)return e()}finally{bt=r,Pu.transition=n,0==(6&(Cu=t))&&$o()}}function pc(){Nu=Iu.current,Eo(Iu)}function dc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Io();break;case 3:ia(),Eo(_o),Eo(Co),fa();break;case 5:la(r);break;case 4:ia();break;case 13:case 19:Eo(ua);break;case 10:Si(r.type._context);break;case 22:case 23:pc()}n=n.return}if(_u=e,Tu=e=Ic(e.current,null),Mu=Nu=t,Du=0,Ru=null,zu=Bu=Lu=0,Uu=Fu=null,null!==ji){for(t=0;t<ji.length;t++)if(null!==(r=(n=ji[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}ji=null}return e}function hc(e,t){for(;;){var n=Tu;try{if(Oi(),pa.current=al,ga){for(var r=ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ga=!1}if(ha=0,ma=va=ya=null,ba=!1,xa=0,ju.current=null,null===n||null===n.return){Du=1,Ru=t,Tu=null;break}e:{var a=e,l=n.return,u=n,c=t;if(t=Mu,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,p=f.tag;if(0==(1&f.mode)&&(0===p||11===p||15===p)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=ml(l);if(null!==h){h.flags&=-257,gl(h,l,u,0,t),1&h.mode&&vl(a,s,t),c=s;var y=(t=h).updateQueue;if(null===y){var v=new Set;v.add(c),t.updateQueue=v}else y.add(c);break e}if(0==(1&t)){vl(a,s,t),vc();break e}c=Error(i(426))}else if(ii&&1&u.mode){var m=ml(l);if(null!==m){0==(65536&m.flags)&&(m.flags|=256),gl(m,l,u,0,t),yi(sl(c,u));break e}}a=c=sl(c,u),4!==Du&&(Du=2),null===Fu?Fu=[a]:Fu.push(a),a=l;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Li(a,hl(0,c,t));break e;case 1:u=c;var g=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ku||!Ku.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Li(a,yl(a,u,t));break e}}a=a.return}while(null!==a)}wc(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function yc(){var e=Eu.current;return Eu.current=al,null===e?al:e}function vc(){0!==Du&&3!==Du&&2!==Du||(Du=4),null===_u||0==(268435455&Lu)&&0==(268435455&Bu)||uc(_u,Mu)}function mc(e,t){var n=Cu;Cu|=2;var r=yc();for(_u===e&&Mu===t||(Vu=null,dc(e,t));;)try{gc();break}catch(t){hc(e,t)}if(Oi(),Cu=n,Eu.current=r,null!==Tu)throw Error(i(261));return _u=null,Mu=0,Du}function gc(){for(;null!==Tu;)xc(Tu)}function bc(){for(;null!==Tu&&!Ge();)xc(Tu)}function xc(e){var t=Au(e.alternate,e,Nu);e.memoizedProps=e.pendingProps,null===t?wc(e):Tu=t,ju.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Xl(n,t,Nu)))return void(Tu=n)}else{if(null!==(n=Gl(n,t)))return n.flags&=32767,void(Tu=n);if(null===e)return Du=6,void(Tu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===Du&&(Du=5)}function Oc(e,t,n){var r=bt,o=Pu.transition;try{Pu.transition=null,bt=1,function(e,t,n,r){do{Sc()}while(null!==Gu);if(0!=(6&Cu))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===_u&&(Tu=_u=null,Mu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Xu||(Xu=!0,_c(tt,(function(){return Sc(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Pu.transition,Pu.transition=null;var l=bt;bt=1;var u=Cu;Cu|=4,ju.current=null,function(e,t){if(eo=Vt,dr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,p=e,d=null;t:for(;;){for(var h;p!==n||0!==o&&3!==p.nodeType||(u=l+o),p!==a||0!==r&&3!==p.nodeType||(c=l+r),3===p.nodeType&&(l+=p.nodeValue.length),null!==(h=p.firstChild);)d=p,p=h;for(;;){if(p===e)break t;if(d===n&&++s===o&&(u=l),d===a&&++f===r&&(c=l),null!==(h=p.nextSibling))break;d=(p=d).parentNode}p=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Vt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var y=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==y){var v=y.memoizedProps,m=y.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:mi(t.type,v),m);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(i(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}y=nu,nu=!1}(e,n),mu(n,e),hr(to),Vt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Ye(),Cu=u,bt=l,Pu.transition=a}else e.current=n;if(Xu&&(Xu=!1,Gu=e,Yu=o),0===(a=e.pendingLanes)&&(Ku=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Qe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Hu)throw Hu=!1,e=qu,qu=null,e;0!=(1&Yu)&&0!==e.tag&&Sc(),0!=(1&(a=e.pendingLanes))?e===Zu?Qu++:(Qu=0,Zu=e):Qu=0,$o()}(e,t,n,r)}finally{Pu.transition=o,bt=r}return null}function Sc(){if(null!==Gu){var e=xt(Yu),t=Pu.transition,n=bt;try{if(Pu.transition=null,bt=16>e?16:e,null===Gu)var r=!1;else{if(e=Gu,Gu=null,Yu=0,0!=(6&Cu))throw Error(i(331));var o=Cu;for(Cu|=4,Jl=e.current;null!==Jl;){var a=Jl,l=a.child;if(0!=(16&Jl.flags)){var u=a.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Jl=s;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:ru(8,f,a)}var p=f.child;if(null!==p)p.return=f,Jl=p;else for(;null!==Jl;){var d=(f=Jl).sibling,h=f.return;if(au(f),f===s){Jl=null;break}if(null!==d){d.return=h,Jl=d;break}Jl=h}}}var y=a.alternate;if(null!==y){var v=y.child;if(null!==v){y.child=null;do{var m=v.sibling;v.sibling=null,v=m}while(null!==v)}}Jl=a}}if(0!=(2064&a.subtreeFlags)&&null!==l)l.return=a,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(a=Jl).flags))switch(a.tag){case 0:case 11:case 15:ru(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Jl=g;break e}Jl=a.return}}var b=e.current;for(Jl=b;null!==Jl;){var x=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==x)x.return=l,Jl=x;else e:for(l=b;null!==Jl;){if(0!=(2048&(u=Jl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){kc(u,u.return,e)}if(u===l){Jl=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Jl=w;break e}Jl=u.return}}if(Cu=o,$o(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Pu.transition=t}}return!1}function Ac(e,t,n){e=Di(e,t=hl(0,t=sl(n,t),1),1),t=tc(),null!==e&&(mt(e,1,t),oc(e,t))}function kc(e,t,n){if(3===e.tag)Ac(e,e,n);else for(;null!==t;){if(3===t.tag){Ac(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Di(t,e=yl(t,e=sl(n,e),1),1),e=tc(),null!==t&&(mt(t,1,e),oc(t,e));break}}t=t.return}}function Ec(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,_u===e&&(Mu&n)===n&&(4===Du||3===Du&&(130023424&Mu)===Mu&&500>Qe()-Wu?dc(e,0):zu|=n),oc(e,t)}function jc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=_i(e,t))&&(mt(e,t,n),oc(e,n))}function Pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),jc(e,n)}function Cc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),jc(e,n)}function _c(e,t){return Ke(e,t)}function Tc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Mc(e,t,n,r){return new Tc(e,t,n,r)}function Nc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ic(e,t){var n=e.alternate;return null===n?((n=Mc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Dc(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Nc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Rc(n.children,o,a,t);case A:l=8,o|=8;break;case k:return(e=Mc(12,n,t,2|o)).elementType=k,e.lanes=a,e;case C:return(e=Mc(13,n,t,o)).elementType=C,e.lanes=a,e;case _:return(e=Mc(19,n,t,o)).elementType=_,e.lanes=a,e;case N:return Lc(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:l=10;break e;case j:l=9;break e;case P:l=11;break e;case T:l=14;break e;case M:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Mc(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Rc(e,t,n,r){return(e=Mc(7,e,r,t)).lanes=n,e}function Lc(e,t,n,r){return(e=Mc(22,e,r,t)).elementType=N,e.lanes=n,e.stateNode={isHidden:!1},e}function Bc(e,t,n){return(e=Mc(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Mc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,o,i,a,l,u){return e=new Fc(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Mc(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Mi(i),e}function Wc(e){if(!e)return Po;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(No(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(No(n))return Ro(e,n,t)}return t}function $c(e,t,n,r,o,i,a,l,u){return(e=Uc(n,r,!0,e,0,i,0,l,u)).context=Wc(null),n=e.current,(i=Ii(r=tc(),o=nc(n))).callback=null!=t?t:null,Di(n,i,o),e.current.lanes=o,mt(e,o,r),oc(e,r),e}function Vc(e,t,n,r){var o=t.current,i=tc(),a=nc(o);return n=Wc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ii(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Di(o,t,a))&&(rc(e,o,a,i),Ri(e,o,a)),a}function Hc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function qc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kc(e,t){qc(e,t),(e=e.alternate)&&qc(e,t)}Au=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||_o.current)xl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return xl=!1,function(e,t,n){switch(t.tag){case 3:_l(t),hi();break;case 5:aa(t);break;case 1:No(t.type)&&Lo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;jo(gi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(jo(ua,1&ua.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bl(e,t,n):(jo(ua,1&ua.current),null!==(e=Hl(e,t,n))?e.sibling:null);jo(ua,1&ua.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return $l(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),jo(ua,ua.current),r)break;return null;case 22:case 23:return t.lanes=0,kl(e,t,n)}return Hl(e,t,n)}(e,t,n);xl=0!=(131072&e.flags)}else xl=!1,ii&&0!=(1048576&t.flags)&&ei(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Vl(e,t),e=t.pendingProps;var o=Mo(t,Co.current);ki(t,n),o=Aa(null,t,r,e,o,n);var a=ka();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,No(r)?(a=!0,Lo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Mi(t),o.updater=Wi,t.stateNode=o,o._reactInternals=t,qi(t,r,e,n),t=Cl(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),wl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Vl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Nc(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===T)return 14}return 2}(r),e=mi(r,e),o){case 0:t=jl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=Ol(null,t,r,e,n);break e;case 14:t=Sl(null,t,r,mi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,jl(e,t,r,o=t.elementType===r?o:mi(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:mi(r,o),n);case 3:e:{if(_l(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ni(e,t),Bi(t,r,null,n);var l=t.memoizedState;if(r=l.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Tl(e,t,r,n,o=sl(Error(i(423)),t));break e}if(r!==o){t=Tl(e,t,r,n,o=sl(Error(i(424)),t));break e}for(oi=co(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Zi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=Hl(e,t,n);break e}wl(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&si(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==a&&no(r,a)&&(t.flags|=32),El(e,t),wl(e,t,l,n),t.child;case 6:return null===e&&si(t),null;case 13:return Bl(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qi(t,null,r,n):wl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ol(e,t,r,o=t.elementType===r?o:mi(r,o),n);case 7:return wl(e,t,t.pendingProps,n),t.child;case 8:case 12:return wl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,l=o.value,jo(gi,r._currentValue),r._currentValue=l,null!==a)if(lr(a.value,l)){if(a.children===o.children&&!_o.current){t=Hl(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var u=a.dependencies;if(null!==u){l=a.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===a.tag){(c=Ii(-1,n&-n)).tag=2;var s=a.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}a.lanes|=n,null!==(c=a.alternate)&&(c.lanes|=n),Ai(a.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===a.tag)l=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(l=a.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ai(l,n,t),l=a.sibling}else l=a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}wl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ki(t,n),r=r(o=Ei(o)),t.flags|=1,wl(e,t,r,n),t.child;case 14:return o=mi(r=t.type,t.pendingProps),Sl(e,t,r,o=mi(r.type,o),n);case 15:return Al(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:mi(r,o),Vl(e,t),t.tag=1,No(r)?(e=!0,Lo(t)):e=!1,ki(t,n),Vi(t,r,o),qi(t,r,o,n),Cl(null,t,r,!0,e,n);case 19:return $l(e,t,n);case 22:return kl(e,t,n)}throw Error(i(156,t.tag))};var Xc="function"==typeof reportError?reportError:function(e){console.error(e)};function Gc(e){this._internalRoot=e}function Yc(e){this._internalRoot=e}function Qc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function es(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=Hc(a);l.call(e)}}Vc(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Hc(a);i.call(e)}}var a=$c(t,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=a,e[yo]=a.current,Wr(8===e.nodeType?e.parentNode:e),fc(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hc(u);l.call(e)}}var u=Uc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=u,e[yo]=u.current,Wr(8===e.nodeType?e.parentNode:e),fc((function(){Vc(t,u,n,r)})),u}(n,t,e,o,r);return Hc(a)}Yc.prototype.render=Gc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Vc(e,t,null,null)},Yc.prototype.unmount=Gc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Vc(null,e,null,null)})),t[yo]=null}},Yc.prototype.unstable_scheduleHydration=function(e){if(e){var t=At();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Nt.length&&0!==t&&t<Nt[n].priority;n++);Nt.splice(n,0,e),0===n&&Lt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),oc(t,Qe()),0==(6&Cu)&&($u=Qe()+500,$o()))}break;case 13:fc((function(){var t=_i(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Kc(e,1)}},Ot=function(e){if(13===e.tag){var t=_i(e,134217728);null!==t&&rc(t,e,134217728,tc()),Kc(e,134217728)}},St=function(e){if(13===e.tag){var t=nc(e),n=_i(e,t);null!==n&&rc(n,e,t,tc()),Kc(e,t)}},At=function(){return bt},kt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Oe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Oo(r);if(!o)throw Error(i(90));K(r),Z(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=sc,Ce=fc;var ts={usingClientEntryPoint:!1,Events:[xo,wo,Oo,Ee,je,sc]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),it=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qc(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:O,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Qc(e))throw Error(i(299));var n=!1,r="",o=Xc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,o),e[yo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Gc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(i(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Qc(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",l=Xc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=$c(t,null,e,1,null!=n?n:null,o,0,a,l),e[yo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Yc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(i(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[yo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zc(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=(n&&Symbol.for("react.suspense_list"),n?Symbol.for("react.memo"):60115),y=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope");function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case i:case l:case a:case d:return e;default:switch(e=e&&e.$$typeof){case c:case p:case y:case h:case u:return e;default:return t}}case o:return t}}}t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isFragment=function(e){return v(e)===i}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},6871:(e,t,n)=>{"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,l=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==l){var u=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+u+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}return e}n.r(t),n.d(t,{polyfill:()=>a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},129:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=void 0,function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}t.default=e}(n(5697));var r=l(n(8141)),o=l(n(602)),i=l(n(7294)),a=l(n(644));function l(e){return e&&e.__esModule?e:{default:e}}function u(){return u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}n(4726);var c=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return(0,r.default)(e,t)}))},s=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return(0,o.default)(e,t)}))},f=function(e){var t,n;function r(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).onEnter=function(e,n){var r=t.getClassNames(n?"appear":"enter").className;t.removeClasses(e,"exit"),c(e,r),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var r=t.getClassNames(n?"appear":"enter").activeClassName;t.reflowAndAddClass(e,r),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var r=t.getClassNames("appear").doneClassName,o=t.getClassNames("enter").doneClassName,i=n?r+" "+o:o;t.removeClasses(e,n?"appear":"enter"),c(e,i),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){var n=t.getClassNames("exit").className;t.removeClasses(e,"appear"),t.removeClasses(e,"enter"),c(e,n),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){var n=t.getClassNames("exit").activeClassName;t.reflowAndAddClass(e,n),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){var n=t.getClassNames("exit").doneClassName;t.removeClasses(e,"exit"),c(e,n),t.props.onExited&&t.props.onExited(e)},t.getClassNames=function(e){var n=t.props.classNames,r="string"==typeof n,o=r?(r&&n?n+"-":"")+e:n[e];return{className:o,activeClassName:r?o+"-active":n[e+"Active"],doneClassName:r?o+"-done":n[e+"Done"]}},t}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.removeClasses=function(e,t){var n=this.getClassNames(t),r=n.className,o=n.activeClassName,i=n.doneClassName;r&&s(e,r),o&&s(e,o),i&&s(e,i)},o.reflowAndAddClass=function(e,t){t&&(e&&e.scrollTop,c(e,t))},o.render=function(){var e=u({},this.props);return delete e.classNames,i.default.createElement(a.default,u({},e,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},r}(i.default.Component);f.defaultProps={classNames:""},f.propTypes={};var p=f;t.default=p,e.exports=t.default},6093:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=void 0,a(n(5697));var r=a(n(7294)),o=n(3935),i=a(n(2381));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t,n;function a(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleEnter=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEnter",0,n)},t.handleEntering=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntering",0,n)},t.handleEntered=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onEntered",0,n)},t.handleExit=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExit",1,n)},t.handleExiting=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExiting",1,n)},t.handleExited=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.handleLifecycle("onExited",1,n)},t}n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var l=a.prototype;return l.handleLifecycle=function(e,t,n){var i,a=this.props.children,l=r.default.Children.toArray(a)[t];l.props[e]&&(i=l.props)[e].apply(i,n),this.props[e]&&this.props[e]((0,o.findDOMNode)(this))},l.render=function(){var e=this.props,t=e.children,n=e.in,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["children","in"]),a=r.default.Children.toArray(t),l=a[0],u=a[1];return delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,r.default.createElement(i.default,o,n?r.default.cloneElement(l,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):r.default.cloneElement(u,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},a}(r.default.Component);l.propTypes={};var u=l;t.default=u,e.exports=t.default},644:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(5697)),o=l(n(7294)),i=l(n(3935)),a=n(6871);function l(e){return e&&e.__esModule?e:{default:e}}n(4726);var u="unmounted";t.UNMOUNTED=u;var c="exited";t.EXITED=c;var s="entering";t.ENTERING=s;var f="entered";t.ENTERED=f;var p="exiting";t.EXITING=p;var d=function(e){var t,n;function r(t,n){var r;r=e.call(this,t,n)||this;var o,i=n.transitionGroup,a=i&&!i.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=c,r.appearStatus=s):o=f:o=t.unmountOnExit||t.mountOnEnter?u:c,r.state={status:o},r.nextCallback=null,r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var a=r.prototype;return a.getChildContext=function(){return{transitionGroup:null}},r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===u?{status:c}:null},a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==s&&n!==f&&(t=s):n!==s&&n!==f||(t=p)}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);t===s?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===c&&this.setState({status:u})},a.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;t||r?(this.props.onEnter(e,o),this.safeSetState({status:s},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:f},(function(){n.props.onEntered(e,o)}))}))}))):this.safeSetState({status:f},(function(){n.props.onEntered(e)}))},a.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:p},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:c},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:c},(function(){t.props.onExited(e)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===u)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},r}(o.default.Component);function h(){}d.contextTypes={transitionGroup:r.object},d.childContextTypes={transitionGroup:function(){}},d.propTypes={},d.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:h,onEntering:h,onEntered:h,onExit:h,onExiting:h,onExited:h},d.UNMOUNTED=0,d.EXITED=1,d.ENTERING=2,d.ENTERED=3,d.EXITING=4;var y=(0,a.polyfill)(d);t.default=y},2381:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=void 0;var r=l(n(5697)),o=l(n(7294)),i=n(6871),a=n(537);function l(e){return e&&e.__esModule?e:{default:e}}function u(){return u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u.apply(this,arguments)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var s=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},f=function(e){var t,n;function r(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(c(c(r)));return r.state={handleExited:o,firstRender:!0},r}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var i=r.prototype;return i.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},i.componentDidMount=function(){this.appeared=!0,this.mounted=!0},i.componentWillUnmount=function(){this.mounted=!1},r.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},i.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=u({},t.children);return delete n[e.key],{children:n}})))},i.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["component","childFactory"]),i=s(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i:o.default.createElement(t,r,i)},r}(o.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(e){return e}};var p=(0,i.polyfill)(f);t.default=p,e.exports=t.default},4317:(e,t,n)=>{"use strict";var r=l(n(129)),o=l(n(6093)),i=l(n(2381)),a=l(n(644));function l(e){return e&&e.__esModule?e:{default:e}}e.exports={Transition:a.default,TransitionGroup:i.default,ReplaceTransition:o.default,CSSTransition:r.default}},537:(e,t,n)=>{"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,(function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})}))},t.getNextChildMapping=function(e,t,n){var l=o(e.children),u=i(t,l);return Object.keys(u).forEach((function(o){var i=u[o];if((0,r.isValidElement)(i)){var c=o in t,s=o in l,f=t[o],p=(0,r.isValidElement)(f)&&!f.props.in;!s||c&&!p?s||!c||p?s&&c&&(0,r.isValidElement)(f)&&(u[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:f.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):u[o]=(0,r.cloneElement)(i,{in:!1}):u[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}})),u};var r=n(7294);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)})),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var c=o[u][r];l[o[u][r]]=n(c)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},4726:(e,t,n)=>{"use strict";var r;t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0,(r=n(5697))&&r.__esModule,t.timeoutsShape=null,t.classNamesShape=null},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),d=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y=Object.assign,v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var x=b.prototype=new g;x.constructor=b,y(x,m.prototype),x.isPureReactComponent=!0;var w=Array.isArray,O=Object.prototype.hasOwnProperty,S={current:null},A={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,r){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)O.call(t,o)&&!A.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:n,type:e,key:a,ref:l,props:i,_owner:S.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var j=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return a=a(u=e),e=""===i?"."+P(u,0):i,w(a)?(o="",null!=e&&(o=e.replace(j,"$&/")+"/"),C(a,t,o,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(j,"$&/")+"/")+e)),t.push(a)),1;if(u=0,i=""===i?".":i+":",w(e))for(var c=0;c<e.length;c++){var s=i+P(l=e[c],c);u+=C(l,t,o,s,a)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,o,s=i+P(l,c++),a);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M={current:null},N={transition:null},I={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:N,ReactCurrentOwner:S};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=m,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=y({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)O.call(t,c)&&!A.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=N.transition;N.transition={};try{e()}finally{N.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return M.current.useCallback(e,t)},t.useContext=function(e){return M.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return M.current.useDeferredValue(e)},t.useEffect=function(e,t){return M.current.useEffect(e,t)},t.useId=function(){return M.current.useId()},t.useImperativeHandle=function(e,t,n){return M.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return M.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return M.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return M.current.useMemo(e,t)},t.useReducer=function(e,t,n){return M.current.useReducer(e,t,n)},t.useRef=function(e){return M.current.useRef(e)},t.useState=function(e){return M.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return M.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return M.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},2389:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Area:()=>tg,AreaChart:()=>ux,Bar:()=>hv,BarChart:()=>cb,Brush:()=>Uy,CartesianAxis:()=>ym,CartesianGrid:()=>Pm,Cell:()=>eo,ComposedChart:()=>sx,Cross:()=>hd,Curve:()=>Wp,Customized:()=>ep,DefaultLegendContent:()=>ct,DefaultTooltipContent:()=>Nt,Dot:()=>ld,ErrorBar:()=>Es,Funnel:()=>_x,FunnelChart:()=>Tx,Global:()=>Dr,Label:()=>Lf,LabelList:()=>Qf,Layer:()=>fe,Legend:()=>At,Line:()=>Wm,LineChart:()=>ub,Pie:()=>Wh,PieChart:()=>sb,PolarAngleAxis:()=>th,PolarGrid:()=>Ed,PolarRadiusAxis:()=>$d,Polygon:()=>id,Radar:()=>ty,RadarChart:()=>ax,RadialBar:()=>Oy,RadialBarChart:()=>cx,Rectangle:()=>Zp,ReferenceArea:()=>Xv,ReferenceDot:()=>Uv,ReferenceLine:()=>Iv,ResponsiveContainer:()=>Jr,Sankey:()=>ox,Scatter:()=>vg,ScatterChart:()=>lx,Sector:()=>cp,Surface:()=>ue,Symbols:()=>Je,Text:()=>Do,Tooltip:()=>Hr,Trapezoid:()=>yh,Treemap:()=>Tb,XAxis:()=>mg,YAxis:()=>gg,ZAxis:()=>ng});var r={};n.r(r),n.d(r,{scaleBand:()=>$o,scaleDiverging:()=>Tc,scaleDivergingLog:()=>Mc,scaleDivergingPow:()=>Ic,scaleDivergingSqrt:()=>Dc,scaleDivergingSymlog:()=>Nc,scaleIdentity:()=>Pa,scaleImplicit:()=>Uo,scaleLinear:()=>ja,scaleLog:()=>La,scaleOrdinal:()=>Wo,scalePoint:()=>Ho,scalePow:()=>qa,scaleQuantile:()=>nl,scaleQuantize:()=>rl,scaleRadial:()=>Ga,scaleSequential:()=>Ac,scaleSequentialLog:()=>kc,scaleSequentialPow:()=>jc,scaleSequentialQuantile:()=>Cc,scaleSequentialSqrt:()=>Pc,scaleSequentialSymlog:()=>Ec,scaleSqrt:()=>Ka,scaleSymlog:()=>Ua,scaleThreshold:()=>ol,scaleTime:()=>xc,scaleUtc:()=>wc,tickFormat:()=>ka});var o=n(7294);function i(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=i(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const a=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=i(e))&&(r&&(r+=" "),r+=t);return r};var l=n(7361),u=n.n(l),c=n(4293),s=n.n(c),f=n(7037),p=n.n(f),d=n(3560),h=n.n(d),y=n(3218),v=n.n(y),m=n(9864),g=n(7654),b=n.n(g),x=n(1763),w=n.n(x),O=function(e){return 0===e?0:e>0?1:-1},S=function(e){return p()(e)&&e.indexOf("%")===e.length-1},A=function(e){return w()(e)&&!b()(e)},k=function(e){return A(e)||p()(e)},E=0,j=function(e){var t=++E;return"".concat(e||"").concat(t)},P=function(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!A(e)&&!p()(e))return r;if(S(e)){var i=e.indexOf("%");n=t*parseFloat(e.slice(0,i))/100}else n=+e;return b()(n)&&(n=r),o&&n>t&&(n=t),n},C=function(e){if(!e)return null;var t=Object.keys(e);return t&&t.length?e[t[0]]:null},_=function(e,t){return A(e)&&A(t)?function(n){return e+n*(t-e)}:function(){return t}};function T(e,t,n){return e&&e.length?e.find((function(e){return e&&("function"==typeof t?t(e):u()(e,t))===n})):null}function M(e,t){for(var n in e)if({}.hasOwnProperty.call(e,n)&&(!{}.hasOwnProperty.call(t,n)||e[n]!==t[n]))return!1;for(var r in t)if({}.hasOwnProperty.call(t,r)&&!{}.hasOwnProperty.call(e,r))return!1;return!0}function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}var I=["aria-activedescendant","aria-atomic","aria-autocomplete","aria-busy","aria-checked","aria-colcount","aria-colindex","aria-colspan","aria-controls","aria-current","aria-describedby","aria-details","aria-disabled","aria-errormessage","aria-expanded","aria-flowto","aria-haspopup","aria-hidden","aria-invalid","aria-keyshortcuts","aria-label","aria-labelledby","aria-level","aria-live","aria-modal","aria-multiline","aria-multiselectable","aria-orientation","aria-owns","aria-placeholder","aria-posinset","aria-pressed","aria-readonly","aria-relevant","aria-required","aria-roledescription","aria-rowcount","aria-rowindex","aria-rowspan","aria-selected","aria-setsize","aria-sort","aria-valuemax","aria-valuemin","aria-valuenow","aria-valuetext","className","color","height","id","lang","max","media","method","min","name","style","target","width","role","tabIndex","accentHeight","accumulate","additive","alignmentBaseline","allowReorder","alphabetic","amplitude","arabicForm","ascent","attributeName","attributeType","autoReverse","azimuth","baseFrequency","baselineShift","baseProfile","bbox","begin","bias","by","calcMode","capHeight","clip","clipPath","clipPathUnits","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","contentScriptType","contentStyleType","cursor","cx","cy","d","decelerate","descent","diffuseConstant","direction","display","divisor","dominantBaseline","dur","dx","dy","edgeMode","elevation","enableBackground","end","exponent","externalResourcesRequired","fill","fillOpacity","fillRule","filter","filterRes","filterUnits","floodColor","floodOpacity","focusable","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","format","from","fx","fy","g1","g2","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","glyphRef","gradientTransform","gradientUnits","hanging","horizAdvX","horizOriginX","href","ideographic","imageRendering","in2","in","intercept","k1","k2","k3","k4","k","kernelMatrix","kernelUnitLength","kerning","keyPoints","keySplines","keyTimes","lengthAdjust","letterSpacing","lightingColor","limitingConeAngle","local","markerEnd","markerHeight","markerMid","markerStart","markerUnits","markerWidth","mask","maskContentUnits","maskUnits","mathematical","mode","numOctaves","offset","opacity","operator","order","orient","orientation","origin","overflow","overlinePosition","overlineThickness","paintOrder","panose1","pathLength","patternContentUnits","patternTransform","patternUnits","pointerEvents","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","r","radius","refX","refY","renderingIntent","repeatCount","repeatDur","requiredExtensions","requiredFeatures","restart","result","rotate","rx","ry","seed","shapeRendering","slope","spacing","specularConstant","specularExponent","speed","spreadMethod","startOffset","stdDeviation","stemh","stemv","stitchTiles","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","string","stroke","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","strokeMiterlimit","strokeOpacity","strokeWidth","surfaceScale","systemLanguage","tableValues","targetX","targetY","textAnchor","textDecoration","textLength","textRendering","to","transform","u1","u2","underlinePosition","underlineThickness","unicode","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","values","vectorEffect","version","vertAdvY","vertOriginX","vertOriginY","vHanging","vIdeographic","viewTarget","visibility","vMathematical","widths","wordSpacing","writingMode","x1","x2","x","xChannelSelector","xHeight","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlns","xmlnsXlink","xmlSpace","y1","y2","y","yChannelSelector","z","zoomAndPan","ref","key","angle"],D=["points","pathLength"],R={svg:["viewBox","children"],polygon:D,polyline:D},L=["dangerouslySetInnerHTML","onCopy","onCopyCapture","onCut","onCutCapture","onPaste","onPasteCapture","onCompositionEnd","onCompositionEndCapture","onCompositionStart","onCompositionStartCapture","onCompositionUpdate","onCompositionUpdateCapture","onFocus","onFocusCapture","onBlur","onBlurCapture","onChange","onChangeCapture","onBeforeInput","onBeforeInputCapture","onInput","onInputCapture","onReset","onResetCapture","onSubmit","onSubmitCapture","onInvalid","onInvalidCapture","onLoad","onLoadCapture","onError","onErrorCapture","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture","onAbort","onAbortCapture","onCanPlay","onCanPlayCapture","onCanPlayThrough","onCanPlayThroughCapture","onDurationChange","onDurationChangeCapture","onEmptied","onEmptiedCapture","onEncrypted","onEncryptedCapture","onEnded","onEndedCapture","onLoadedData","onLoadedDataCapture","onLoadedMetadata","onLoadedMetadataCapture","onLoadStart","onLoadStartCapture","onPause","onPauseCapture","onPlay","onPlayCapture","onPlaying","onPlayingCapture","onProgress","onProgressCapture","onRateChange","onRateChangeCapture","onSeeked","onSeekedCapture","onSeeking","onSeekingCapture","onStalled","onStalledCapture","onSuspend","onSuspendCapture","onTimeUpdate","onTimeUpdateCapture","onVolumeChange","onVolumeChangeCapture","onWaiting","onWaitingCapture","onAuxClick","onAuxClickCapture","onClick","onClickCapture","onContextMenu","onContextMenuCapture","onDoubleClick","onDoubleClickCapture","onDrag","onDragCapture","onDragEnd","onDragEndCapture","onDragEnter","onDragEnterCapture","onDragExit","onDragExitCapture","onDragLeave","onDragLeaveCapture","onDragOver","onDragOverCapture","onDragStart","onDragStartCapture","onDrop","onDropCapture","onMouseDown","onMouseDownCapture","onMouseEnter","onMouseLeave","onMouseMove","onMouseMoveCapture","onMouseOut","onMouseOutCapture","onMouseOver","onMouseOverCapture","onMouseUp","onMouseUpCapture","onSelect","onSelectCapture","onTouchCancel","onTouchCancelCapture","onTouchEnd","onTouchEndCapture","onTouchMove","onTouchMoveCapture","onTouchStart","onTouchStartCapture","onPointerDown","onPointerDownCapture","onPointerMove","onPointerMoveCapture","onPointerUp","onPointerUpCapture","onPointerCancel","onPointerCancelCapture","onPointerEnter","onPointerEnterCapture","onPointerLeave","onPointerLeaveCapture","onPointerOver","onPointerOverCapture","onPointerOut","onPointerOutCapture","onGotPointerCapture","onGotPointerCaptureCapture","onLostPointerCapture","onLostPointerCaptureCapture","onScroll","onScrollCapture","onWheel","onWheelCapture","onAnimationStart","onAnimationStartCapture","onAnimationEnd","onAnimationEndCapture","onAnimationIteration","onAnimationIterationCapture","onTransitionEnd","onTransitionEndCapture"],B=function(e,t){if(!e||"function"==typeof e||"boolean"==typeof e)return null;var n=e;if((0,o.isValidElement)(e)&&(n=e.props),!v()(n))return null;var r={};return Object.keys(n).forEach((function(e){L.includes(e)&&(r[e]=t||function(t){return n[e](n,t)})})),r},z=function(e,t,n){if(!v()(e)||"object"!==N(e))return null;var r=null;return Object.keys(e).forEach((function(o){var i=e[o];L.includes(o)&&"function"==typeof i&&(r||(r={}),r[o]=function(e,t,n){return function(r){return e(t,n,r),null}}(i,t,n))})),r},F=["children"],U=["children"];function W(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}var V={click:"onClick",mousedown:"onMouseDown",mouseup:"onMouseUp",mouseover:"onMouseOver",mousemove:"onMouseMove",mouseout:"onMouseOut",mouseenter:"onMouseEnter",mouseleave:"onMouseLeave",touchcancel:"onTouchCancel",touchend:"onTouchEnd",touchmove:"onTouchMove",touchstart:"onTouchStart"},H=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":""},q=null,K=null,X=function e(t){if(t===q&&Array.isArray(K))return K;var n=[];return o.Children.forEach(t,(function(t){s()(t)||((0,m.isFragment)(t)?n=n.concat(e(t.props.children)):n.push(t))})),K=n,q=t,n};function G(e,t){var n=[],r=[];return r=Array.isArray(t)?t.map((function(e){return H(e)})):[H(t)],X(e).forEach((function(e){var t=u()(e,"type.displayName")||u()(e,"type.name");-1!==r.indexOf(t)&&n.push(e)})),n}function Y(e,t){var n=G(e,t);return n&&n[0]}var Q=function(e){if(!e||!e.props)return!1;var t=e.props,n=t.width,r=t.height;return!(!A(n)||n<=0||!A(r)||r<=0)},Z=["a","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColormatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-url","foreignObject","g","glyph","glyphRef","hkern","image","line","lineGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","stop","style","svg","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"],J=function(e){return e&&e.type&&p()(e.type)&&Z.indexOf(e.type)>=0},ee=function(e){return e&&"object"===$(e)&&"cx"in e&&"cy"in e&&"r"in e},te=function(e){var t=[];return X(e).forEach((function(e){J(e)&&t.push(e)})),t},ne=function(e,t,n){if(!e||"function"==typeof e||"boolean"==typeof e)return null;var r=e;if((0,o.isValidElement)(e)&&(r=e.props),!v()(r))return null;var i={};return Object.keys(r).forEach((function(e){var o;(function(e,t,n,r){var o,i=null!==(o=null==R?void 0:R[r])&&void 0!==o?o:[];return!h()(e)&&(r&&i.includes(t)||I.includes(t))||n&&L.includes(t)})(null===(o=r)||void 0===o?void 0:o[e],e,t,n)&&(i[e]=r[e])})),i},re=function e(t,n){if(t===n)return!0;var r=o.Children.count(t);if(r!==o.Children.count(n))return!1;if(0===r)return!0;if(1===r)return oe(Array.isArray(t)?t[0]:t,Array.isArray(n)?n[0]:n);for(var i=0;i<r;i++){var a=t[i],l=n[i];if(Array.isArray(a)||Array.isArray(l)){if(!e(a,l))return!1}else if(!oe(a,l))return!1}return!0},oe=function(e,t){if(s()(e)&&s()(t))return!0;if(!s()(e)&&!s()(t)){var n=e.props||{},r=n.children,o=W(n,F),i=t.props||{},a=i.children,l=W(i,U);return r&&a?M(o,l)&&re(r,a):!r&&!a&&M(o,l)}return!1},ie=function(e,t){var n=[],r={};return X(e).forEach((function(e,o){if(J(e))n.push(e);else if(e){var i=H(e.type),a=t[i]||{},l=a.handler,u=a.once;if(l&&(!u||!r[i])){var c=l(e,i,o);n.push(c),r[i]=!0}}})),n},ae=["children","width","height","viewBox","className","style","title","desc"];function le(){return le=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},le.apply(this,arguments)}function ue(e){var t=e.children,n=e.width,r=e.height,i=e.viewBox,l=e.className,u=e.style,c=e.title,s=e.desc,f=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,ae),p=i||{width:n,height:r,x:0,y:0},d=a("recharts-surface",l);return o.createElement("svg",le({},ne(f,!0,"svg"),{className:d,width:n,height:r,style:u,viewBox:"".concat(p.x," ").concat(p.y," ").concat(p.width," ").concat(p.height)}),o.createElement("title",null,c),o.createElement("desc",null,s),t)}var ce=["children","className"];function se(){return se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},se.apply(this,arguments)}var fe=o.forwardRef((function(e,t){var n=e.children,r=e.className,i=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,ce),l=a("recharts-layer",r);return o.createElement("g",se({className:l},ne(i,!0),{ref:t}),n)})),pe=function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o]},de=n(1700),he=n.n(de);Math.abs,Math.atan2;const ye=Math.cos,ve=(Math.max,Math.min,Math.sin),me=Math.sqrt,ge=Math.PI,be=2*ge,xe={draw(e,t){const n=me(t/ge);e.moveTo(n,0),e.arc(0,0,n,0,be)}},we={draw(e,t){const n=me(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},Oe=me(1/3),Se=2*Oe,Ae={draw(e,t){const n=me(t/Se),r=n*Oe;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},ke={draw(e,t){const n=me(t),r=-n/2;e.rect(r,r,n,n)}},Ee=ve(ge/10)/ve(7*ge/10),je=ve(be/10)*Ee,Pe=-ye(be/10)*Ee,Ce={draw(e,t){const n=me(.8908130915292852*t),r=je*n,o=Pe*n;e.moveTo(0,-n),e.lineTo(r,o);for(let t=1;t<5;++t){const i=be*t/5,a=ye(i),l=ve(i);e.lineTo(l*n,-a*n),e.lineTo(a*r-l*o,l*r+a*o)}e.closePath()}},_e=me(3),Te={draw(e,t){const n=-me(t/(3*_e));e.moveTo(0,2*n),e.lineTo(-_e*n,-n),e.lineTo(_e*n,-n),e.closePath()}},Me=-.5,Ne=me(3)/2,Ie=1/me(12),De=3*(Ie/2+1),Re={draw(e,t){const n=me(t/De),r=n/2,o=n*Ie,i=r,a=n*Ie+n,l=-i,u=a;e.moveTo(r,o),e.lineTo(i,a),e.lineTo(l,u),e.lineTo(Me*r-Ne*o,Ne*r+Me*o),e.lineTo(Me*i-Ne*a,Ne*i+Me*a),e.lineTo(Me*l-Ne*u,Ne*l+Me*u),e.lineTo(Me*r+Ne*o,Me*o-Ne*r),e.lineTo(Me*i+Ne*a,Me*a-Ne*i),e.lineTo(Me*l+Ne*u,Me*u-Ne*l),e.closePath()}};function Le(e){return function(){return e}}const Be=Math.PI,ze=2*Be,Fe=1e-6,Ue=ze-Fe;function We(e){this._+=e[0];for(let t=1,n=e.length;t<n;++t)this._+=arguments[t]+e[t]}class $e{constructor(e){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==e?We:function(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return We;const n=10**t;return function(e){this._+=e[0];for(let t=1,r=e.length;t<r;++t)this._+=Math.round(arguments[t]*n)/n+e[t]}}(e)}moveTo(e,t){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(e,t){this._append`L${this._x1=+e},${this._y1=+t}`}quadraticCurveTo(e,t,n,r){this._append`Q${+e},${+t},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(e,t,n,r,o,i){this._append`C${+e},${+t},${+n},${+r},${this._x1=+o},${this._y1=+i}`}arcTo(e,t,n,r,o){if(e=+e,t=+t,n=+n,r=+r,(o=+o)<0)throw new Error(`negative radius: ${o}`);let i=this._x1,a=this._y1,l=n-e,u=r-t,c=i-e,s=a-t,f=c*c+s*s;if(null===this._x1)this._append`M${this._x1=e},${this._y1=t}`;else if(f>Fe)if(Math.abs(s*l-u*c)>Fe&&o){let p=n-i,d=r-a,h=l*l+u*u,y=p*p+d*d,v=Math.sqrt(h),m=Math.sqrt(f),g=o*Math.tan((Be-Math.acos((h+f-y)/(2*v*m)))/2),b=g/m,x=g/v;Math.abs(b-1)>Fe&&this._append`L${e+b*c},${t+b*s}`,this._append`A${o},${o},0,0,${+(s*p>c*d)},${this._x1=e+x*l},${this._y1=t+x*u}`}else this._append`L${this._x1=e},${this._y1=t}`}arc(e,t,n,r,o,i){if(e=+e,t=+t,i=!!i,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=n*Math.cos(r),l=n*Math.sin(r),u=e+a,c=t+l,s=1^i,f=i?r-o:o-r;null===this._x1?this._append`M${u},${c}`:(Math.abs(this._x1-u)>Fe||Math.abs(this._y1-c)>Fe)&&this._append`L${u},${c}`,n&&(f<0&&(f=f%ze+ze),f>Ue?this._append`A${n},${n},0,1,${s},${e-a},${t-l}A${n},${n},0,1,${s},${this._x1=u},${this._y1=c}`:f>Fe&&this._append`A${n},${n},0,${+(f>=Be)},${s},${this._x1=e+n*Math.cos(o)},${this._y1=t+n*Math.sin(o)}`)}rect(e,t,n,r){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function Ve(e){let t=3;return e.digits=function(n){if(!arguments.length)return t;if(null==n)t=null;else{const e=Math.floor(n);if(!(e>=0))throw new RangeError(`invalid digits: ${n}`);t=e}return e},()=>new $e(t)}function He(e){return He="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},He(e)}$e.prototype,me(3),me(3);var qe=["type","size","sizeType"];function Ke(){return Ke=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ke.apply(this,arguments)}function Xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ge(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xe(Object(n),!0).forEach((function(t){Ye(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==He(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==He(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===He(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Qe={symbolCircle:xe,symbolCross:we,symbolDiamond:Ae,symbolSquare:ke,symbolStar:Ce,symbolTriangle:Te,symbolWye:Re},Ze=Math.PI/180,Je=function(e){var t,n,r=e.type,i=void 0===r?"circle":r,l=e.size,u=void 0===l?64:l,c=e.sizeType,s=void 0===c?"area":c,f=Ge(Ge({},function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,qe)),{},{type:i,size:u,sizeType:s}),p=f.className,d=f.cx,h=f.cy,y=ne(f,!0);return d===+d&&h===+h&&u===+u?o.createElement("path",Ke({},y,{className:a("recharts-symbols",p),transform:"translate(".concat(d,", ").concat(h,")"),d:(t=function(e){var t="symbol".concat(he()(e));return Qe[t]||xe}(i),n=function(e,t){let n=null,r=Ve(o);function o(){let o;if(n||(n=o=r()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),o)return n=null,o+""||null}return e="function"==typeof e?e:Le(e||xe),t="function"==typeof t?t:Le(void 0===t?64:+t),o.type=function(t){return arguments.length?(e="function"==typeof t?t:Le(t),o):e},o.size=function(e){return arguments.length?(t="function"==typeof e?e:Le(+e),o):t},o.context=function(e){return arguments.length?(n=null==e?null:e,o):n},o}().type(t).size(function(e,t,n){if("area"===t)return e;switch(n){case"cross":return 5*e*e/9;case"diamond":return.5*e*e/Math.sqrt(3);case"square":return e*e;case"star":var r=18*Ze;return 1.25*e*e*(Math.tan(r)-Math.tan(2*r)*Math.pow(Math.tan(r),2));case"triangle":return Math.sqrt(3)*e*e/4;case"wye":return(21-10*Math.sqrt(3))*e*e/8;default:return Math.PI*e*e/4}}(u,s,i)),n())})):null};function et(e){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},et(e)}function tt(){return tt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},tt.apply(this,arguments)}function nt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function rt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,lt(r.key),r)}}function ot(e,t){return ot=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ot(e,t)}function it(e){return it=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},it(e)}function at(e,t,n){return(t=lt(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lt(e){var t=function(e,t){if("object"!==et(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==et(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===et(t)?t:String(t)}Je.registerSymbol=function(e,t){Qe["symbol".concat(he()(e))]=t};var ut=32,ct=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ot(e,t)}(u,e);var t,n,r,i,l=(r=u,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=it(r);if(i){var n=it(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===et(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),l.apply(this,arguments)}return t=u,n=[{key:"renderIcon",value:function(e){var t=this.props.inactiveColor,n=16,r=ut/6,i=ut/3,a=e.inactive?t:e.color;if("plainline"===e.type)return o.createElement("line",{strokeWidth:4,fill:"none",stroke:a,strokeDasharray:e.payload.strokeDasharray,x1:0,y1:n,x2:ut,y2:n,className:"recharts-legend-icon"});if("line"===e.type)return o.createElement("path",{strokeWidth:4,fill:"none",stroke:a,d:"M0,".concat(n,"h").concat(i,"\n            A").concat(r,",").concat(r,",0,1,1,").concat(2*i,",").concat(n,"\n            H").concat(ut,"M").concat(2*i,",").concat(n,"\n            A").concat(r,",").concat(r,",0,1,1,").concat(i,",").concat(n),className:"recharts-legend-icon"});if("rect"===e.type)return o.createElement("path",{stroke:"none",fill:a,d:"M0,".concat(4,"h").concat(ut,"v").concat(24,"h").concat(-32,"z"),className:"recharts-legend-icon"});if(o.isValidElement(e.legendIcon)){var l=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?nt(Object(n),!0).forEach((function(t){at(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):nt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);return delete l.legendIcon,o.cloneElement(e.legendIcon,l)}return o.createElement(Je,{fill:a,cx:n,cy:n,size:ut,sizeType:"diameter",type:e.type})}},{key:"renderItems",value:function(){var e=this,t=this.props,n=t.payload,r=t.iconSize,i=t.layout,l=t.formatter,u=t.inactiveColor,c={x:0,y:0,width:ut,height:ut},s={display:"horizontal"===i?"inline-block":"block",marginRight:10},f={display:"inline-block",verticalAlign:"middle",marginRight:4};return n.map((function(t,n){var i,p=t.formatter||l,d=a((at(i={"recharts-legend-item":!0},"legend-item-".concat(n),!0),at(i,"inactive",t.inactive),i));if("none"===t.type)return null;var y=h()(t.value)?null:t.value;pe(!h()(t.value),'The name property is also required when using a function for the dataKey of a chart\'s cartesian components. Ex: <Bar name="Name of my Data"/>');var v=t.inactive?u:t.color;return o.createElement("li",tt({className:d,style:s,key:"legend-item-".concat(n)},z(e.props,t,n)),o.createElement(ue,{width:r,height:r,viewBox:c,style:f},e.renderIcon(t)),o.createElement("span",{className:"recharts-legend-item-text",style:{color:v}},p?p(y,t,n):y))}))}},{key:"render",value:function(){var e=this.props,t=e.payload,n=e.layout,r=e.align;if(!t||!t.length)return null;var i={padding:0,margin:0,textAlign:"horizontal"===n?r:"left"};return o.createElement("ul",{className:"recharts-default-legend",style:i},this.renderItems())}}],n&&rt(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(o.PureComponent);at(ct,"displayName","Legend"),at(ct,"defaultProps",{iconSize:14,layout:"horizontal",align:"center",verticalAlign:"middle",inactiveColor:"#ccc"});var st=n(5578),ft=n.n(st);function pt(e,t,n){return!0===t?ft()(e,n):h()(t)?ft()(e,t):e}function dt(e){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dt(e)}var ht=["ref"];function yt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yt(Object(n),!0).forEach((function(t){wt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function mt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ot(r.key),r)}}function gt(e,t){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gt(e,t)}function bt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xt(e){return xt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},xt(e)}function wt(e,t,n){return(t=Ot(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ot(e){var t=function(e,t){if("object"!==dt(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==dt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dt(t)?t:String(t)}function St(e){return e.value}var At=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&gt(e,t)}(u,e);var t,n,r,i,a,l=(i=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=xt(i);if(a){var n=xt(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===dt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return bt(e)}(this,e)});function u(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return wt(bt(e=l.call.apply(l,[this].concat(n))),"lastBoundingBox",{width:-1,height:-1}),e}return t=u,r=[{key:"getWithHeight",value:function(e,t){var n=e.props.layout;return"vertical"===n&&A(e.props.height)?{height:e.props.height}:"horizontal"===n?{width:e.props.width||t}:null}}],(n=[{key:"componentDidMount",value:function(){this.updateBBox()}},{key:"componentDidUpdate",value:function(){this.updateBBox()}},{key:"getBBox",value:function(){return this.wrapperNode&&this.wrapperNode.getBoundingClientRect?this.wrapperNode.getBoundingClientRect():null}},{key:"updateBBox",value:function(){var e=this.props.onBBoxUpdate;if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var t=this.wrapperNode.getBoundingClientRect();(Math.abs(t.width-this.lastBoundingBox.width)>1||Math.abs(t.height-this.lastBoundingBox.height)>1)&&(this.lastBoundingBox.width=t.width,this.lastBoundingBox.height=t.height,e&&e(t))}else-1===this.lastBoundingBox.width&&-1===this.lastBoundingBox.height||(this.lastBoundingBox.width=-1,this.lastBoundingBox.height=-1,e&&e(null))}},{key:"getBBoxSnapshot",value:function(){return this.lastBoundingBox.width>=0&&this.lastBoundingBox.height>=0?vt({},this.lastBoundingBox):{width:0,height:0}}},{key:"getDefaultPosition",value:function(e){var t,n,r=this.props,o=r.layout,i=r.align,a=r.verticalAlign,l=r.margin,u=r.chartWidth,c=r.chartHeight;return e&&(void 0!==e.left&&null!==e.left||void 0!==e.right&&null!==e.right)||(t="center"===i&&"vertical"===o?{left:((u||0)-this.getBBoxSnapshot().width)/2}:"right"===i?{right:l&&l.right||0}:{left:l&&l.left||0}),e&&(void 0!==e.top&&null!==e.top||void 0!==e.bottom&&null!==e.bottom)||(n="middle"===a?{top:((c||0)-this.getBBoxSnapshot().height)/2}:"bottom"===a?{bottom:l&&l.bottom||0}:{top:l&&l.top||0}),vt(vt({},t),n)}},{key:"render",value:function(){var e=this,t=this.props,n=t.content,r=t.width,i=t.height,a=t.wrapperStyle,l=t.payloadUniqBy,u=t.payload,c=vt(vt({position:"absolute",width:r||"auto",height:i||"auto"},this.getDefaultPosition(a)),a);return o.createElement("div",{className:"recharts-legend-wrapper",style:c,ref:function(t){e.wrapperNode=t}},function(e,t){if(o.isValidElement(e))return o.cloneElement(e,t);if("function"==typeof e)return o.createElement(e,t);t.ref;var n=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,ht);return o.createElement(ct,n)}(n,vt(vt({},this.props),{},{payload:pt(u,l,St)})))}}])&&mt(t.prototype,n),r&&mt(t,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(o.PureComponent);wt(At,"displayName","Legend"),wt(At,"defaultProps",{iconSize:14,layout:"horizontal",align:"center",verticalAlign:"bottom"});var kt=n(9734),Et=n.n(kt);function jt(e){return jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jt(e)}function Pt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _t(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ct(Object(n),!0).forEach((function(t){Tt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Tt(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==jt(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==jt(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===jt(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Mt(e){return Array.isArray(e)&&k(e[0])&&k(e[1])?e.join(" ~ "):e}var Nt=function(e){var t=e.separator,n=void 0===t?" : ":t,r=e.contentStyle,i=void 0===r?{}:r,l=e.itemStyle,u=void 0===l?{}:l,c=e.labelStyle,f=void 0===c?{}:c,p=e.payload,d=e.formatter,h=e.itemSorter,y=e.wrapperClassName,v=e.labelClassName,m=e.label,g=e.labelFormatter,b=_t({margin:0,padding:10,backgroundColor:"#fff",border:"1px solid #ccc",whiteSpace:"nowrap"},i),x=_t({margin:0},f),w=!s()(m),O=w?m:"",S=a("recharts-default-tooltip",y),A=a("recharts-tooltip-label",v);return w&&g&&null!=p&&(O=g(m,p)),o.createElement("div",{className:S,style:b},o.createElement("p",{className:A,style:x},o.isValidElement(O)?O:"".concat(O)),function(){if(p&&p.length){var e=(h?Et()(p,h):p).map((function(e,t){if("none"===e.type)return null;var r=_t({display:"block",paddingTop:4,paddingBottom:4,color:e.color||"#000"},u),i=e.formatter||d||Mt,a=e.value,l=e.name,c=a,s=l;if(i&&null!=c&&null!=s){var f=i(a,l,e,t,p);if(Array.isArray(f)){var h=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Pt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Pt(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(f,2);c=h[0],s=h[1]}else c=f}return o.createElement("li",{className:"recharts-tooltip-item",key:"tooltip-item-".concat(t),style:r},k(s)?o.createElement("span",{className:"recharts-tooltip-item-name"},s):null,k(s)?o.createElement("span",{className:"recharts-tooltip-item-separator"},n):null,o.createElement("span",{className:"recharts-tooltip-item-value"},c),o.createElement("span",{className:"recharts-tooltip-item-unit"},e.unit||""))}));return o.createElement("ul",{className:"recharts-tooltip-item-list",style:{padding:0,margin:0}},e)}return null}())},It=n(5697),Dt=n.n(It),Rt=Object.getOwnPropertyNames,Lt=Object.getOwnPropertySymbols,Bt=Object.prototype.hasOwnProperty;function zt(e,t){return function(n,r,o){return e(n,r,o)&&t(n,r,o)}}function Ft(e){return function(t,n,r){if(!t||!n||"object"!=typeof t||"object"!=typeof n)return e(t,n,r);var o=r.cache,i=o.get(t),a=o.get(n);if(i&&a)return i===n&&a===t;o.set(t,n),o.set(n,t);var l=e(t,n,r);return o.delete(t),o.delete(n),l}}function Ut(e){return Rt(e).concat(Lt(e))}var Wt=Object.hasOwn||function(e,t){return Bt.call(e,t)};function $t(e,t){return e||t?e===t:e===t||e!=e&&t!=t}var Vt="_owner",Ht=Object.getOwnPropertyDescriptor,qt=Object.keys;function Kt(e,t,n){var r=e.length;if(t.length!==r)return!1;for(;r-- >0;)if(!n.equals(e[r],t[r],r,r,e,t,n))return!1;return!0}function Xt(e,t){return $t(e.getTime(),t.getTime())}function Gt(e,t,n){if(e.size!==t.size)return!1;for(var r,o,i={},a=e.entries(),l=0;(r=a.next())&&!r.done;){for(var u=t.entries(),c=!1,s=0;(o=u.next())&&!o.done;){var f=r.value,p=f[0],d=f[1],h=o.value,y=h[0],v=h[1];c||i[s]||!(c=n.equals(p,y,l,s,e,t,n)&&n.equals(d,v,p,y,e,t,n))||(i[s]=!0),s++}if(!c)return!1;l++}return!0}function Yt(e,t,n){var r,o=qt(e),i=o.length;if(qt(t).length!==i)return!1;for(;i-- >0;){if((r=o[i])===Vt&&(e.$$typeof||t.$$typeof)&&e.$$typeof!==t.$$typeof)return!1;if(!Wt(t,r)||!n.equals(e[r],t[r],r,r,e,t,n))return!1}return!0}function Qt(e,t,n){var r,o,i,a=Ut(e),l=a.length;if(Ut(t).length!==l)return!1;for(;l-- >0;){if((r=a[l])===Vt&&(e.$$typeof||t.$$typeof)&&e.$$typeof!==t.$$typeof)return!1;if(!Wt(t,r))return!1;if(!n.equals(e[r],t[r],r,r,e,t,n))return!1;if(o=Ht(e,r),i=Ht(t,r),(o||i)&&(!o||!i||o.configurable!==i.configurable||o.enumerable!==i.enumerable||o.writable!==i.writable))return!1}return!0}function Zt(e,t){return $t(e.valueOf(),t.valueOf())}function Jt(e,t){return e.source===t.source&&e.flags===t.flags}function en(e,t,n){if(e.size!==t.size)return!1;for(var r,o,i={},a=e.values();(r=a.next())&&!r.done;){for(var l=t.values(),u=!1,c=0;(o=l.next())&&!o.done;)u||i[c]||!(u=n.equals(r.value,o.value,r.value,o.value,e,t,n))||(i[c]=!0),c++;if(!u)return!1}return!0}function tn(e,t){var n=e.length;if(t.length!==n)return!1;for(;n-- >0;)if(e[n]!==t[n])return!1;return!0}var nn=Array.isArray,rn="function"==typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView:null,on=Object.assign,an=Object.prototype.toString.call.bind(Object.prototype.toString),ln=un();function un(e){void 0===e&&(e={});var t,n=e.circular,r=void 0!==n&&n,o=e.createInternalComparator,i=e.createState,a=e.strict,l=void 0!==a&&a,u=function(e){var t=e.circular,n=e.createCustomConfig,r=e.strict,o={areArraysEqual:r?Qt:Kt,areDatesEqual:Xt,areMapsEqual:r?zt(Gt,Qt):Gt,areObjectsEqual:r?Qt:Yt,arePrimitiveWrappersEqual:Zt,areRegExpsEqual:Jt,areSetsEqual:r?zt(en,Qt):en,areTypedArraysEqual:r?Qt:tn};if(n&&(o=on({},o,n(o))),t){var i=Ft(o.areArraysEqual),a=Ft(o.areMapsEqual),l=Ft(o.areObjectsEqual),u=Ft(o.areSetsEqual);o=on({},o,{areArraysEqual:i,areMapsEqual:a,areObjectsEqual:l,areSetsEqual:u})}return o}(e),c=function(e){var t=e.areArraysEqual,n=e.areDatesEqual,r=e.areMapsEqual,o=e.areObjectsEqual,i=e.arePrimitiveWrappersEqual,a=e.areRegExpsEqual,l=e.areSetsEqual,u=e.areTypedArraysEqual;return function(e,c,s){if(e===c)return!0;if(null==e||null==c||"object"!=typeof e||"object"!=typeof c)return e!=e&&c!=c;var f=e.constructor;if(f!==c.constructor)return!1;if(f===Object)return o(e,c,s);if(nn(e))return t(e,c,s);if(null!=rn&&rn(e))return u(e,c,s);if(f===Date)return n(e,c,s);if(f===RegExp)return a(e,c,s);if(f===Map)return r(e,c,s);if(f===Set)return l(e,c,s);var p=an(e);return"[object Date]"===p?n(e,c,s):"[object RegExp]"===p?a(e,c,s):"[object Map]"===p?r(e,c,s):"[object Set]"===p?l(e,c,s):"[object Object]"===p?"function"!=typeof e.then&&"function"!=typeof c.then&&o(e,c,s):"[object Arguments]"===p?o(e,c,s):("[object Boolean]"===p||"[object Number]"===p||"[object String]"===p)&&i(e,c,s)}}(u),s=o?o(c):(t=c,function(e,n,r,o,i,a,l){return t(e,n,l)});return function(e){var t=e.circular,n=e.comparator,r=e.createState,o=e.equals,i=e.strict;if(r)return function(e,a){var l=r(),u=l.cache,c=void 0===u?t?new WeakMap:void 0:u,s=l.meta;return n(e,a,{cache:c,equals:o,meta:s,strict:i})};if(t)return function(e,t){return n(e,t,{cache:new WeakMap,equals:o,meta:void 0,strict:i})};var a={cache:void 0,equals:o,meta:void 0,strict:i};return function(e,t){return n(e,t,a)}}({circular:r,comparator:c,createState:i,equals:s,strict:l})}function cn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=-1;requestAnimationFrame((function r(o){n<0&&(n=o),o-n>t?(e(o),n=-1):function(e){"undefined"!=typeof requestAnimationFrame&&requestAnimationFrame(e)}(r)}))}function sn(e){return sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},sn(e)}function fn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pn(){var e=function(){return null},t=!1,n=function n(r){if(!t){if(Array.isArray(r)){if(!r.length)return;var o=function(e){if(Array.isArray(e))return e}(l=r)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(l)||function(e,t){if(e){if("string"==typeof e)return fn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fn(e,t):void 0}}(l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),i=o[0],a=o.slice(1);return"number"==typeof i?void cn(n.bind(null,a),i):(n(i),void cn(n.bind(null,a)))}"object"===sn(r)&&e(r),"function"==typeof r&&r()}var l};return{stop:function(){t=!0},start:function(e){t=!1,n(e)},subscribe:function(t){return e=t,function(){e=function(){return null}}}}}function dn(e){return dn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dn(e)}function hn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hn(Object(n),!0).forEach((function(t){vn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function vn(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==dn(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==dn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===dn(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}un({strict:!0}),un({circular:!0}),un({circular:!0,strict:!0}),un({createInternalComparator:function(){return $t}}),un({strict:!0,createInternalComparator:function(){return $t}}),un({circular:!0,createInternalComparator:function(){return $t}}),un({circular:!0,createInternalComparator:function(){return $t},strict:!0});var mn=["Webkit","Moz","O","ms"],gn=["-webkit-","-moz-","-o-","-ms-"],bn=["transform","transformOrigin","transition"],xn=function(e){return e},wn=function(e,t){return Object.keys(t).reduce((function(n,r){return yn(yn({},n),{},vn({},r,e(r,t[r])))}),{})},On=function(e){return Object.keys(e).reduce((function(e,t){return yn(yn({},e),function(e,t){if(-1===bn.indexOf(e))return vn({},e,Number.isNaN(t)?0:t);var n="transition"===e,r=e.replace(/(\w)/,(function(e){return e.toUpperCase()})),o=t;return mn.reduce((function(e,i,a){return n&&(o=t.replace(/(transform|transform-origin)/gim,"".concat(gn[a],"$1"))),yn(yn({},e),{},vn({},i+r,o))}),{})}(t,e[t]))}),e)},Sn=function(e,t,n){return e.map((function(e){return"".concat((r=e,r.replace(/([A-Z])/g,(function(e){return"-".concat(e.toLowerCase())})))," ").concat(t,"ms ").concat(n);var r})).join(",")};function An(e,t){if(e){if("string"==typeof e)return kn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?kn(e,t):void 0}}function kn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var En=1e-4,jn=function(e,t){return[0,3*e,3*t-6*e,3*e-3*t+1]},Pn=function(e,t){return e.map((function(e,n){return e*Math.pow(t,n)})).reduce((function(e,t){return e+t}))},Cn=function(e,t){return function(n){var r=jn(e,t);return Pn(r,n)}},_n=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,o,i=t[0],a=t[1],l=t[2],u=t[3];if(1===t.length)switch(t[0]){case"linear":i=0,a=0,l=1,u=1;break;case"ease":i=.25,a=.1,l=.25,u=1;break;case"ease-in":i=.42,a=0,l=1,u=1;break;case"ease-out":i=.42,a=0,l=.58,u=1;break;case"ease-in-out":i=0,a=0,l=.58,u=1;break;default:var c=t[0].split("(");if("cubic-bezier"===c[0]&&4===c[1].split(")")[0].split(",").length){var s=(r=c[1].split(")")[0].split(",").map((function(e){return parseFloat(e)})),o=4,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(r,o)||An(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());i=s[0],a=s[1],l=s[2],u=s[3]}}[i,l,a,u].every((function(e){return"number"==typeof e&&e>=0&&e<=1}));var f,p,d=Cn(i,l),h=Cn(a,u),y=(f=i,p=l,function(e){var t=jn(f,p),n=[].concat(function(e){return function(e){if(Array.isArray(e))return kn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||An(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(t.map((function(e,t){return e*t})).slice(1)),[0]);return Pn(n,e)}),v=function(e){return e>1?1:e<0?0:e},m=function(e){for(var t=e>1?1:e,n=t,r=0;r<8;++r){var o=d(n)-t,i=y(n);if(Math.abs(o-t)<En||i<En)return h(n);n=v(n-o/i)}return h(n)};return m.isStepper=!1,m};function Tn(e){return Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tn(e)}function Mn(e){return function(e){if(Array.isArray(e))return Ln(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Rn(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Nn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function In(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Nn(Object(n),!0).forEach((function(t){Dn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Nn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Dn(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Tn(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Tn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tn(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rn(e,t){if(e){if("string"==typeof e)return Ln(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ln(e,t):void 0}}function Ln(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Bn=function(e,t,n){return e+(t-e)*n},zn=function(e){return e.from!==e.to},Fn=function e(t,n,r){var o=wn((function(e,n){if(zn(n)){var r=(a=t(n.from,n.to,n.velocity),l=2,function(e){if(Array.isArray(e))return e}(a)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(a,l)||Rn(a,l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];return In(In({},n),{},{from:o,velocity:i})}var a,l;return n}),n);return r<1?wn((function(e,t){return zn(t)?In(In({},t),{},{velocity:Bn(t.velocity,o[e].velocity,r),from:Bn(t.from,o[e].from,r)}):t}),n):e(t,o,r-1)};function Un(e){return Un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Un(e)}var Wn=["children","begin","duration","attributeName","easing","isActive","steps","from","to","canBegin","onAnimationEnd","shouldReAnimate","onAnimationReStart"];function $n(e){return function(e){if(Array.isArray(e))return Vn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Vn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vn(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Vn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Hn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Hn(Object(n),!0).forEach((function(t){Kn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Hn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Kn(e,t,n){return(t=Gn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Xn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Gn(r.key),r)}}function Gn(e){var t=function(e,t){if("object"!==Un(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Un(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Un(t)?t:String(t)}function Yn(e,t){return Yn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Yn(e,t)}function Qn(e,t){if(t&&("object"===Un(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Zn(e)}function Zn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Jn(e){return Jn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Jn(e)}var er=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Yn(e,t)}(l,e);var t,n,r,i,a=(r=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Jn(r);if(i){var n=Jn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Qn(this,e)});function l(e,t){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var r=(n=a.call(this,e,t)).props,o=r.isActive,i=r.attributeName,u=r.from,c=r.to,s=r.steps,f=r.children,p=r.duration;if(n.handleStyleChange=n.handleStyleChange.bind(Zn(n)),n.changeStyle=n.changeStyle.bind(Zn(n)),!o||p<=0)return n.state={style:{}},"function"==typeof f&&(n.state={style:c}),Qn(n);if(s&&s.length)n.state={style:s[0].style};else if(u){if("function"==typeof f)return n.state={style:u},Qn(n);n.state={style:i?Kn({},i,u):u}}else n.state={style:{}};return n}return t=l,(n=[{key:"componentDidMount",value:function(){var e=this.props,t=e.isActive,n=e.canBegin;this.mounted=!0,t&&n&&this.runAnimation(this.props)}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.isActive,r=t.canBegin,o=t.attributeName,i=t.shouldReAnimate,a=t.to,l=t.from,u=this.state.style;if(r)if(n){if(!(ln(e.to,a)&&e.canBegin&&e.isActive)){var c=!e.canBegin||!e.isActive;this.manager&&this.manager.stop(),this.stopJSAnimation&&this.stopJSAnimation();var s=c||i?l:e.to;if(this.state&&u){var f={style:o?Kn({},o,s):s};(o&&[o]!==s||!o&&u!==s)&&this.setState(f)}this.runAnimation(qn(qn({},this.props),{},{from:s,begin:0}))}}else{var p={style:o?Kn({},o,a):a};this.state&&u&&(o&&u[o]!==a||!o&&u!==a)&&this.setState(p)}}},{key:"componentWillUnmount",value:function(){this.mounted=!1;var e=this.props.onAnimationEnd;this.unSubscribe&&this.unSubscribe(),this.manager&&(this.manager.stop(),this.manager=null),this.stopJSAnimation&&this.stopJSAnimation(),e&&e()}},{key:"handleStyleChange",value:function(e){this.changeStyle(e)}},{key:"changeStyle",value:function(e){this.mounted&&this.setState({style:e})}},{key:"runJSAnimation",value:function(e){var t=this,n=e.from,r=e.to,o=e.duration,i=e.easing,a=e.begin,l=e.onAnimationEnd,u=e.onAnimationStart,c=function(e,t,n,r,o){var i,a,l,u,c=(i=e,a=t,[Object.keys(i),Object.keys(a)].reduce((function(e,t){return e.filter((function(e){return t.includes(e)}))}))),s=c.reduce((function(n,r){return In(In({},n),{},Dn({},r,[e[r],t[r]]))}),{}),f=c.reduce((function(n,r){return In(In({},n),{},Dn({},r,{from:e[r],velocity:0,to:t[r]}))}),{}),p=-1,d=function(){return null};return d=n.isStepper?function(r){l||(l=r);var i=(r-l)/n.dt;f=Fn(n,f,i),o(In(In(In({},e),t),wn((function(e,t){return t.from}),f))),l=r,Object.values(f).filter(zn).length&&(p=requestAnimationFrame(d))}:function(i){u||(u=i);var a=(i-u)/r,l=wn((function(e,t){return Bn.apply(void 0,Mn(t).concat([n(a)]))}),s);if(o(In(In(In({},e),t),l)),a<1)p=requestAnimationFrame(d);else{var c=wn((function(e,t){return Bn.apply(void 0,Mn(t).concat([n(1)]))}),s);o(In(In(In({},e),t),c))}},function(){return requestAnimationFrame(d),function(){cancelAnimationFrame(p)}}}(n,r,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0];if("string"==typeof r)switch(r){case"ease":case"ease-in-out":case"ease-out":case"ease-in":case"linear":return _n(r);case"spring":return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.stiff,n=void 0===t?100:t,r=e.damping,o=void 0===r?8:r,i=e.dt,a=void 0===i?17:i,l=function(e,t,r){var i=r+(-(e-t)*n-r*o)*a/1e3,l=r*a/1e3+e;return Math.abs(l-t)<En&&Math.abs(i)<En?[t,0]:[l,i]};return l.isStepper=!0,l.dt=a,l}();default:if("cubic-bezier"===r.split("(")[0])return _n(r)}return"function"==typeof r?r:null}(i),o,this.changeStyle);this.manager.start([u,a,function(){t.stopJSAnimation=c()},o,l])}},{key:"runStepAnimation",value:function(e){var t=this,n=e.steps,r=e.begin,o=e.onAnimationStart,i=n[0],a=i.style,l=i.duration,u=void 0===l?0:l;return this.manager.start([o].concat($n(n.reduce((function(e,r,o){if(0===o)return e;var i=r.duration,a=r.easing,l=void 0===a?"ease":a,u=r.style,c=r.properties,s=r.onAnimationEnd,f=o>0?n[o-1]:r,p=c||Object.keys(u);if("function"==typeof l||"spring"===l)return[].concat($n(e),[t.runJSAnimation.bind(t,{from:f.style,to:u,duration:i,easing:l}),i]);var d=Sn(p,i,l),h=qn(qn(qn({},f.style),u),{},{transition:d});return[].concat($n(e),[h,i,s]).filter(xn)}),[a,Math.max(u,r)])),[e.onAnimationEnd]))}},{key:"runAnimation",value:function(e){this.manager||(this.manager=pn());var t=e.begin,n=e.duration,r=e.attributeName,o=e.to,i=e.easing,a=e.onAnimationStart,l=e.onAnimationEnd,u=e.steps,c=e.children,s=this.manager;if(this.unSubscribe=s.subscribe(this.handleStyleChange),"function"!=typeof i&&"function"!=typeof c&&"spring"!==i)if(u.length>1)this.runStepAnimation(e);else{var f=r?Kn({},r,o):o,p=Sn(Object.keys(f),n,i);s.start([a,t,qn(qn({},f),{},{transition:p}),n,l])}else this.runJSAnimation(e)}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.begin,e.duration),r=(e.attributeName,e.easing,e.isActive),i=(e.steps,e.from,e.to,e.canBegin,e.onAnimationEnd,e.shouldReAnimate,e.onAnimationReStart,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Wn)),a=o.Children.count(t),l=On(this.state.style);if("function"==typeof t)return t(l);if(!r||0===a||n<=0)return t;var u=function(e){var t=e.props,n=t.style,r=void 0===n?{}:n,a=t.className;return(0,o.cloneElement)(e,qn(qn({},i),{},{style:qn(qn({},r),l),className:a}))};return 1===a?u(o.Children.only(t)):o.createElement("div",null,o.Children.map(t,(function(e){return u(e)})))}}])&&Xn(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(o.PureComponent);er.displayName="Animate",er.defaultProps={begin:0,duration:1e3,from:"",to:"",attributeName:"",easing:"ease",isActive:!0,canBegin:!0,steps:[],onAnimationEnd:function(){},onAnimationStart:function(){}},er.propTypes={from:Dt().oneOfType([Dt().object,Dt().string]),to:Dt().oneOfType([Dt().object,Dt().string]),attributeName:Dt().string,duration:Dt().number,begin:Dt().number,easing:Dt().oneOfType([Dt().string,Dt().func]),steps:Dt().arrayOf(Dt().shape({duration:Dt().number.isRequired,style:Dt().object.isRequired,easing:Dt().oneOfType([Dt().oneOf(["ease","ease-in","ease-out","ease-in-out","linear"]),Dt().func]),properties:Dt().arrayOf("string"),onAnimationEnd:Dt().func})),children:Dt().oneOfType([Dt().node,Dt().func]),isActive:Dt().bool,canBegin:Dt().bool,onAnimationEnd:Dt().func,shouldReAnimate:Dt().bool,onAnimationStart:Dt().func,onAnimationReStart:Dt().func};const tr=er;var nr=n(4317),rr=["children","appearOptions","enterOptions","leaveOptions"];function or(e){return or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},or(e)}function ir(){return ir=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ir.apply(this,arguments)}function ar(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function lr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ar(Object(n),!0).forEach((function(t){pr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ar(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ur(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,dr(r.key),r)}}function cr(e,t){return cr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},cr(e,t)}function sr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fr(e){return fr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},fr(e)}function pr(e,t,n){return(t=dr(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function dr(e){var t=function(e,t){if("object"!==or(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==or(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===or(t)?t:String(t)}void 0===Number.isFinite&&(Number.isFinite=function(e){return"number"==typeof e&&isFinite(e)});var hr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.steps,n=e.duration;return t&&t.length?t.reduce((function(e,t){return e+(Number.isFinite(t.duration)&&t.duration>0?t.duration:0)}),0):Number.isFinite(n)?n:0},yr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&cr(e,t)}(l,e);var t,n,r,i,a=(r=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=fr(r);if(i){var n=fr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===or(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return sr(e)}(this,e)});function l(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),pr(sr(e=a.call(this)),"handleEnter",(function(t,n){var r=e.props,o=r.appearOptions,i=r.enterOptions;e.handleStyleActive(n?o:i)})),pr(sr(e),"handleExit",(function(){var t=e.props.leaveOptions;e.handleStyleActive(t)})),e.state={isActive:!1},e}return t=l,(n=[{key:"handleStyleActive",value:function(e){if(e){var t=e.onAnimationEnd?function(){e.onAnimationEnd()}:null;this.setState(lr(lr({},e),{},{onAnimationEnd:t,isActive:!0}))}}},{key:"parseTimeout",value:function(){var e=this.props,t=e.appearOptions,n=e.enterOptions,r=e.leaveOptions;return hr(t)+hr(n)+hr(r)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=(t.appearOptions,t.enterOptions,t.leaveOptions,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,rr));return o.createElement(nr.Transition,ir({},r,{onEnter:this.handleEnter,onExit:this.handleExit,timeout:this.parseTimeout()}),(function(){return o.createElement(tr,e.state,o.Children.only(n))}))}}])&&ur(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(o.Component);yr.propTypes={appearOptions:Dt().object,enterOptions:Dt().object,leaveOptions:Dt().object,children:Dt().element};const vr=yr;function mr(e){var t=e.component,n=e.children,r=e.appear,i=e.enter,a=e.leave;return o.createElement(nr.TransitionGroup,{component:t},o.Children.map(n,(function(e,t){return o.createElement(vr,{appearOptions:r,enterOptions:i,leaveOptions:a,key:"child-".concat(t)},e)})))}mr.propTypes={appear:Dt().object,enter:Dt().object,leave:Dt().object,children:Dt().oneOfType([Dt().array,Dt().element]),component:Dt().any},mr.defaultProps={component:"span"};const gr=tr;function br(e){return br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},br(e)}function xr(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==br(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==br(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===br(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var wr="recharts-tooltip-wrapper",Or={visibility:"hidden"};function Sr(e){var t,n=e.coordinate,r=e.translateX,o=e.translateY;return a(wr,(xr(t={},"".concat(wr,"-right"),A(r)&&n&&A(n.x)&&r>=n.x),xr(t,"".concat(wr,"-left"),A(r)&&n&&A(n.x)&&r<n.x),xr(t,"".concat(wr,"-bottom"),A(o)&&n&&A(n.y)&&o>=n.y),xr(t,"".concat(wr,"-top"),A(o)&&n&&A(n.y)&&o<n.y),t))}function Ar(e){var t=e.allowEscapeViewBox,n=e.coordinate,r=e.key,o=e.offsetTopLeft,i=e.position,a=e.reverseDirection,l=e.tooltipDimension,u=e.viewBox,c=e.viewBoxDimension;if(i&&A(i[r]))return i[r];var s=n[r]-l-o,f=n[r]+o;return t[r]?a[r]?s:f:a[r]?s<u[r]?Math.max(f,u[r]):Math.max(s,u[r]):f+l>u[r]+c?Math.max(s,u[r]):Math.max(f,u[r])}function kr(e){return kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kr(e)}function Er(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Er(Object(n),!0).forEach((function(t){Mr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Er(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Pr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Nr(r.key),r)}}function Cr(e,t){return Cr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Cr(e,t)}function _r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Tr(e){return Tr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Tr(e)}function Mr(e,t,n){return(t=Nr(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Nr(e){var t=function(e,t){if("object"!==kr(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==kr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===kr(t)?t:String(t)}var Ir=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Cr(e,t)}(l,e);var t,n,r,i,a=(r=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Tr(r);if(i){var n=Tr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===kr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _r(e)}(this,e)});function l(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Mr(_r(e=a.call.apply(a,[this].concat(n))),"state",{dismissed:!1,dismissedAtCoordinate:{x:0,y:0}}),Mr(_r(e),"lastBoundingBox",{width:-1,height:-1}),Mr(_r(e),"handleKeyDown",(function(t){var n,r,o,i;"Escape"===t.key&&e.setState({dismissed:!0,dismissedAtCoordinate:{x:null!==(n=null===(r=e.props.coordinate)||void 0===r?void 0:r.x)&&void 0!==n?n:0,y:null!==(o=null===(i=e.props.coordinate)||void 0===i?void 0:i.y)&&void 0!==o?o:0}})})),e}return t=l,n=[{key:"updateBBox",value:function(){if(this.wrapperNode&&this.wrapperNode.getBoundingClientRect){var e=this.wrapperNode.getBoundingClientRect();(Math.abs(e.width-this.lastBoundingBox.width)>1||Math.abs(e.height-this.lastBoundingBox.height)>1)&&(this.lastBoundingBox.width=e.width,this.lastBoundingBox.height=e.height)}else-1===this.lastBoundingBox.width&&-1===this.lastBoundingBox.height||(this.lastBoundingBox.width=-1,this.lastBoundingBox.height=-1)}},{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyDown),this.updateBBox()}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyDown)}},{key:"componentDidUpdate",value:function(){var e,t;this.props.active&&this.updateBBox(),this.state.dismissed&&((null===(e=this.props.coordinate)||void 0===e?void 0:e.x)===this.state.dismissedAtCoordinate.x&&(null===(t=this.props.coordinate)||void 0===t?void 0:t.y)===this.state.dismissedAtCoordinate.y||(this.state.dismissed=!1))}},{key:"render",value:function(){var e=this,t=this.props,n=t.active,r=t.allowEscapeViewBox,i=t.animationDuration,a=t.animationEasing,l=t.children,u=t.coordinate,c=t.hasPayload,s=t.isAnimationActive,f=t.offset,p=t.position,d=t.reverseDirection,h=t.useTranslate3d,y=t.viewBox,v=t.wrapperStyle,m=function(e){var t,n,r=e.allowEscapeViewBox,o=e.coordinate,i=e.offsetTopLeft,a=e.position,l=e.reverseDirection,u=e.tooltipBox,c=e.useTranslate3d,s=e.viewBox;return{cssProperties:u.height>0&&u.width>0&&o?function(e){var t=e.translateX,n=e.translateY;return On({transform:e.useTranslate3d?"translate3d(".concat(t,"px, ").concat(n,"px, 0)"):"translate(".concat(t,"px, ").concat(n,"px)")})}({translateX:t=Ar({allowEscapeViewBox:r,coordinate:o,key:"x",offsetTopLeft:i,position:a,reverseDirection:l,tooltipDimension:u.width,viewBox:s,viewBoxDimension:s.width}),translateY:n=Ar({allowEscapeViewBox:r,coordinate:o,key:"y",offsetTopLeft:i,position:a,reverseDirection:l,tooltipDimension:u.height,viewBox:s,viewBoxDimension:s.height}),useTranslate3d:c}):Or,cssClasses:Sr({translateX:t,translateY:n,coordinate:o})}}({allowEscapeViewBox:r,coordinate:u,offsetTopLeft:f,position:p,reverseDirection:d,tooltipBox:{height:this.lastBoundingBox.height,width:this.lastBoundingBox.width},useTranslate3d:h,viewBox:y}),g=m.cssClasses,b=m.cssProperties,x=jr(jr(jr({},s&&n&&On({transition:"transform ".concat(i,"ms ").concat(a)})),b),{},{pointerEvents:"none",visibility:!this.state.dismissed&&n&&c?"visible":"hidden",position:"absolute",top:0,left:0},v);return o.createElement("div",{tabIndex:-1,role:"dialog",className:g,style:x,ref:function(t){e.wrapperNode=t}},l)}}],n&&Pr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(o.PureComponent),Dr={isSsr:!("undefined"!=typeof window&&window.document&&window.document.createElement&&window.setTimeout),get:function(e){return Dr[e]},set:function(e,t){if("string"==typeof e)Dr[e]=t;else{var n=Object.keys(e);n&&n.length&&n.forEach((function(t){Dr[t]=e[t]}))}}};function Rr(e){return Rr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rr(e)}function Lr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Br(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lr(Object(n),!0).forEach((function(t){Wr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,$r(r.key),r)}}function Fr(e,t){return Fr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Fr(e,t)}function Ur(e){return Ur=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ur(e)}function Wr(e,t,n){return(t=$r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function $r(e){var t=function(e,t){if("object"!==Rr(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Rr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Rr(t)?t:String(t)}function Vr(e){return e.dataKey}var Hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Fr(e,t)}(l,e);var t,n,r,i,a=(r=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ur(r);if(i){var n=Ur(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Rr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function l(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),a.apply(this,arguments)}return t=l,n=[{key:"render",value:function(){var e=this.props,t=e.active,n=e.allowEscapeViewBox,r=e.animationDuration,i=e.animationEasing,a=e.content,l=e.coordinate,u=e.filterNull,c=e.isAnimationActive,s=e.offset,f=e.payload,p=e.payloadUniqBy,d=e.position,h=e.reverseDirection,y=e.useTranslate3d,v=e.viewBox,m=e.wrapperStyle,g=null!=f?f:[];u&&g.length&&(g=pt(f.filter((function(e){return null!=e.value})),p,Vr));var b=g.length>0;return o.createElement(Ir,{allowEscapeViewBox:n,animationDuration:r,animationEasing:i,isAnimationActive:c,active:t,coordinate:l,hasPayload:b,offset:s,position:d,reverseDirection:h,useTranslate3d:y,viewBox:v,wrapperStyle:m},function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):"function"==typeof e?o.createElement(e,t):o.createElement(Nt,t)}(a,Br(Br({},this.props),{},{payload:g})))}}],n&&zr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(o.PureComponent);Wr(Hr,"displayName","Tooltip"),Wr(Hr,"defaultProps",{allowEscapeViewBox:{x:!1,y:!1},animationDuration:400,animationEasing:"ease",contentStyle:{},coordinate:{x:0,y:0},cursor:!0,cursorStyle:{},filterNull:!0,isAnimationActive:!Dr.isSsr,itemStyle:{},labelStyle:{},offset:10,reverseDirection:{x:!1,y:!1},separator:" : ",trigger:"hover",useTranslate3d:!1,viewBox:{x:0,y:0,height:0,width:0},wrapperStyle:{}});var qr=n(3493),Kr=n.n(qr);function Xr(e){return Xr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xr(e)}function Gr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Yr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gr(Object(n),!0).forEach((function(t){Qr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Qr(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Xr(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Xr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Xr(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Zr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Jr=(0,o.forwardRef)((function(e,t){var n=e.aspect,r=e.initialDimension,i=void 0===r?{width:-1,height:-1}:r,l=e.width,u=void 0===l?"100%":l,c=e.height,s=void 0===c?"100%":c,f=e.minWidth,p=void 0===f?0:f,d=e.minHeight,h=e.maxHeight,y=e.children,v=e.debounce,g=void 0===v?0:v,b=e.id,x=e.className,w=e.onResize,O=e.style,A=void 0===O?{}:O,k=(0,o.useRef)(null),E=(0,o.useRef)();E.current=w,(0,o.useImperativeHandle)(t,(function(){return k}));var j,P,C=(j=(0,o.useState)({containerWidth:i.width,containerHeight:i.height}),P=2,function(e){if(Array.isArray(e))return e}(j)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(j,P)||function(e,t){if(e){if("string"==typeof e)return Zr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Zr(e,t):void 0}}(j,P)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),_=C[0],T=C[1],M=(0,o.useCallback)((function(e,t){T((function(n){var r=Math.round(e),o=Math.round(t);return n.containerWidth===r&&n.containerHeight===o?n:{containerWidth:r,containerHeight:o}}))}),[]);(0,o.useEffect)((function(){var e=function(e){var t,n=e[0].contentRect,r=n.width,o=n.height;M(r,o),null===(t=E.current)||void 0===t||t.call(E,r,o)};g>0&&(e=Kr()(e,g,{trailing:!0,leading:!1}));var t=new ResizeObserver(e),n=k.current.getBoundingClientRect(),r=n.width,o=n.height;return M(r,o),t.observe(k.current),function(){t.disconnect()}}),[M,g]);var N=(0,o.useMemo)((function(){var e=_.containerWidth,t=_.containerHeight;if(e<0||t<0)return null;pe(S(u)||S(s),"The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.",u,s),pe(!n||n>0,"The aspect(%s) must be greater than zero.",n);var r=S(u)?e:u,i=S(s)?t:s;n&&n>0&&(r?i=r/n:i&&(r=i*n),h&&i>h&&(i=h)),pe(r>0||i>0,"The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.",r,i,u,s,p,d,n);var a=!Array.isArray(y)&&(0,m.isElement)(y)&&H(y.type).endsWith("Chart");return o.Children.map(y,(function(e){return(0,m.isElement)(e)?(0,o.cloneElement)(e,Yr({width:r,height:i},a?{style:Yr({height:"100%",width:"100%",maxHeight:i,maxWidth:r},e.props.style)}:{})):e}))}),[n,y,s,h,d,p,_,u]);return o.createElement("div",{id:b?"".concat(b):void 0,className:a("recharts-responsive-container",x),style:Yr(Yr({},A),{},{width:u,height:s,minWidth:p,minHeight:d,maxHeight:h}),ref:k},N)})),eo=function(e){return null};function to(e){return to="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},to(e)}function no(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ro(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?no(Object(n),!0).forEach((function(t){oo(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):no(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function oo(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==to(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==to(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===to(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}eo.displayName="Cell";var io={widthCache:{},cacheCount:0},ao={position:"absolute",top:"-20000px",left:0,padding:0,margin:0,border:"none",whiteSpace:"pre"},lo="recharts_measurement_span",uo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(null==e||Dr.isSsr)return{width:0,height:0};var n,r=(n=ro({},t),Object.keys(n).forEach((function(e){n[e]||delete n[e]})),n),o=JSON.stringify({text:e,copyStyle:r});if(io.widthCache[o])return io.widthCache[o];try{var i=document.getElementById(lo);i||((i=document.createElement("span")).setAttribute("id",lo),i.setAttribute("aria-hidden","true"),document.body.appendChild(i));var a=ro(ro({},ao),r);Object.assign(i.style,a),i.textContent="".concat(e);var l=i.getBoundingClientRect(),u={width:l.width,height:l.height};return io.widthCache[o]=u,++io.cacheCount>2e3&&(io.cacheCount=0,io.widthCache={}),u}catch(e){return{width:0,height:0}}};function co(e){return co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},co(e)}function so(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return fo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?fo(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function po(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==co(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==co(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===co(o)?o:String(o)),r)}var o}var ho=/(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/,yo=/(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/,vo=/^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/,mo=/(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/,go={cm:96/2.54,mm:96/25.4,pt:96/72,pc:16,in:96,Q:96/101.6,px:1},bo=Object.keys(go),xo="NaN",wo=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.num=t,this.unit=n,this.num=t,this.unit=n,Number.isNaN(t)&&(this.unit=""),""===n||vo.test(n)||(this.num=NaN,this.unit=""),bo.includes(n)&&(this.num=function(e,t){return e*go[t]}(t,n),this.unit="px")}var t,n,r;return t=e,r=[{key:"parse",value:function(t){var n,r=so(null!==(n=mo.exec(t))&&void 0!==n?n:[],3),o=r[1],i=r[2];return new e(parseFloat(o),null!=i?i:"")}}],(n=[{key:"add",value:function(t){return this.unit!==t.unit?new e(NaN,""):new e(this.num+t.num,this.unit)}},{key:"subtract",value:function(t){return this.unit!==t.unit?new e(NaN,""):new e(this.num-t.num,this.unit)}},{key:"multiply",value:function(t){return""!==this.unit&&""!==t.unit&&this.unit!==t.unit?new e(NaN,""):new e(this.num*t.num,this.unit||t.unit)}},{key:"divide",value:function(t){return""!==this.unit&&""!==t.unit&&this.unit!==t.unit?new e(NaN,""):new e(this.num/t.num,this.unit||t.unit)}},{key:"toString",value:function(){return"".concat(this.num).concat(this.unit)}},{key:"isNaN",value:function(){return Number.isNaN(this.num)}}])&&po(t.prototype,n),r&&po(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Oo(e){if(e.includes(xo))return xo;for(var t=e;t.includes("*")||t.includes("/");){var n,r=so(null!==(n=ho.exec(t))&&void 0!==n?n:[],4),o=r[1],i=r[2],a=r[3],l=wo.parse(null!=o?o:""),u=wo.parse(null!=a?a:""),c="*"===i?l.multiply(u):l.divide(u);if(c.isNaN())return xo;t=t.replace(ho,c.toString())}for(;t.includes("+")||/.-\d+(?:\.\d+)?/.test(t);){var s,f=so(null!==(s=yo.exec(t))&&void 0!==s?s:[],4),p=f[1],d=f[2],h=f[3],y=wo.parse(null!=p?p:""),v=wo.parse(null!=h?h:""),m="+"===d?y.add(v):y.subtract(v);if(m.isNaN())return xo;t=t.replace(yo,m.toString())}return t}var So=/\(([^()]*)\)/;function Ao(e){var t=function(e){try{return function(e){var t=e.replace(/\s+/g,"");return t=function(e){for(var t=e;t.includes("(");){var n=so(So.exec(t),2)[1];t=t.replace(So,Oo(n))}return t}(t),Oo(t)}(e)}catch(e){return xo}}(e.slice(5,-1));return t===xo?"":t}var ko=["x","y","lineHeight","capHeight","scaleToFit","textAnchor","verticalAnchor","fill"],Eo=["dx","dy","angle","className","breakAll"];function jo(){return jo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},jo.apply(this,arguments)}function Po(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Co(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return _o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_o(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var To=/[ \f\n\r\t\v\u2028\u2029]+/,Mo=function(e){var t=e.children,n=e.breakAll,r=e.style;try{var o=[];return s()(t)||(o=n?t.toString().split(""):t.toString().split(To)),{wordsWithComputedWidth:o.map((function(e){return{word:e,width:uo(e,r).width}})),spaceWidth:n?0:uo(" ",r).width}}catch(e){return null}},No=function(e){return[{words:s()(e)?[]:e.toString().split(To)}]},Io="#808080",Do=function(e){var t=e.x,n=void 0===t?0:t,r=e.y,i=void 0===r?0:r,l=e.lineHeight,u=void 0===l?"1em":l,c=e.capHeight,s=void 0===c?"0.71em":c,f=e.scaleToFit,p=void 0!==f&&f,d=e.textAnchor,h=void 0===d?"start":d,y=e.verticalAnchor,v=void 0===y?"end":y,m=e.fill,g=void 0===m?Io:m,b=Po(e,ko),x=(0,o.useMemo)((function(){return function(e){var t=e.width,n=e.scaleToFit,r=e.children,o=e.style,i=e.breakAll,a=e.maxLines;if((t||n)&&!Dr.isSsr){var l=Mo({breakAll:i,children:r,style:o});return l?function(e,t,n,r,o){var i=e.maxLines,a=e.children,l=e.style,u=e.breakAll,c=A(i),s=a,f=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).reduce((function(e,t){var i=t.word,a=t.width,l=e[e.length-1];if(l&&(null==r||o||l.width+a+n<Number(r)))l.words.push(i),l.width+=a+n;else{var u={words:[i],width:a};e.push(u)}return e}),[])},p=f(t);if(!c)return p;for(var d,h=function(e){var t=s.slice(0,e),n=Mo({breakAll:u,style:l,children:t+"…"}).wordsWithComputedWidth,o=f(n),a=o.length>i||function(e){return e.reduce((function(e,t){return e.width>t.width?e:t}))}(o).width>Number(r);return[a,o]},y=0,v=s.length-1,m=0;y<=v&&m<=s.length-1;){var g=Math.floor((y+v)/2),b=Co(h(g-1),2),x=b[0],w=b[1],O=Co(h(g),1)[0];if(x||O||(y=g+1),x&&O&&(v=g-1),!x&&O){d=w;break}m++}return d||p}({breakAll:i,children:r,maxLines:a,style:o},l.wordsWithComputedWidth,l.spaceWidth,t,n):No(r)}return No(r)}({breakAll:b.breakAll,children:b.children,maxLines:b.maxLines,scaleToFit:p,style:b.style,width:b.width})}),[b.breakAll,b.children,b.maxLines,p,b.style,b.width]),w=b.dx,O=b.dy,S=b.angle,E=b.className,j=b.breakAll,P=Po(b,Eo);if(!k(n)||!k(i))return null;var C,_=n+(A(w)?w:0),T=i+(A(O)?O:0);switch(v){case"start":C=Ao("calc(".concat(s,")"));break;case"middle":C=Ao("calc(".concat((x.length-1)/2," * -").concat(u," + (").concat(s," / 2))"));break;default:C=Ao("calc(".concat(x.length-1," * -").concat(u,")"))}var M=[];if(p){var N=x[0].width,I=b.width;M.push("scale(".concat((A(I)?I/N:1)/N,")"))}return S&&M.push("rotate(".concat(S,", ").concat(_,", ").concat(T,")")),M.length&&(P.transform=M.join(" ")),o.createElement("text",jo({},ne(P,!0),{x:_,y:T,className:a("recharts-text",E),textAnchor:h,fill:g.includes("url")?Io:g}),x.map((function(e,t){var n=e.words.join(j?"":" ");return o.createElement("tspan",{x:_,dy:0===t?C:u,key:n},n)})))};function Ro(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function Lo(e,t){switch(arguments.length){case 0:break;case 1:"function"==typeof e?this.interpolator(e):this.range(e);break;default:this.domain(e),"function"==typeof t?this.interpolator(t):this.range(t)}return this}class Bo extends Map{constructor(e,t=Fo){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const[t,n]of e)this.set(t,n)}get(e){return super.get(zo(this,e))}has(e){return super.has(zo(this,e))}set(e,t){return super.set(function({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}(this,e),t)}delete(e){return super.delete(function({_intern:e,_key:t},n){const r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}(this,e))}}function zo({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):n}function Fo(e){return null!==e&&"object"==typeof e?e.valueOf():e}const Uo=Symbol("implicit");function Wo(){var e=new Bo,t=[],n=[],r=Uo;function o(o){let i=e.get(o);if(void 0===i){if(r!==Uo)return r;e.set(o,i=t.push(o)-1)}return n[i%n.length]}return o.domain=function(n){if(!arguments.length)return t.slice();t=[],e=new Bo;for(const r of n)e.has(r)||e.set(r,t.push(r)-1);return o},o.range=function(e){return arguments.length?(n=Array.from(e),o):n.slice()},o.unknown=function(e){return arguments.length?(r=e,o):r},o.copy=function(){return Wo(t,n).unknown(r)},Ro.apply(o,arguments),o}function $o(){var e,t,n=Wo().unknown(void 0),r=n.domain,o=n.range,i=0,a=1,l=!1,u=0,c=0,s=.5;function f(){var n=r().length,f=a<i,p=f?a:i,d=f?i:a;e=(d-p)/Math.max(1,n-u+2*c),l&&(e=Math.floor(e)),p+=(d-p-e*(n-u))*s,t=e*(1-u),l&&(p=Math.round(p),t=Math.round(t));var h=function(e,t,n){e=+e,t=+t,n=(o=arguments.length)<2?(t=e,e=0,1):o<3?1:+n;for(var r=-1,o=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(o);++r<o;)i[r]=e+r*n;return i}(n).map((function(t){return p+e*t}));return o(f?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),f()):r()},n.range=function(e){return arguments.length?([i,a]=e,i=+i,a=+a,f()):[i,a]},n.rangeRound=function(e){return[i,a]=e,i=+i,a=+a,l=!0,f()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(l=!!e,f()):l},n.padding=function(e){return arguments.length?(u=Math.min(1,c=+e),f()):u},n.paddingInner=function(e){return arguments.length?(u=Math.min(1,e),f()):u},n.paddingOuter=function(e){return arguments.length?(c=+e,f()):c},n.align=function(e){return arguments.length?(s=Math.max(0,Math.min(1,e)),f()):s},n.copy=function(){return $o(r(),[i,a]).round(l).paddingInner(u).paddingOuter(c).align(s)},Ro.apply(f(),arguments)}function Vo(e){var t=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return Vo(t())},e}function Ho(){return Vo($o.apply(null,arguments).paddingInner(1))}const qo=Math.sqrt(50),Ko=Math.sqrt(10),Xo=Math.sqrt(2);function Go(e,t,n){const r=(t-e)/Math.max(0,n),o=Math.floor(Math.log10(r)),i=r/Math.pow(10,o),a=i>=qo?10:i>=Ko?5:i>=Xo?2:1;let l,u,c;return o<0?(c=Math.pow(10,-o)/a,l=Math.round(e*c),u=Math.round(t*c),l/c<e&&++l,u/c>t&&--u,c=-c):(c=Math.pow(10,o)*a,l=Math.round(e/c),u=Math.round(t/c),l*c<e&&++l,u*c>t&&--u),u<l&&.5<=n&&n<2?Go(e,t,2*n):[l,u,c]}function Yo(e,t,n){if(!((n=+n)>0))return[];if((e=+e)==(t=+t))return[e];const r=t<e,[o,i,a]=r?Go(t,e,n):Go(e,t,n);if(!(i>=o))return[];const l=i-o+1,u=new Array(l);if(r)if(a<0)for(let e=0;e<l;++e)u[e]=(i-e)/-a;else for(let e=0;e<l;++e)u[e]=(i-e)*a;else if(a<0)for(let e=0;e<l;++e)u[e]=(o+e)/-a;else for(let e=0;e<l;++e)u[e]=(o+e)*a;return u}function Qo(e,t,n){return Go(e=+e,t=+t,n=+n)[2]}function Zo(e,t,n){n=+n;const r=(t=+t)<(e=+e),o=r?Qo(t,e,n):Qo(e,t,n);return(r?-1:1)*(o<0?1/-o:o)}function Jo(e,t){return null==e||null==t?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function ei(e,t){return null==e||null==t?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function ti(e){let t,n,r;function o(e,r,o=0,i=e.length){if(o<i){if(0!==t(r,r))return i;do{const t=o+i>>>1;n(e[t],r)<0?o=t+1:i=t}while(o<i)}return o}return 2!==e.length?(t=Jo,n=(t,n)=>Jo(e(t),n),r=(t,n)=>e(t)-n):(t=e===Jo||e===ei?e:ni,n=e,r=e),{left:o,center:function(e,t,n=0,i=e.length){const a=o(e,t,n,i-1);return a>n&&r(e[a-1],t)>-r(e[a],t)?a-1:a},right:function(e,r,o=0,i=e.length){if(o<i){if(0!==t(r,r))return i;do{const t=o+i>>>1;n(e[t],r)<=0?o=t+1:i=t}while(o<i)}return o}}}function ni(){return 0}function ri(e){return null===e?NaN:+e}const oi=ti(Jo),ii=oi.right,ai=(oi.left,ti(ri).center,ii);function li(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function ui(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function ci(){}var si=.7,fi=1/si,pi="\\s*([+-]?\\d+)\\s*",di="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",hi="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",yi=/^#([0-9a-f]{3,8})$/,vi=new RegExp(`^rgb\\(${pi},${pi},${pi}\\)$`),mi=new RegExp(`^rgb\\(${hi},${hi},${hi}\\)$`),gi=new RegExp(`^rgba\\(${pi},${pi},${pi},${di}\\)$`),bi=new RegExp(`^rgba\\(${hi},${hi},${hi},${di}\\)$`),xi=new RegExp(`^hsl\\(${di},${hi},${hi}\\)$`),wi=new RegExp(`^hsla\\(${di},${hi},${hi},${di}\\)$`),Oi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Si(){return this.rgb().formatHex()}function Ai(){return this.rgb().formatRgb()}function ki(e){var t,n;return e=(e+"").trim().toLowerCase(),(t=yi.exec(e))?(n=t[1].length,t=parseInt(t[1],16),6===n?Ei(t):3===n?new Ci(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===n?ji(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===n?ji(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=vi.exec(e))?new Ci(t[1],t[2],t[3],1):(t=mi.exec(e))?new Ci(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=gi.exec(e))?ji(t[1],t[2],t[3],t[4]):(t=bi.exec(e))?ji(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=xi.exec(e))?Di(t[1],t[2]/100,t[3]/100,1):(t=wi.exec(e))?Di(t[1],t[2]/100,t[3]/100,t[4]):Oi.hasOwnProperty(e)?Ei(Oi[e]):"transparent"===e?new Ci(NaN,NaN,NaN,0):null}function Ei(e){return new Ci(e>>16&255,e>>8&255,255&e,1)}function ji(e,t,n,r){return r<=0&&(e=t=n=NaN),new Ci(e,t,n,r)}function Pi(e,t,n,r){return 1===arguments.length?((o=e)instanceof ci||(o=ki(o)),o?new Ci((o=o.rgb()).r,o.g,o.b,o.opacity):new Ci):new Ci(e,t,n,null==r?1:r);var o}function Ci(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function _i(){return`#${Ii(this.r)}${Ii(this.g)}${Ii(this.b)}`}function Ti(){const e=Mi(this.opacity);return`${1===e?"rgb(":"rgba("}${Ni(this.r)}, ${Ni(this.g)}, ${Ni(this.b)}${1===e?")":`, ${e})`}`}function Mi(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function Ni(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function Ii(e){return((e=Ni(e))<16?"0":"")+e.toString(16)}function Di(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Li(e,t,n,r)}function Ri(e){if(e instanceof Li)return new Li(e.h,e.s,e.l,e.opacity);if(e instanceof ci||(e=ki(e)),!e)return new Li;if(e instanceof Li)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,o=Math.min(t,n,r),i=Math.max(t,n,r),a=NaN,l=i-o,u=(i+o)/2;return l?(a=t===i?(n-r)/l+6*(n<r):n===i?(r-t)/l+2:(t-n)/l+4,l/=u<.5?i+o:2-i-o,a*=60):l=u>0&&u<1?0:a,new Li(a,l,u,e.opacity)}function Li(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function Bi(e){return(e=(e||0)%360)<0?e+360:e}function zi(e){return Math.max(0,Math.min(1,e||0))}function Fi(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}function Ui(e,t,n,r,o){var i=e*e,a=i*e;return((1-3*e+3*i-a)*t+(4-6*i+3*a)*n+(1+3*e+3*i-3*a)*r+a*o)/6}li(ci,ki,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:Si,formatHex:Si,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Ri(this).formatHsl()},formatRgb:Ai,toString:Ai}),li(Ci,Pi,ui(ci,{brighter(e){return e=null==e?fi:Math.pow(fi,e),new Ci(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?si:Math.pow(si,e),new Ci(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new Ci(Ni(this.r),Ni(this.g),Ni(this.b),Mi(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:_i,formatHex:_i,formatHex8:function(){return`#${Ii(this.r)}${Ii(this.g)}${Ii(this.b)}${Ii(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ti,toString:Ti})),li(Li,(function(e,t,n,r){return 1===arguments.length?Ri(e):new Li(e,t,n,null==r?1:r)}),ui(ci,{brighter(e){return e=null==e?fi:Math.pow(fi,e),new Li(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?si:Math.pow(si,e),new Li(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,o=2*n-r;return new Ci(Fi(e>=240?e-240:e+120,o,r),Fi(e,o,r),Fi(e<120?e+240:e-120,o,r),this.opacity)},clamp(){return new Li(Bi(this.h),zi(this.s),zi(this.l),Mi(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=Mi(this.opacity);return`${1===e?"hsl(":"hsla("}${Bi(this.h)}, ${100*zi(this.s)}%, ${100*zi(this.l)}%${1===e?")":`, ${e})`}`}}));const Wi=e=>()=>e;function $i(e,t){var n=t-e;return n?function(e,t){return function(n){return e+n*t}}(e,n):Wi(isNaN(e)?t:e)}const Vi=function e(t){var n=function(e){return 1==(e=+e)?$i:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):Wi(isNaN(t)?n:t)}}(t);function r(e,t){var r=n((e=Pi(e)).r,(t=Pi(t)).r),o=n(e.g,t.g),i=n(e.b,t.b),a=$i(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=o(t),e.b=i(t),e.opacity=a(t),e+""}}return r.gamma=e,r}(1);function Hi(e){return function(t){var n,r,o=t.length,i=new Array(o),a=new Array(o),l=new Array(o);for(n=0;n<o;++n)r=Pi(t[n]),i[n]=r.r||0,a[n]=r.g||0,l[n]=r.b||0;return i=e(i),a=e(a),l=e(l),r.opacity=1,function(e){return r.r=i(e),r.g=a(e),r.b=l(e),r+""}}}function qi(e,t){var n,r=t?t.length:0,o=e?Math.min(r,e.length):0,i=new Array(o),a=new Array(r);for(n=0;n<o;++n)i[n]=ea(e[n],t[n]);for(;n<r;++n)a[n]=t[n];return function(e){for(n=0;n<o;++n)a[n]=i[n](e);return a}}function Ki(e,t){var n=new Date;return e=+e,t=+t,function(r){return n.setTime(e*(1-r)+t*r),n}}function Xi(e,t){return e=+e,t=+t,function(n){return e*(1-n)+t*n}}function Gi(e,t){var n,r={},o={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=ea(e[n],t[n]):o[n]=t[n];return function(e){for(n in r)o[n]=r[n](e);return o}}Hi((function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),o=e[r],i=e[r+1],a=r>0?e[r-1]:2*o-i,l=r<t-1?e[r+2]:2*i-o;return Ui((n-r/t)*t,a,o,i,l)}})),Hi((function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),o=e[(r+t-1)%t],i=e[r%t],a=e[(r+1)%t],l=e[(r+2)%t];return Ui((n-r/t)*t,o,i,a,l)}}));var Yi=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Qi=new RegExp(Yi.source,"g");function Zi(e,t){var n,r,o,i=Yi.lastIndex=Qi.lastIndex=0,a=-1,l=[],u=[];for(e+="",t+="";(n=Yi.exec(e))&&(r=Qi.exec(t));)(o=r.index)>i&&(o=t.slice(i,o),l[a]?l[a]+=o:l[++a]=o),(n=n[0])===(r=r[0])?l[a]?l[a]+=r:l[++a]=r:(l[++a]=null,u.push({i:a,x:Xi(n,r)})),i=Qi.lastIndex;return i<t.length&&(o=t.slice(i),l[a]?l[a]+=o:l[++a]=o),l.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)l[(n=u[r]).i]=n.x(e);return l.join("")})}function Ji(e,t){t||(t=[]);var n,r=e?Math.min(t.length,e.length):0,o=t.slice();return function(i){for(n=0;n<r;++n)o[n]=e[n]*(1-i)+t[n]*i;return o}}function ea(e,t){var n,r,o=typeof t;return null==t||"boolean"===o?Wi(t):("number"===o?Xi:"string"===o?(n=ki(t))?(t=n,Vi):Zi:t instanceof ki?Vi:t instanceof Date?Ki:(r=t,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(t)?qi:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?Gi:Xi:Ji))(e,t)}function ta(e,t){return e=+e,t=+t,function(n){return Math.round(e*(1-n)+t*n)}}function na(e){return+e}var ra=[0,1];function oa(e){return e}function ia(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=isNaN(t)?NaN:.5,function(){return n});var n}function aa(e,t,n){var r=e[0],o=e[1],i=t[0],a=t[1];return o<r?(r=ia(o,r),i=n(a,i)):(r=ia(r,o),i=n(i,a)),function(e){return i(r(e))}}function la(e,t,n){var r=Math.min(e.length,t.length)-1,o=new Array(r),i=new Array(r),a=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++a<r;)o[a]=ia(e[a],e[a+1]),i[a]=n(t[a],t[a+1]);return function(t){var n=ai(e,t,1,r)-1;return i[n](o[n](t))}}function ua(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function ca(){var e,t,n,r,o,i,a=ra,l=ra,u=ea,c=oa;function s(){var e=Math.min(a.length,l.length);return c!==oa&&(c=function(e,t){var n;return e>t&&(n=e,e=t,t=n),function(n){return Math.max(e,Math.min(t,n))}}(a[0],a[e-1])),r=e>2?la:aa,o=i=null,f}function f(t){return null==t||isNaN(t=+t)?n:(o||(o=r(a.map(e),l,u)))(e(c(t)))}return f.invert=function(n){return c(t((i||(i=r(l,a.map(e),Xi)))(n)))},f.domain=function(e){return arguments.length?(a=Array.from(e,na),s()):a.slice()},f.range=function(e){return arguments.length?(l=Array.from(e),s()):l.slice()},f.rangeRound=function(e){return l=Array.from(e),u=ta,s()},f.clamp=function(e){return arguments.length?(c=!!e||oa,s()):c!==oa},f.interpolate=function(e){return arguments.length?(u=e,s()):u},f.unknown=function(e){return arguments.length?(n=e,f):n},function(n,r){return e=n,t=r,s()}}function sa(){return ca()(oa,oa)}var fa,pa=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function da(e){if(!(t=pa.exec(e)))throw new Error("invalid format: "+e);var t;return new ha({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function ha(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}function ya(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function va(e){return(e=ya(Math.abs(e)))?e[1]:NaN}function ma(e,t){var n=ya(e,t);if(!n)return e+"";var r=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")}da.prototype=ha.prototype,ha.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const ga={"%":(e,t)=>(100*e).toFixed(t),b:e=>Math.round(e).toString(2),c:e=>e+"",d:function(e){return Math.abs(e=Math.round(e))>=1e21?e.toLocaleString("en").replace(/,/g,""):e.toString(10)},e:(e,t)=>e.toExponential(t),f:(e,t)=>e.toFixed(t),g:(e,t)=>e.toPrecision(t),o:e=>Math.round(e).toString(8),p:(e,t)=>ma(100*e,t),r:ma,s:function(e,t){var n=ya(e,t);if(!n)return e+"";var r=n[0],o=n[1],i=o-(fa=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ya(e,Math.max(0,t+i-1))[0]},X:e=>Math.round(e).toString(16).toUpperCase(),x:e=>Math.round(e).toString(16)};function ba(e){return e}var xa,wa,Oa,Sa=Array.prototype.map,Aa=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function ka(e,t,n,r){var o,i=Zo(e,t,n);switch((r=da(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(o=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(va(t)/3)))-va(Math.abs(e)))}(i,a))||(r.precision=o),Oa(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,va(t)-va(e))+1}(i,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(e){return Math.max(0,-va(Math.abs(e)))}(i))||(r.precision=o-2*("%"===r.type))}return wa(r)}function Ea(e){var t=e.domain;return e.ticks=function(e){var n=t();return Yo(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return ka(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,o,i=t(),a=0,l=i.length-1,u=i[a],c=i[l],s=10;for(c<u&&(o=u,u=c,c=o,o=a,a=l,l=o);s-- >0;){if((o=Qo(u,c,n))===r)return i[a]=u,i[l]=c,t(i);if(o>0)u=Math.floor(u/o)*o,c=Math.ceil(c/o)*o;else{if(!(o<0))break;u=Math.ceil(u*o)/o,c=Math.floor(c*o)/o}r=o}return e},e}function ja(){var e=sa();return e.copy=function(){return ua(e,ja())},Ro.apply(e,arguments),Ea(e)}function Pa(e){var t;function n(e){return null==e||isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=Array.from(t,na),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return Pa(e).unknown(t)},e=arguments.length?Array.from(e,na):[0,1],Ea(n)}function Ca(e,t){var n,r=0,o=(e=e.slice()).length-1,i=e[r],a=e[o];return a<i&&(n=r,r=o,o=n,n=i,i=a,a=n),e[r]=t.floor(i),e[o]=t.ceil(a),e}function _a(e){return Math.log(e)}function Ta(e){return Math.exp(e)}function Ma(e){return-Math.log(-e)}function Na(e){return-Math.exp(-e)}function Ia(e){return isFinite(e)?+("1e"+e):e<0?0:e}function Da(e){return(t,n)=>-e(-t,n)}function Ra(e){const t=e(_a,Ta),n=t.domain;let r,o,i=10;function a(){return r=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),t=>Math.log(t)/e)}(i),o=function(e){return 10===e?Ia:e===Math.E?Math.exp:t=>Math.pow(e,t)}(i),n()[0]<0?(r=Da(r),o=Da(o),e(Ma,Na)):e(_a,Ta),t}return t.base=function(e){return arguments.length?(i=+e,a()):i},t.domain=function(e){return arguments.length?(n(e),a()):n()},t.ticks=e=>{const t=n();let a=t[0],l=t[t.length-1];const u=l<a;u&&([a,l]=[l,a]);let c,s,f=r(a),p=r(l);const d=null==e?10:+e;let h=[];if(!(i%1)&&p-f<d){if(f=Math.floor(f),p=Math.ceil(p),a>0){for(;f<=p;++f)for(c=1;c<i;++c)if(s=f<0?c/o(-f):c*o(f),!(s<a)){if(s>l)break;h.push(s)}}else for(;f<=p;++f)for(c=i-1;c>=1;--c)if(s=f>0?c/o(-f):c*o(f),!(s<a)){if(s>l)break;h.push(s)}2*h.length<d&&(h=Yo(a,l,d))}else h=Yo(f,p,Math.min(p-f,d)).map(o);return u?h.reverse():h},t.tickFormat=(e,n)=>{if(null==e&&(e=10),null==n&&(n=10===i?"s":","),"function"!=typeof n&&(i%1||null!=(n=da(n)).precision||(n.trim=!0),n=wa(n)),e===1/0)return n;const a=Math.max(1,i*e/t.ticks().length);return e=>{let t=e/o(Math.round(r(e)));return t*i<i-.5&&(t*=i),t<=a?n(e):""}},t.nice=()=>n(Ca(n(),{floor:e=>o(Math.floor(r(e))),ceil:e=>o(Math.ceil(r(e)))})),t}function La(){const e=Ra(ca()).domain([1,10]);return e.copy=()=>ua(e,La()).base(e.base()),Ro.apply(e,arguments),e}function Ba(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function za(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function Fa(e){var t=1,n=e(Ba(t),za(t));return n.constant=function(n){return arguments.length?e(Ba(t=+n),za(t)):t},Ea(n)}function Ua(){var e=Fa(ca());return e.copy=function(){return ua(e,Ua()).constant(e.constant())},Ro.apply(e,arguments)}function Wa(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function $a(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function Va(e){return e<0?-e*e:e*e}function Ha(e){var t=e(oa,oa),n=1;return t.exponent=function(t){return arguments.length?1==(n=+t)?e(oa,oa):.5===n?e($a,Va):e(Wa(n),Wa(1/n)):n},Ea(t)}function qa(){var e=Ha(ca());return e.copy=function(){return ua(e,qa()).exponent(e.exponent())},Ro.apply(e,arguments),e}function Ka(){return qa.apply(null,arguments).exponent(.5)}function Xa(e){return Math.sign(e)*e*e}function Ga(){var e,t=sa(),n=[0,1],r=!1;function o(n){var o=function(e){return Math.sign(e)*Math.sqrt(Math.abs(e))}(t(n));return isNaN(o)?e:r?Math.round(o):o}return o.invert=function(e){return t.invert(Xa(e))},o.domain=function(e){return arguments.length?(t.domain(e),o):t.domain()},o.range=function(e){return arguments.length?(t.range((n=Array.from(e,na)).map(Xa)),o):n.slice()},o.rangeRound=function(e){return o.range(e).round(!0)},o.round=function(e){return arguments.length?(r=!!e,o):r},o.clamp=function(e){return arguments.length?(t.clamp(e),o):t.clamp()},o.unknown=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return Ga(t.domain(),n).round(r).clamp(t.clamp()).unknown(e)},Ro.apply(o,arguments),Ea(o)}function Ya(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n<t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let o of e)null!=(o=t(o,++r,e))&&(n<o||void 0===n&&o>=o)&&(n=o)}return n}function Qa(e,t){let n;if(void 0===t)for(const t of e)null!=t&&(n>t||void 0===n&&t>=t)&&(n=t);else{let r=-1;for(let o of e)null!=(o=t(o,++r,e))&&(n>o||void 0===n&&o>=o)&&(n=o)}return n}function Za(e,t){return(null==e||!(e>=e))-(null==t||!(t>=t))||(e<t?-1:e>t?1:0)}function Ja(e,t,n=0,r=1/0,o){if(t=Math.floor(t),n=Math.floor(Math.max(0,n)),r=Math.floor(Math.min(e.length-1,r)),!(n<=t&&t<=r))return e;for(o=void 0===o?Za:function(e=Jo){if(e===Jo)return Za;if("function"!=typeof e)throw new TypeError("compare is not a function");return(t,n)=>{const r=e(t,n);return r||0===r?r:(0===e(n,n))-(0===e(t,t))}}(o);r>n;){if(r-n>600){const i=r-n+1,a=t-n+1,l=Math.log(i),u=.5*Math.exp(2*l/3),c=.5*Math.sqrt(l*u*(i-u)/i)*(a-i/2<0?-1:1);Ja(e,t,Math.max(n,Math.floor(t-a*u/i+c)),Math.min(r,Math.floor(t+(i-a)*u/i+c)),o)}const i=e[t];let a=n,l=r;for(el(e,n,t),o(e[r],i)>0&&el(e,n,r);a<l;){for(el(e,a,l),++a,--l;o(e[a],i)<0;)++a;for(;o(e[l],i)>0;)--l}0===o(e[n],i)?el(e,n,l):(++l,el(e,l,r)),l<=t&&(n=l+1),t<=l&&(r=l-1)}return e}function el(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function tl(e,t,n=ri){if((r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,o=(r-1)*t,i=Math.floor(o),a=+n(e[i],i,e);return a+(+n(e[i+1],i+1,e)-a)*(o-i)}}function nl(){var e,t=[],n=[],r=[];function o(){var e=0,o=Math.max(1,n.length);for(r=new Array(o-1);++e<o;)r[e-1]=tl(t,e/o);return i}function i(t){return null==t||isNaN(t=+t)?e:n[ai(r,t)]}return i.invertExtent=function(e){var o=n.indexOf(e);return o<0?[NaN,NaN]:[o>0?r[o-1]:t[0],o<r.length?r[o]:t[t.length-1]]},i.domain=function(e){if(!arguments.length)return t.slice();t=[];for(let n of e)null==n||isNaN(n=+n)||t.push(n);return t.sort(Jo),o()},i.range=function(e){return arguments.length?(n=Array.from(e),o()):n.slice()},i.unknown=function(t){return arguments.length?(e=t,i):e},i.quantiles=function(){return r.slice()},i.copy=function(){return nl().domain(t).range(n).unknown(e)},Ro.apply(i,arguments)}function rl(){var e,t=0,n=1,r=1,o=[.5],i=[0,1];function a(t){return null!=t&&t<=t?i[ai(o,t,0,r)]:e}function l(){var e=-1;for(o=new Array(r);++e<r;)o[e]=((e+1)*n-(e-r)*t)/(r+1);return a}return a.domain=function(e){return arguments.length?([t,n]=e,t=+t,n=+n,l()):[t,n]},a.range=function(e){return arguments.length?(r=(i=Array.from(e)).length-1,l()):i.slice()},a.invertExtent=function(e){var a=i.indexOf(e);return a<0?[NaN,NaN]:a<1?[t,o[0]]:a>=r?[o[r-1],n]:[o[a-1],o[a]]},a.unknown=function(t){return arguments.length?(e=t,a):a},a.thresholds=function(){return o.slice()},a.copy=function(){return rl().domain([t,n]).range(i).unknown(e)},Ro.apply(Ea(a),arguments)}function ol(){var e,t=[.5],n=[0,1],r=1;function o(o){return null!=o&&o<=o?n[ai(t,o,0,r)]:e}return o.domain=function(e){return arguments.length?(t=Array.from(e),r=Math.min(t.length,n.length-1),o):t.slice()},o.range=function(e){return arguments.length?(n=Array.from(e),r=Math.min(t.length,n.length-1),o):n.slice()},o.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},o.unknown=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return ol().domain(t).range(n).unknown(e)},Ro.apply(o,arguments)}xa=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?ba:(t=Sa.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var o=e.length,i=[],a=0,l=t[0],u=0;o>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),i.push(e.substring(o-=l,o+l)),!((u+=l+1)>r));)l=t[a=(a+1)%t.length];return i.reverse().join(n)}),o=void 0===e.currency?"":e.currency[0]+"",i=void 0===e.currency?"":e.currency[1]+"",a=void 0===e.decimal?".":e.decimal+"",l=void 0===e.numerals?ba:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}(Sa.call(e.numerals,String)),u=void 0===e.percent?"%":e.percent+"",c=void 0===e.minus?"−":e.minus+"",s=void 0===e.nan?"NaN":e.nan+"";function f(e){var t=(e=da(e)).fill,n=e.align,f=e.sign,p=e.symbol,d=e.zero,h=e.width,y=e.comma,v=e.precision,m=e.trim,g=e.type;"n"===g?(y=!0,g="g"):ga[g]||(void 0===v&&(v=12),m=!0,g="g"),(d||"0"===t&&"="===n)&&(d=!0,t="0",n="=");var b="$"===p?o:"#"===p&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",x="$"===p?i:/[%p]/.test(g)?u:"",w=ga[g],O=/[defgprs%]/.test(g);function S(e){var o,i,u,p=b,S=x;if("c"===g)S=w(e)+S,e="";else{var A=(e=+e)<0||1/e<0;if(e=isNaN(e)?s:w(Math.abs(e),v),m&&(e=function(e){e:for(var t,n=e.length,r=1,o=-1;r<n;++r)switch(e[r]){case".":o=t=r;break;case"0":0===o&&(o=r),t=r;break;default:if(!+e[r])break e;o>0&&(o=0)}return o>0?e.slice(0,o)+e.slice(t+1):e}(e)),A&&0==+e&&"+"!==f&&(A=!1),p=(A?"("===f?f:c:"-"===f||"("===f?"":f)+p,S=("s"===g?Aa[8+fa/3]:"")+S+(A&&"("===f?")":""),O)for(o=-1,i=e.length;++o<i;)if(48>(u=e.charCodeAt(o))||u>57){S=(46===u?a+e.slice(o+1):e.slice(o))+S,e=e.slice(0,o);break}}y&&!d&&(e=r(e,1/0));var k=p.length+e.length+S.length,E=k<h?new Array(h-k+1).join(t):"";switch(y&&d&&(e=r(E+e,E.length?h-S.length:1/0),E=""),n){case"<":e=p+e+S+E;break;case"=":e=p+E+e+S;break;case"^":e=E.slice(0,k=E.length>>1)+p+e+S+E.slice(k);break;default:e=E+p+e+S}return l(e)}return v=void 0===v?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),S.toString=function(){return e+""},S}return{format:f,formatPrefix:function(e,t){var n=f(((e=da(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(va(t)/3))),o=Math.pow(10,-r),i=Aa[8+r/3];return function(e){return n(o*e)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),wa=xa.format,Oa=xa.formatPrefix;const il=1e3,al=6e4,ll=36e5,ul=864e5,cl=6048e5,sl=31536e6,fl=new Date,pl=new Date;function dl(e,t,n,r){function o(t){return e(t=0===arguments.length?new Date:new Date(+t)),t}return o.floor=t=>(e(t=new Date(+t)),t),o.ceil=n=>(e(n=new Date(n-1)),t(n,1),e(n),n),o.round=e=>{const t=o(e),n=o.ceil(e);return e-t<n-e?t:n},o.offset=(e,n)=>(t(e=new Date(+e),null==n?1:Math.floor(n)),e),o.range=(n,r,i)=>{const a=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return a;let l;do{a.push(l=new Date(+n)),t(n,i),e(n)}while(l<n&&n<r);return a},o.filter=n=>dl((t=>{if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),((e,r)=>{if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})),n&&(o.count=(t,r)=>(fl.setTime(+t),pl.setTime(+r),e(fl),e(pl),Math.floor(n(fl,pl))),o.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?o.filter(r?t=>r(t)%e==0:t=>o.count(0,t)%e==0):o:null)),o}const hl=dl((()=>{}),((e,t)=>{e.setTime(+e+t)}),((e,t)=>t-e));hl.every=e=>(e=Math.floor(e),isFinite(e)&&e>0?e>1?dl((t=>{t.setTime(Math.floor(t/e)*e)}),((t,n)=>{t.setTime(+t+n*e)}),((t,n)=>(n-t)/e)):hl:null),hl.range;const yl=dl((e=>{e.setTime(e-e.getMilliseconds())}),((e,t)=>{e.setTime(+e+t*il)}),((e,t)=>(t-e)/il),(e=>e.getUTCSeconds())),vl=(yl.range,dl((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*il)}),((e,t)=>{e.setTime(+e+t*al)}),((e,t)=>(t-e)/al),(e=>e.getMinutes()))),ml=(vl.range,dl((e=>{e.setUTCSeconds(0,0)}),((e,t)=>{e.setTime(+e+t*al)}),((e,t)=>(t-e)/al),(e=>e.getUTCMinutes()))),gl=(ml.range,dl((e=>{e.setTime(e-e.getMilliseconds()-e.getSeconds()*il-e.getMinutes()*al)}),((e,t)=>{e.setTime(+e+t*ll)}),((e,t)=>(t-e)/ll),(e=>e.getHours()))),bl=(gl.range,dl((e=>{e.setUTCMinutes(0,0,0)}),((e,t)=>{e.setTime(+e+t*ll)}),((e,t)=>(t-e)/ll),(e=>e.getUTCHours()))),xl=(bl.range,dl((e=>e.setHours(0,0,0,0)),((e,t)=>e.setDate(e.getDate()+t)),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*al)/ul),(e=>e.getDate()-1))),wl=(xl.range,dl((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/ul),(e=>e.getUTCDate()-1))),Ol=(wl.range,dl((e=>{e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+t)}),((e,t)=>(t-e)/ul),(e=>Math.floor(e/ul))));function Sl(e){return dl((t=>{t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),((e,t)=>{e.setDate(e.getDate()+7*t)}),((e,t)=>(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*al)/cl))}Ol.range;const Al=Sl(0),kl=Sl(1),El=Sl(2),jl=Sl(3),Pl=Sl(4),Cl=Sl(5),_l=Sl(6);function Tl(e){return dl((t=>{t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCDate(e.getUTCDate()+7*t)}),((e,t)=>(t-e)/cl))}Al.range,kl.range,El.range,jl.range,Pl.range,Cl.range,_l.range;const Ml=Tl(0),Nl=Tl(1),Il=Tl(2),Dl=Tl(3),Rl=Tl(4),Ll=Tl(5),Bl=Tl(6),zl=(Ml.range,Nl.range,Il.range,Dl.range,Rl.range,Ll.range,Bl.range,dl((e=>{e.setDate(1),e.setHours(0,0,0,0)}),((e,t)=>{e.setMonth(e.getMonth()+t)}),((e,t)=>t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())),(e=>e.getMonth()))),Fl=(zl.range,dl((e=>{e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCMonth(e.getUTCMonth()+t)}),((e,t)=>t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())),(e=>e.getUTCMonth()))),Ul=(Fl.range,dl((e=>{e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,t)=>{e.setFullYear(e.getFullYear()+t)}),((e,t)=>t.getFullYear()-e.getFullYear()),(e=>e.getFullYear())));Ul.every=e=>isFinite(e=Math.floor(e))&&e>0?dl((t=>{t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,n)=>{t.setFullYear(t.getFullYear()+n*e)})):null,Ul.range;const Wl=dl((e=>{e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,t)=>{e.setUTCFullYear(e.getUTCFullYear()+t)}),((e,t)=>t.getUTCFullYear()-e.getUTCFullYear()),(e=>e.getUTCFullYear()));function $l(e,t,n,r,o,i){const a=[[yl,1,il],[yl,5,5e3],[yl,15,15e3],[yl,30,3e4],[i,1,al],[i,5,3e5],[i,15,9e5],[i,30,18e5],[o,1,ll],[o,3,108e5],[o,6,216e5],[o,12,432e5],[r,1,ul],[r,2,1728e5],[n,1,cl],[t,1,2592e6],[t,3,7776e6],[e,1,sl]];function l(t,n,r){const o=Math.abs(n-t)/r,i=ti((([,,e])=>e)).right(a,o);if(i===a.length)return e.every(Zo(t/sl,n/sl,r));if(0===i)return hl.every(Math.max(Zo(t,n,r),1));const[l,u]=a[o/a[i-1][2]<a[i][2]/o?i-1:i];return l.every(u)}return[function(e,t,n){const r=t<e;r&&([e,t]=[t,e]);const o=n&&"function"==typeof n.range?n:l(e,t,n),i=o?o.range(e,+t+1):[];return r?i.reverse():i},l]}Wl.every=e=>isFinite(e=Math.floor(e))&&e>0?dl((t=>{t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,n)=>{t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null,Wl.range;const[Vl,Hl]=$l(Wl,Fl,Ml,Ol,bl,ml),[ql,Kl]=$l(Ul,zl,Al,xl,gl,vl);function Xl(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Gl(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Yl(e,t,n){return{y:e,m:t,d:n,H:0,M:0,S:0,L:0}}var Ql,Zl,Jl,eu={"-":"",_:" ",0:"0"},tu=/^\s*\d+/,nu=/^%/,ru=/[\\^$*+?|[\]().{}]/g;function ou(e,t,n){var r=e<0?"-":"",o=(r?-e:e)+"",i=o.length;return r+(i<n?new Array(n-i+1).join(t)+o:o)}function iu(e){return e.replace(ru,"\\$&")}function au(e){return new RegExp("^(?:"+e.map(iu).join("|")+")","i")}function lu(e){return new Map(e.map(((e,t)=>[e.toLowerCase(),t])))}function uu(e,t,n){var r=tu.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function cu(e,t,n){var r=tu.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function su(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function fu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function pu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function du(e,t,n){var r=tu.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function hu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function yu(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function vu(e,t,n){var r=tu.exec(t.slice(n,n+1));return r?(e.q=3*r[0]-3,n+r[0].length):-1}function mu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function gu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function bu(e,t,n){var r=tu.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function xu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function wu(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function Ou(e,t,n){var r=tu.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function Su(e,t,n){var r=tu.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function Au(e,t,n){var r=tu.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function ku(e,t,n){var r=nu.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function Eu(e,t,n){var r=tu.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function ju(e,t,n){var r=tu.exec(t.slice(n));return r?(e.s=+r[0],n+r[0].length):-1}function Pu(e,t){return ou(e.getDate(),t,2)}function Cu(e,t){return ou(e.getHours(),t,2)}function _u(e,t){return ou(e.getHours()%12||12,t,2)}function Tu(e,t){return ou(1+xl.count(Ul(e),e),t,3)}function Mu(e,t){return ou(e.getMilliseconds(),t,3)}function Nu(e,t){return Mu(e,t)+"000"}function Iu(e,t){return ou(e.getMonth()+1,t,2)}function Du(e,t){return ou(e.getMinutes(),t,2)}function Ru(e,t){return ou(e.getSeconds(),t,2)}function Lu(e){var t=e.getDay();return 0===t?7:t}function Bu(e,t){return ou(Al.count(Ul(e)-1,e),t,2)}function zu(e){var t=e.getDay();return t>=4||0===t?Pl(e):Pl.ceil(e)}function Fu(e,t){return e=zu(e),ou(Pl.count(Ul(e),e)+(4===Ul(e).getDay()),t,2)}function Uu(e){return e.getDay()}function Wu(e,t){return ou(kl.count(Ul(e)-1,e),t,2)}function $u(e,t){return ou(e.getFullYear()%100,t,2)}function Vu(e,t){return ou((e=zu(e)).getFullYear()%100,t,2)}function Hu(e,t){return ou(e.getFullYear()%1e4,t,4)}function qu(e,t){var n=e.getDay();return ou((e=n>=4||0===n?Pl(e):Pl.ceil(e)).getFullYear()%1e4,t,4)}function Ku(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+ou(t/60|0,"0",2)+ou(t%60,"0",2)}function Xu(e,t){return ou(e.getUTCDate(),t,2)}function Gu(e,t){return ou(e.getUTCHours(),t,2)}function Yu(e,t){return ou(e.getUTCHours()%12||12,t,2)}function Qu(e,t){return ou(1+wl.count(Wl(e),e),t,3)}function Zu(e,t){return ou(e.getUTCMilliseconds(),t,3)}function Ju(e,t){return Zu(e,t)+"000"}function ec(e,t){return ou(e.getUTCMonth()+1,t,2)}function tc(e,t){return ou(e.getUTCMinutes(),t,2)}function nc(e,t){return ou(e.getUTCSeconds(),t,2)}function rc(e){var t=e.getUTCDay();return 0===t?7:t}function oc(e,t){return ou(Ml.count(Wl(e)-1,e),t,2)}function ic(e){var t=e.getUTCDay();return t>=4||0===t?Rl(e):Rl.ceil(e)}function ac(e,t){return e=ic(e),ou(Rl.count(Wl(e),e)+(4===Wl(e).getUTCDay()),t,2)}function lc(e){return e.getUTCDay()}function uc(e,t){return ou(Nl.count(Wl(e)-1,e),t,2)}function cc(e,t){return ou(e.getUTCFullYear()%100,t,2)}function sc(e,t){return ou((e=ic(e)).getUTCFullYear()%100,t,2)}function fc(e,t){return ou(e.getUTCFullYear()%1e4,t,4)}function pc(e,t){var n=e.getUTCDay();return ou((e=n>=4||0===n?Rl(e):Rl.ceil(e)).getUTCFullYear()%1e4,t,4)}function dc(){return"+0000"}function hc(){return"%"}function yc(e){return+e}function vc(e){return Math.floor(+e/1e3)}function mc(e){return new Date(e)}function gc(e){return e instanceof Date?+e:+new Date(+e)}function bc(e,t,n,r,o,i,a,l,u,c){var s=sa(),f=s.invert,p=s.domain,d=c(".%L"),h=c(":%S"),y=c("%I:%M"),v=c("%I %p"),m=c("%a %d"),g=c("%b %d"),b=c("%B"),x=c("%Y");function w(e){return(u(e)<e?d:l(e)<e?h:a(e)<e?y:i(e)<e?v:r(e)<e?o(e)<e?m:g:n(e)<e?b:x)(e)}return s.invert=function(e){return new Date(f(e))},s.domain=function(e){return arguments.length?p(Array.from(e,gc)):p().map(mc)},s.ticks=function(t){var n=p();return e(n[0],n[n.length-1],null==t?10:t)},s.tickFormat=function(e,t){return null==t?w:c(t)},s.nice=function(e){var n=p();return e&&"function"==typeof e.range||(e=t(n[0],n[n.length-1],null==e?10:e)),e?p(Ca(n,e)):s},s.copy=function(){return ua(s,bc(e,t,n,r,o,i,a,l,u,c))},s}function xc(){return Ro.apply(bc(ql,Kl,Ul,zl,Al,xl,gl,vl,yl,Zl).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function wc(){return Ro.apply(bc(Vl,Hl,Wl,Fl,Ml,wl,bl,ml,yl,Jl).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)}function Oc(){var e,t,n,r,o,i=0,a=1,l=oa,u=!1;function c(t){return null==t||isNaN(t=+t)?o:l(0===n?.5:(t=(r(t)-e)*n,u?Math.max(0,Math.min(1,t)):t))}function s(e){return function(t){var n,r;return arguments.length?([n,r]=t,l=e(n,r),c):[l(0),l(1)]}}return c.domain=function(o){return arguments.length?([i,a]=o,e=r(i=+i),t=r(a=+a),n=e===t?0:1/(t-e),c):[i,a]},c.clamp=function(e){return arguments.length?(u=!!e,c):u},c.interpolator=function(e){return arguments.length?(l=e,c):l},c.range=s(ea),c.rangeRound=s(ta),c.unknown=function(e){return arguments.length?(o=e,c):o},function(o){return r=o,e=o(i),t=o(a),n=e===t?0:1/(t-e),c}}function Sc(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function Ac(){var e=Ea(Oc()(oa));return e.copy=function(){return Sc(e,Ac())},Lo.apply(e,arguments)}function kc(){var e=Ra(Oc()).domain([1,10]);return e.copy=function(){return Sc(e,kc()).base(e.base())},Lo.apply(e,arguments)}function Ec(){var e=Fa(Oc());return e.copy=function(){return Sc(e,Ec()).constant(e.constant())},Lo.apply(e,arguments)}function jc(){var e=Ha(Oc());return e.copy=function(){return Sc(e,jc()).exponent(e.exponent())},Lo.apply(e,arguments)}function Pc(){return jc.apply(null,arguments).exponent(.5)}function Cc(){var e=[],t=oa;function n(n){if(null!=n&&!isNaN(n=+n))return t((ai(e,n,1)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(let n of t)null==n||isNaN(n=+n)||e.push(n);return e.sort(Jo),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.range=function(){return e.map(((n,r)=>t(r/(e.length-1))))},n.quantiles=function(t){return Array.from({length:t+1},((n,r)=>function(e,t,n){if(e=Float64Array.from(function*(e,t){if(void 0===t)for(let t of e)null!=t&&(t=+t)>=t&&(yield t);else{let n=-1;for(let r of e)null!=(r=t(r,++n,e))&&(r=+r)>=r&&(yield r)}}(e,n)),(r=e.length)&&!isNaN(t=+t)){if(t<=0||r<2)return Qa(e);if(t>=1)return Ya(e);var r,o=(r-1)*t,i=Math.floor(o),a=Ya(Ja(e,i).subarray(0,i+1));return a+(Qa(e.subarray(i+1))-a)*(o-i)}}(e,r/t)))},n.copy=function(){return Cc(t).domain(e)},Lo.apply(n,arguments)}function _c(){var e,t,n,r,o,i,a,l=0,u=.5,c=1,s=1,f=oa,p=!1;function d(e){return isNaN(e=+e)?a:(e=.5+((e=+i(e))-t)*(s*e<s*t?r:o),f(p?Math.max(0,Math.min(1,e)):e))}function h(e){return function(t){var n,r,o;return arguments.length?([n,r,o]=t,f=function(e,t){void 0===t&&(t=e,e=ea);for(var n=0,r=t.length-1,o=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(o,o=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return i[t](e-t)}}(e,[n,r,o]),d):[f(0),f(.5),f(1)]}}return d.domain=function(a){return arguments.length?([l,u,c]=a,e=i(l=+l),t=i(u=+u),n=i(c=+c),r=e===t?0:.5/(t-e),o=t===n?0:.5/(n-t),s=t<e?-1:1,d):[l,u,c]},d.clamp=function(e){return arguments.length?(p=!!e,d):p},d.interpolator=function(e){return arguments.length?(f=e,d):f},d.range=h(ea),d.rangeRound=h(ta),d.unknown=function(e){return arguments.length?(a=e,d):a},function(a){return i=a,e=a(l),t=a(u),n=a(c),r=e===t?0:.5/(t-e),o=t===n?0:.5/(n-t),s=t<e?-1:1,d}}function Tc(){var e=Ea(_c()(oa));return e.copy=function(){return Sc(e,Tc())},Lo.apply(e,arguments)}function Mc(){var e=Ra(_c()).domain([.1,1,10]);return e.copy=function(){return Sc(e,Mc()).base(e.base())},Lo.apply(e,arguments)}function Nc(){var e=Fa(_c());return e.copy=function(){return Sc(e,Nc()).constant(e.constant())},Lo.apply(e,arguments)}function Ic(){var e=Ha(_c());return e.copy=function(){return Sc(e,Ic()).exponent(e.exponent())},Lo.apply(e,arguments)}function Dc(){return Ic.apply(null,arguments).exponent(.5)}function Rc(e,t){if((o=e.length)>1)for(var n,r,o,i=1,a=e[t[0]],l=a.length;i<o;++i)for(r=a,a=e[t[i]],n=0;n<l;++n)a[n][1]+=a[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]}function Lc(e){return"object"==typeof e&&"length"in e?e:Array.from(e)}function Bc(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n}function zc(e,t){return e[t]}function Fc(e){const t=[];return t.key=e,t}Ql=function(e){var t=e.dateTime,n=e.date,r=e.time,o=e.periods,i=e.days,a=e.shortDays,l=e.months,u=e.shortMonths,c=au(o),s=lu(o),f=au(i),p=lu(i),d=au(a),h=lu(a),y=au(l),v=lu(l),m=au(u),g=lu(u),b={a:function(e){return a[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return l[e.getMonth()]},c:null,d:Pu,e:Pu,f:Nu,g:Vu,G:qu,H:Cu,I:_u,j:Tu,L:Mu,m:Iu,M:Du,p:function(e){return o[+(e.getHours()>=12)]},q:function(e){return 1+~~(e.getMonth()/3)},Q:yc,s:vc,S:Ru,u:Lu,U:Bu,V:Fu,w:Uu,W:Wu,x:null,X:null,y:$u,Y:Hu,Z:Ku,"%":hc},x={a:function(e){return a[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return l[e.getUTCMonth()]},c:null,d:Xu,e:Xu,f:Ju,g:sc,G:pc,H:Gu,I:Yu,j:Qu,L:Zu,m:ec,M:tc,p:function(e){return o[+(e.getUTCHours()>=12)]},q:function(e){return 1+~~(e.getUTCMonth()/3)},Q:yc,s:vc,S:nc,u:rc,U:oc,V:ac,w:lc,W:uc,x:null,X:null,y:cc,Y:fc,Z:dc,"%":hc},w={a:function(e,t,n){var r=d.exec(t.slice(n));return r?(e.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(e,t,n){var r=f.exec(t.slice(n));return r?(e.w=p.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=g.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(e,t,n){var r=y.exec(t.slice(n));return r?(e.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(e,n,r){return A(e,t,n,r)},d:gu,e:gu,f:Au,g:hu,G:du,H:xu,I:xu,j:bu,L:Su,m:mu,M:wu,p:function(e,t,n){var r=c.exec(t.slice(n));return r?(e.p=s.get(r[0].toLowerCase()),n+r[0].length):-1},q:vu,Q:Eu,s:ju,S:Ou,u:cu,U:su,V:fu,w:uu,W:pu,x:function(e,t,r){return A(e,n,t,r)},X:function(e,t,n){return A(e,r,t,n)},y:hu,Y:du,Z:yu,"%":ku};function O(e,t){return function(n){var r,o,i,a=[],l=-1,u=0,c=e.length;for(n instanceof Date||(n=new Date(+n));++l<c;)37===e.charCodeAt(l)&&(a.push(e.slice(u,l)),null!=(o=eu[r=e.charAt(++l)])?r=e.charAt(++l):o="e"===r?" ":"0",(i=t[r])&&(r=i(n,o)),a.push(r),u=l+1);return a.push(e.slice(u,l)),a.join("")}}function S(e,t){return function(n){var r,o,i=Yl(1900,void 0,1);if(A(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(t&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(o=(r=Gl(Yl(i.y,0,1))).getUTCDay(),r=o>4||0===o?Nl.ceil(r):Nl(r),r=wl.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(o=(r=Xl(Yl(i.y,0,1))).getDay(),r=o>4||0===o?kl.ceil(r):kl(r),r=xl.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?Gl(Yl(i.y,0,1)).getUTCDay():Xl(Yl(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Gl(i)):Xl(i)}}function A(e,t,n,r){for(var o,i,a=0,l=t.length,u=n.length;a<l;){if(r>=u)return-1;if(37===(o=t.charCodeAt(a++))){if(o=t.charAt(a++),!(i=w[o in eu?t.charAt(a++):o])||(r=i(e,n,r))<0)return-1}else if(o!=n.charCodeAt(r++))return-1}return r}return b.x=O(n,b),b.X=O(r,b),b.c=O(t,b),x.x=O(n,x),x.X=O(r,x),x.c=O(t,x),{format:function(e){var t=O(e+="",b);return t.toString=function(){return e},t},parse:function(e){var t=S(e+="",!1);return t.toString=function(){return e},t},utcFormat:function(e){var t=O(e+="",x);return t.toString=function(){return e},t},utcParse:function(e){var t=S(e+="",!0);return t.toString=function(){return e},t}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Zl=Ql.format,Ql.parse,Jl=Ql.utcFormat,Ql.utcParse,Array.prototype.slice;var Uc=n(6162),Wc=n.n(Uc),$c=n(3632),Vc=n.n($c),Hc=n(4654),qc=n.n(Hc),Kc=n(8446),Xc=n.n(Kc),Gc=n(9887),Yc=n.n(Gc);function Qc(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Zc=function(e){return e},Jc={"@@functional/placeholder":!0},es=function(e){return e===Jc},ts=function(e){return function t(){return 0===arguments.length||1===arguments.length&&es(arguments.length<=0?void 0:arguments[0])?t:e.apply(void 0,arguments)}},ns=function e(t,n){return 1===t?n:ts((function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=o.filter((function(e){return e!==Jc})).length;return a>=t?n.apply(void 0,o):e(t-a,ts((function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i,a=o.map((function(e){return es(e)?t.shift():e}));return n.apply(void 0,(i=a,function(e){if(Array.isArray(e))return Qc(e)}(i)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(i)||function(e,t){if(e){if("string"==typeof e)return Qc(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Qc(e,t):void 0}}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).concat(t))})))}))},rs=function(e){return ns(e.length,e)},os=function(e,t){for(var n=[],r=e;r<t;++r)n[r-e]=r;return n},is=rs((function(e,t){return Array.isArray(t)?t.map(e):Object.keys(t).map((function(e){return t[e]})).map(e)})),as=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!t.length)return Zc;var r=t.reverse(),o=r[0],i=r.slice(1);return function(){return i.reduce((function(e,t){return t(e)}),o.apply(void 0,arguments))}},ls=function(e){return Array.isArray(e)?e.reverse():e.split("").reverse.join("")},us=function(e){var t=null,n=null;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return t&&o.every((function(e,n){return e===t[n]}))?n:(t=o,n=e.apply(void 0,o))}},cs=rs((function(e,t,n){var r=+e;return r+n*(+t-r)})),ss=rs((function(e,t,n){var r=t-+e;return(n-e)/(r||1/0)})),fs=rs((function(e,t,n){var r=t-+e;return r=r||1/0,Math.max(0,Math.min(1,(n-e)/r))}));const ps={rangeStep:function(e,t,n){for(var r=new(Yc())(e),o=0,i=[];r.lt(t)&&o<1e5;)i.push(r.toNumber()),r=r.add(n),o++;return i},getDigitCount:function(e){return 0===e?1:Math.floor(new(Yc())(e).abs().log(10).toNumber())+1},interpolateNumber:cs,uninterpolateNumber:ss,uninterpolateTruncation:fs};function ds(e){return function(e){if(Array.isArray(e))return vs(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||ys(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function hs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||ys(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ys(e,t){if(e){if("string"==typeof e)return vs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vs(e,t):void 0}}function vs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ms(e){var t=hs(e,2),n=t[0],r=t[1],o=n,i=r;return n>r&&(o=r,i=n),[o,i]}function gs(e,t,n){if(e.lte(0))return new(Yc())(0);var r=ps.getDigitCount(e.toNumber()),o=new(Yc())(10).pow(r),i=e.div(o),a=1!==r?.05:.1,l=new(Yc())(Math.ceil(i.div(a).toNumber())).add(n).mul(a).mul(o);return t?l:new(Yc())(Math.ceil(l))}function bs(e,t,n){var r=1,o=new(Yc())(e);if(!o.isint()&&n){var i=Math.abs(e);i<1?(r=new(Yc())(10).pow(ps.getDigitCount(e)-1),o=new(Yc())(Math.floor(o.div(r).toNumber())).mul(r)):i>1&&(o=new(Yc())(Math.floor(e)))}else 0===e?o=new(Yc())(Math.floor((t-1)/2)):n||(o=new(Yc())(Math.floor(e)));var a=Math.floor((t-1)/2);return as(is((function(e){return o.add(new(Yc())(e-a).mul(r)).toNumber()})),os)(0,t)}function xs(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;if(!Number.isFinite((t-e)/(n-1)))return{step:new(Yc())(0),tickMin:new(Yc())(0),tickMax:new(Yc())(0)};var i,a=gs(new(Yc())(t).sub(e).div(n-1),r,o);i=e<=0&&t>=0?new(Yc())(0):(i=new(Yc())(e).add(t).div(2)).sub(new(Yc())(i).mod(a));var l=Math.ceil(i.sub(e).div(a).toNumber()),u=Math.ceil(new(Yc())(t).sub(i).div(a).toNumber()),c=l+u+1;return c>n?xs(e,t,n,r,o+1):(c<n&&(u=t>0?u+(n-c):u,l=t>0?l:l+(n-c)),{step:a,tickMin:i.sub(new(Yc())(l).mul(a)),tickMax:i.add(new(Yc())(u).mul(a))})}var ws=us((function(e){var t=hs(e,2),n=t[0],r=t[1],o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=Math.max(o,2),l=hs(ms([n,r]),2),u=l[0],c=l[1];if(u===-1/0||c===1/0){var s=c===1/0?[u].concat(ds(os(0,o-1).map((function(){return 1/0})))):[].concat(ds(os(0,o-1).map((function(){return-1/0}))),[c]);return n>r?ls(s):s}if(u===c)return bs(u,o,i);var f=xs(u,c,a,i),p=f.step,d=f.tickMin,h=f.tickMax,y=ps.rangeStep(d,h.add(new(Yc())(.1).mul(p)),p);return n>r?ls(y):y})),Os=(us((function(e){var t=hs(e,2),n=t[0],r=t[1],o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:6,i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=Math.max(o,2),l=hs(ms([n,r]),2),u=l[0],c=l[1];if(u===-1/0||c===1/0)return[n,r];if(u===c)return bs(u,o,i);var s=gs(new(Yc())(c).sub(u).div(a-1),i,0),f=as(is((function(e){return new(Yc())(u).add(new(Yc())(e).mul(s)).toNumber()})),os)(0,a).filter((function(e){return e>=u&&e<=c}));return n>r?ls(f):f})),us((function(e,t){var n=hs(e,2),r=n[0],o=n[1],i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],a=hs(ms([r,o]),2),l=a[0],u=a[1];if(l===-1/0||u===1/0)return[r,o];if(l===u)return[l];var c=Math.max(t,2),s=gs(new(Yc())(u).sub(l).div(c-1),i,0),f=[].concat(ds(ps.rangeStep(new(Yc())(l),new(Yc())(u).sub(new(Yc())(.99).mul(s)),s)),[u]);return r>o?ls(f):f}))),Ss=["offset","layout","width","dataKey","data","dataPointFormatter","xAxis","yAxis"];function As(){return As=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},As.apply(this,arguments)}function ks(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Es(e){var t=e.offset,n=e.layout,r=e.width,i=e.dataKey,a=e.data,l=e.dataPointFormatter,u=e.xAxis,c=e.yAxis,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Ss),f=ne(s),p=a.map((function(e){var a=l(e,i),s=a.x,p=a.y,d=a.value,h=a.errorVal;if(!h)return null;var y,v,m,g,b=[];if(Array.isArray(h)){var x=(g=2,function(e){if(Array.isArray(e))return e}(m=h)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(m,g)||function(e,t){if(e){if("string"==typeof e)return ks(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ks(e,t):void 0}}(m,g)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());y=x[0],v=x[1]}else y=v=h;if("vertical"===n){var w=u.scale,O=p+t,S=O+r,A=O-r,k=w(d-y),E=w(d+v);b.push({x1:E,y1:S,x2:E,y2:A}),b.push({x1:k,y1:O,x2:E,y2:O}),b.push({x1:k,y1:S,x2:k,y2:A})}else if("horizontal"===n){var j=c.scale,P=s+t,C=P-r,_=P+r,T=j(d-y),M=j(d+v);b.push({x1:C,y1:M,x2:_,y2:M}),b.push({x1:P,y1:T,x2:P,y2:M}),b.push({x1:C,y1:T,x2:_,y2:T})}return o.createElement(fe,As({className:"recharts-errorBar",key:"bar-".concat(b.map((function(e){return"".concat(e.x1,"-").concat(e.x2,"-").concat(e.y1,"-").concat(e.y2)})))},f),b.map((function(e){return o.createElement("line",As({},e,{key:"line-".concat(e.x1,"-").concat(e.x2,"-").concat(e.y1,"-").concat(e.y2)}))})))}));return o.createElement(fe,{className:"recharts-errorBars"},p)}function js(e){return js="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},js(e)}function Ps(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ps(Object(n),!0).forEach((function(t){_s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ps(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _s(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==js(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==js(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===js(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Es.defaultProps={stroke:"black",strokeWidth:1.5,width:5,offset:0,layout:"horizontal"},Es.displayName="ErrorBar";var Ts=function(e){var t,n=e.children,r=e.formattedGraphicalItems,o=e.legendWidth,i=e.legendContent,a=Y(n,At);return a?(t=a.props&&a.props.payload?a.props&&a.props.payload:"children"===i?(r||[]).reduce((function(e,t){var n=t.item,r=t.props,o=r.sectors||r.data||[];return e.concat(o.map((function(e){return{type:a.props.iconType||n.props.legendType,value:e.name,color:e.fill,payload:e}})))}),[]):(r||[]).map((function(e){var t=e.item,n=t.props,r=n.dataKey,o=n.name,i=n.legendType;return{inactive:n.hide,dataKey:r,type:a.props.iconType||i||"square",color:Fs(t),value:o||r,payload:t.props}})),Cs(Cs(Cs({},a.props),At.getWithHeight(a,o)),{},{payload:t,item:a})):null};function Ms(e){return Ms="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ms(e)}function Ns(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Is(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ns(Object(n),!0).forEach((function(t){Ds(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ns(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ds(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ms(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ms(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ms(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rs(e){return function(e){if(Array.isArray(e))return Ls(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Ls(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ls(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ls(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Bs(e,t,n){return s()(e)||s()(t)?n:k(t)?u()(e,t,n):h()(t)?t(e):n}function zs(e,t,n,r){var o=qc()(e,(function(e){return Bs(e,t)}));if("number"===n){var i=o.filter((function(e){return A(e)||parseFloat(e)}));return i.length?[Vc()(i),Wc()(i)]:[1/0,-1/0]}return(r?o.filter((function(e){return!s()(e)})):o).map((function(e){return k(e)||e instanceof Date?e:""}))}var Fs=function(e){var t,n=e.type.displayName,r=e.props,o=r.stroke,i=r.fill;switch(n){case"Line":t=o;break;case"Area":case"Radar":t=o&&"none"!==o?o:i;break;default:t=i}return t},Us=function(e,t,n,r,o){var i=G(t.props.children,Es).filter((function(e){return function(e,t,n){return!!s()(t)||("horizontal"===e?"yAxis"===t:"vertical"===e||"x"===n?"xAxis"===t:"y"!==n||"yAxis"===t)}(r,o,e.props.direction)}));if(i&&i.length){var a=i.map((function(e){return e.props.dataKey}));return e.reduce((function(e,t){var r=Bs(t,n,0),o=Array.isArray(r)?[Vc()(r),Wc()(r)]:[r,r],i=a.reduce((function(e,n){var r=Bs(t,n,0),i=o[0]-Math.abs(Array.isArray(r)?r[0]:r),a=o[1]+Math.abs(Array.isArray(r)?r[1]:r);return[Math.min(i,e[0]),Math.max(a,e[1])]}),[1/0,-1/0]);return[Math.min(i[0],e[0]),Math.max(i[1],e[1])]}),[1/0,-1/0])}return null},Ws=function(e,t,n,r,o){var i=t.map((function(t){var i=t.props.dataKey;return"number"===n&&i&&Us(e,t,i,r)||zs(e,i,n,o)}));if("number"===n)return i.reduce((function(e,t){return[Math.min(e[0],t[0]),Math.max(e[1],t[1])]}),[1/0,-1/0]);var a={};return i.reduce((function(e,t){for(var n=0,r=t.length;n<r;n++)a[t[n]]||(a[t[n]]=!0,e.push(t[n]));return e}),[])},$s=function(e,t){return"horizontal"===e&&"xAxis"===t||"vertical"===e&&"yAxis"===t||"centric"===e&&"angleAxis"===t||"radial"===e&&"radiusAxis"===t},Vs=function(e,t,n,r){if(r)return e.map((function(e){return e.coordinate}));var o,i,a=e.map((function(e){return e.coordinate===t&&(o=!0),e.coordinate===n&&(i=!0),e.coordinate}));return o||a.push(t),i||a.push(n),a},Hs=function(e,t,n){if(!e)return null;var r=e.scale,o=e.duplicateDomain,i=e.type,a=e.range,l="scaleBand"===e.realScaleType?r.bandwidth()/2:2,u=(t||n)&&"category"===i&&r.bandwidth?r.bandwidth()/l:0;return u="angleAxis"===e.axisType&&(null==a?void 0:a.length)>=2?2*O(a[0]-a[1])*u:u,t&&(e.ticks||e.niceTicks)?(e.ticks||e.niceTicks).map((function(e){var t=o?o.indexOf(e):e;return{coordinate:r(t)+u,value:e,offset:u}})).filter((function(e){return!b()(e.coordinate)})):e.isCategorical&&e.categoricalDomain?e.categoricalDomain.map((function(e,t){return{coordinate:r(e)+u,value:e,index:t,offset:u}})):r.ticks&&!n?r.ticks(e.tickCount).map((function(e){return{coordinate:r(e)+u,value:e,offset:u}})):r.domain().map((function(e,t){return{coordinate:r(e)+u,value:o?o[e]:e,index:t,offset:u}}))},qs=new WeakMap,Ks=function(e,t){if("function"!=typeof t)return e;qs.has(e)||qs.set(e,new WeakMap);var n=qs.get(e);if(n.has(t))return n.get(t);var r=function(){e.apply(void 0,arguments),t.apply(void 0,arguments)};return n.set(t,r),r},Xs=function(e,t,n){var o=e.scale,i=e.type,a=e.layout,l=e.axisType;if("auto"===o)return"radial"===a&&"radiusAxis"===l?{scale:$o(),realScaleType:"band"}:"radial"===a&&"angleAxis"===l?{scale:ja(),realScaleType:"linear"}:"category"===i&&t&&(t.indexOf("LineChart")>=0||t.indexOf("AreaChart")>=0||t.indexOf("ComposedChart")>=0&&!n)?{scale:Ho(),realScaleType:"point"}:"category"===i?{scale:$o(),realScaleType:"band"}:{scale:ja(),realScaleType:"linear"};if(p()(o)){var u="scale".concat(he()(o));return{scale:(r[u]||Ho)(),realScaleType:r[u]?u:"point"}}return h()(o)?{scale:o}:{scale:Ho(),realScaleType:"point"}},Gs=1e-4,Ys=function(e){var t=e.domain();if(t&&!(t.length<=2)){var n=t.length,r=e.range(),o=Math.min(r[0],r[1])-Gs,i=Math.max(r[0],r[1])+Gs,a=e(t[0]),l=e(t[n-1]);(a<o||a>i||l<o||l>i)&&e.domain([t[0],t[n-1]])}},Qs=function(e,t){if(!e)return null;for(var n=0,r=e.length;n<r;n++)if(e[n].item===t)return e[n].position;return null},Zs=function(e,t){if(!t||2!==t.length||!A(t[0])||!A(t[1]))return e;var n=Math.min(t[0],t[1]),r=Math.max(t[0],t[1]),o=[e[0],e[1]];return(!A(e[0])||e[0]<n)&&(o[0]=n),(!A(e[1])||e[1]>r)&&(o[1]=r),o[0]>r&&(o[0]=r),o[1]<n&&(o[1]=n),o},Js={sign:function(e){var t=e.length;if(!(t<=0))for(var n=0,r=e[0].length;n<r;++n)for(var o=0,i=0,a=0;a<t;++a){var l=b()(e[a][n][1])?e[a][n][0]:e[a][n][1];l>=0?(e[a][n][0]=o,e[a][n][1]=o+l,o=e[a][n][1]):(e[a][n][0]=i,e[a][n][1]=i+l,i=e[a][n][1])}},expand:function(e,t){if((r=e.length)>0){for(var n,r,o,i=0,a=e[0].length;i<a;++i){for(o=n=0;n<r;++n)o+=e[n][i][1]||0;if(o)for(n=0;n<r;++n)e[n][i][1]/=o}Rc(e,t)}},none:Rc,silhouette:function(e,t){if((n=e.length)>0){for(var n,r=0,o=e[t[0]],i=o.length;r<i;++r){for(var a=0,l=0;a<n;++a)l+=e[a][r][1]||0;o[r][1]+=o[r][0]=-l/2}Rc(e,t)}},wiggle:function(e,t){if((o=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,o,i=0,a=1;a<r;++a){for(var l=0,u=0,c=0;l<o;++l){for(var s=e[t[l]],f=s[a][1]||0,p=(f-(s[a-1][1]||0))/2,d=0;d<l;++d){var h=e[t[d]];p+=(h[a][1]||0)-(h[a-1][1]||0)}u+=f,c+=p*f}n[a-1][1]+=n[a-1][0]=i,u&&(i-=c/u)}n[a-1][1]+=n[a-1][0]=i,Rc(e,t)}},positive:function(e){var t=e.length;if(!(t<=0))for(var n=0,r=e[0].length;n<r;++n)for(var o=0,i=0;i<t;++i){var a=b()(e[i][n][1])?e[i][n][0]:e[i][n][1];a>=0?(e[i][n][0]=o,e[i][n][1]=o+a,o=e[i][n][1]):(e[i][n][0]=0,e[i][n][1]=0)}}},ef=function(e,t,n){var r=t.map((function(e){return e.props.dataKey})),o=Js[n],i=function(){var e=Le([]),t=Bc,n=Rc,r=zc;function o(o){var i,a,l=Array.from(e.apply(this,arguments),Fc),u=l.length,c=-1;for(const e of o)for(i=0,++c;i<u;++i)(l[i][c]=[0,+r(e,l[i].key,c,o)]).data=e;for(i=0,a=Lc(t(l));i<u;++i)l[a[i]].index=i;return n(l,a),l}return o.keys=function(t){return arguments.length?(e="function"==typeof t?t:Le(Array.from(t)),o):e},o.value=function(e){return arguments.length?(r="function"==typeof e?e:Le(+e),o):r},o.order=function(e){return arguments.length?(t=null==e?Bc:"function"==typeof e?e:Le(Array.from(e)),o):t},o.offset=function(e){return arguments.length?(n=null==e?Rc:e,o):n},o}().keys(r).value((function(e,t){return+Bs(e,t,0)})).order(Bc).offset(o);return i(e)},tf=function(e,t){var n=t.realScaleType,r=t.type,o=t.tickCount,i=t.originalDomain,a=t.allowDecimals,l=n||t.scale;if("auto"!==l&&"linear"!==l)return null;if(o&&"number"===r&&i&&("auto"===i[0]||"auto"===i[1])){var u=e.domain();if(!u.length)return null;var c=ws(u,o,a);return e.domain([Vc()(c),Wc()(c)]),{niceTicks:c}}if(o&&"number"===r){var s=e.domain();return{niceTicks:Os(s,o,a)}}return null},nf=function(e){var t=e.axis,n=e.ticks,r=e.bandSize,o=e.entry,i=e.index,a=e.dataKey;if("category"===t.type){if(!t.allowDuplicatedCategory&&t.dataKey&&!s()(o[t.dataKey])){var l=T(n,"value",o[t.dataKey]);if(l)return l.coordinate+r/2}return n[i]?n[i].coordinate+r/2:null}var u=Bs(o,s()(a)?t.dataKey:a);return s()(u)?null:t.scale(u)},rf=function(e){var t=e.axis,n=e.ticks,r=e.offset,o=e.bandSize,i=e.entry,a=e.index;if("category"===t.type)return n[a]?n[a].coordinate+r:null;var l=Bs(i,t.dataKey,t.domain[a]);return s()(l)?null:t.scale(l)-o/2+r},of=function(e){var t=e.numericAxis,n=t.scale.domain();if("number"===t.type){var r=Math.min(n[0],n[1]),o=Math.max(n[0],n[1]);return r<=0&&o>=0?0:o<0?o:r}return n[0]},af=function(e,t,n){return Object.keys(e).reduce((function(r,o){var i=e[o].stackedData.reduce((function(e,r){var o=r.slice(t,n+1).reduce((function(e,t){return[Vc()(t.concat([e[0]]).filter(A)),Wc()(t.concat([e[1]]).filter(A))]}),[1/0,-1/0]);return[Math.min(e[0],o[0]),Math.max(e[1],o[1])]}),[1/0,-1/0]);return[Math.min(i[0],r[0]),Math.max(i[1],r[1])]}),[1/0,-1/0]).map((function(e){return e===1/0||e===-1/0?0:e}))},lf=/^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,uf=/^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/,cf=function(e,t,n){if(h()(e))return e(t,n);if(!Array.isArray(e))return t;var r=[];if(A(e[0]))r[0]=n?e[0]:Math.min(e[0],t[0]);else if(lf.test(e[0])){var o=+lf.exec(e[0])[1];r[0]=t[0]-o}else h()(e[0])?r[0]=e[0](t[0]):r[0]=t[0];if(A(e[1]))r[1]=n?e[1]:Math.max(e[1],t[1]);else if(uf.test(e[1])){var i=+uf.exec(e[1])[1];r[1]=t[1]+i}else h()(e[1])?r[1]=e[1](t[1]):r[1]=t[1];return r},sf=function(e,t,n){if(e&&e.scale&&e.scale.bandwidth){var r=e.scale.bandwidth();if(!n||r>0)return r}if(e&&t&&t.length>=2){for(var o=Et()(t,(function(e){return e.coordinate})),i=1/0,a=1,l=o.length;a<l;a++){var u=o[a],c=o[a-1];i=Math.min((u.coordinate||0)-(c.coordinate||0),i)}return i===1/0?0:i}return n?void 0:0},ff=function(e,t,n){return e&&e.length?Xc()(e,u()(n,"type.defaultProps.domain"))?t:e:t},pf=function(e,t){var n=e.props,r=n.dataKey,o=n.name,i=n.unit,a=n.formatter,l=n.tooltipType,u=n.chartType;return Is(Is({},ne(e)),{},{dataKey:r,unit:i,formatter:a,name:o||r,color:Fs(e),value:Bs(t,r),type:l,payload:t,chartType:u})};function df(e){return df="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},df(e)}function hf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hf(Object(n),!0).forEach((function(t){vf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function vf(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==df(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==df(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===df(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function mf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var gf=Math.PI/180,bf=function(e){return 180*e/Math.PI},xf=function(e,t,n,r){return{x:e+Math.cos(-gf*r)*n,y:t+Math.sin(-gf*r)*n}},wf=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{top:0,right:0,bottom:0,left:0};return Math.min(Math.abs(e-(n.left||0)-(n.right||0)),Math.abs(t-(n.top||0)-(n.bottom||0)))/2},Of=function(e,t,n,r,o){var i=e.width,a=e.height,l=e.startAngle,u=e.endAngle,c=P(e.cx,i,i/2),f=P(e.cy,a,a/2),p=wf(i,a,n),d=P(e.innerRadius,p,0),h=P(e.outerRadius,p,.8*p);return Object.keys(t).reduce((function(e,n){var i,a,p,y=t[n],v=y.domain,m=y.reversed;if(s()(y.range))"angleAxis"===r?i=[l,u]:"radiusAxis"===r&&(i=[d,h]),m&&(i=[i[1],i[0]]);else{var g=(a=i=y.range,p=2,function(e){if(Array.isArray(e))return e}(a)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(a,p)||function(e,t){if(e){if("string"==typeof e)return mf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mf(e,t):void 0}}(a,p)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());l=g[0],u=g[1]}var b=Xs(y,o),x=b.realScaleType,w=b.scale;w.domain(v).range(i),Ys(w);var O=tf(w,yf(yf({},y),{},{realScaleType:x})),S=yf(yf(yf({},y),O),{},{range:i,radius:h,realScaleType:x,scale:w,cx:c,cy:f,innerRadius:d,outerRadius:h,startAngle:l,endAngle:u});return yf(yf({},e),{},vf({},n,S))}),{})},Sf=function(e,t){var n=t.startAngle,r=t.endAngle,o=Math.floor(n/360),i=Math.floor(r/360);return e+360*Math.min(o,i)},Af=function(e,t){var n=function(e,t){var n=e.x,r=e.y,o=t.cx,i=t.cy,a=function(e,t){var n=e.x,r=e.y,o=t.x,i=t.y;return Math.sqrt(Math.pow(n-o,2)+Math.pow(r-i,2))}({x:n,y:r},{x:o,y:i});if(a<=0)return{radius:a};var l=(n-o)/a,u=Math.acos(l);return r>i&&(u=2*Math.PI-u),{radius:a,angle:bf(u),angleInRadian:u}}({x:e.x,y:e.y},t),r=n.radius,o=n.angle,i=t.innerRadius,a=t.outerRadius;if(r<i||r>a)return!1;if(0===r)return!0;var l,u=function(e){var t=e.startAngle,n=e.endAngle,r=Math.floor(t/360),o=Math.floor(n/360),i=Math.min(r,o);return{startAngle:t-360*i,endAngle:n-360*i}}(t),c=u.startAngle,s=u.endAngle,f=o;if(c<=s){for(;f>s;)f-=360;for(;f<c;)f+=360;l=f>=c&&f<=s}else{for(;f>c;)f-=360;for(;f<s;)f+=360;l=f>=s&&f<=c}return l?yf(yf({},t),{},{radius:r,angle:Sf(f,t)}):null};function kf(e){return kf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kf(e)}var Ef=["offset"];function jf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Pf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pf(Object(n),!0).forEach((function(t){_f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _f(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==kf(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==kf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===kf(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Tf(){return Tf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Tf.apply(this,arguments)}var Mf=function(e){var t=e.value,n=e.formatter,r=s()(e.children)?t:e.children;return h()(n)?n(r):r},Nf=function(e,t,n){var r,i,l=e.position,u=e.viewBox,c=e.offset,f=e.className,p=u,d=p.cx,h=p.cy,y=p.innerRadius,v=p.outerRadius,m=p.startAngle,g=p.endAngle,b=p.clockWise,x=(y+v)/2,w=function(e,t){return O(t-e)*Math.min(Math.abs(t-e),360)}(m,g),S=w>=0?1:-1;"insideStart"===l?(r=m+S*c,i=b):"insideEnd"===l?(r=g-S*c,i=!b):"end"===l&&(r=g+S*c,i=b),i=w<=0?i:!i;var A=xf(d,h,x,r),k=xf(d,h,x,r+359*(i?1:-1)),E="M".concat(A.x,",").concat(A.y,"\n    A").concat(x,",").concat(x,",0,1,").concat(i?0:1,",\n    ").concat(k.x,",").concat(k.y),P=s()(e.id)?j("recharts-radial-line-"):e.id;return o.createElement("text",Tf({},n,{dominantBaseline:"central",className:a("recharts-radial-bar-label",f)}),o.createElement("defs",null,o.createElement("path",{id:P,d:E})),o.createElement("textPath",{xlinkHref:"#".concat(P)},t))},If=function(e){var t=e.viewBox,n=e.offset,r=e.position,o=t,i=o.cx,a=o.cy,l=o.innerRadius,u=o.outerRadius,c=(o.startAngle+o.endAngle)/2;if("outside"===r){var s=xf(i,a,u+n,c),f=s.x;return{x:f,y:s.y,textAnchor:f>=i?"start":"end",verticalAnchor:"middle"}}if("center"===r)return{x:i,y:a,textAnchor:"middle",verticalAnchor:"middle"};if("centerTop"===r)return{x:i,y:a,textAnchor:"middle",verticalAnchor:"start"};if("centerBottom"===r)return{x:i,y:a,textAnchor:"middle",verticalAnchor:"end"};var p=xf(i,a,(l+u)/2,c);return{x:p.x,y:p.y,textAnchor:"middle",verticalAnchor:"middle"}},Df=function(e){var t=e.viewBox,n=e.parentViewBox,r=e.offset,o=e.position,i=t,a=i.x,l=i.y,u=i.width,c=i.height,s=c>=0?1:-1,f=s*r,p=s>0?"end":"start",d=s>0?"start":"end",h=u>=0?1:-1,y=h*r,m=h>0?"end":"start",g=h>0?"start":"end";if("top"===o)return Cf(Cf({},{x:a+u/2,y:l-s*r,textAnchor:"middle",verticalAnchor:p}),n?{height:Math.max(l-n.y,0),width:u}:{});if("bottom"===o)return Cf(Cf({},{x:a+u/2,y:l+c+f,textAnchor:"middle",verticalAnchor:d}),n?{height:Math.max(n.y+n.height-(l+c),0),width:u}:{});if("left"===o){var b={x:a-y,y:l+c/2,textAnchor:m,verticalAnchor:"middle"};return Cf(Cf({},b),n?{width:Math.max(b.x-n.x,0),height:c}:{})}if("right"===o){var x={x:a+u+y,y:l+c/2,textAnchor:g,verticalAnchor:"middle"};return Cf(Cf({},x),n?{width:Math.max(n.x+n.width-x.x,0),height:c}:{})}var w=n?{width:u,height:c}:{};return"insideLeft"===o?Cf({x:a+y,y:l+c/2,textAnchor:g,verticalAnchor:"middle"},w):"insideRight"===o?Cf({x:a+u-y,y:l+c/2,textAnchor:m,verticalAnchor:"middle"},w):"insideTop"===o?Cf({x:a+u/2,y:l+f,textAnchor:"middle",verticalAnchor:d},w):"insideBottom"===o?Cf({x:a+u/2,y:l+c-f,textAnchor:"middle",verticalAnchor:p},w):"insideTopLeft"===o?Cf({x:a+y,y:l+f,textAnchor:g,verticalAnchor:d},w):"insideTopRight"===o?Cf({x:a+u-y,y:l+f,textAnchor:m,verticalAnchor:d},w):"insideBottomLeft"===o?Cf({x:a+y,y:l+c-f,textAnchor:g,verticalAnchor:p},w):"insideBottomRight"===o?Cf({x:a+u-y,y:l+c-f,textAnchor:m,verticalAnchor:p},w):v()(o)&&(A(o.x)||S(o.x))&&(A(o.y)||S(o.y))?Cf({x:a+P(o.x,u),y:l+P(o.y,c),textAnchor:"end",verticalAnchor:"end"},w):Cf({x:a+u/2,y:l+c/2,textAnchor:"middle",verticalAnchor:"middle"},w)},Rf=function(e){return"cx"in e&&A(e.cx)};function Lf(e){var t,n=e.offset,r=Cf({offset:void 0===n?5:n},function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Ef)),i=r.viewBox,l=r.position,u=r.value,c=r.children,f=r.content,p=r.className,d=void 0===p?"":p,y=r.textBreakAll;if(!i||s()(u)&&s()(c)&&!(0,o.isValidElement)(f)&&!h()(f))return null;if((0,o.isValidElement)(f))return(0,o.cloneElement)(f,r);if(h()(f)){if(t=(0,o.createElement)(f,r),(0,o.isValidElement)(t))return t}else t=Mf(r);var v=Rf(i),m=ne(r,!0);if(v&&("insideStart"===l||"insideEnd"===l||"end"===l))return Nf(r,t,m);var g=v?If(r):Df(r);return o.createElement(Do,Tf({className:a("recharts-label",d)},m,g,{breakAll:y}),t)}Lf.displayName="Label";var Bf=function(e){var t=e.cx,n=e.cy,r=e.angle,o=e.startAngle,i=e.endAngle,a=e.r,l=e.radius,u=e.innerRadius,c=e.outerRadius,s=e.x,f=e.y,p=e.top,d=e.left,h=e.width,y=e.height,v=e.clockWise,m=e.labelViewBox;if(m)return m;if(A(h)&&A(y)){if(A(s)&&A(f))return{x:s,y:f,width:h,height:y};if(A(p)&&A(d))return{x:p,y:d,width:h,height:y}}return A(s)&&A(f)?{x:s,y:f,width:0,height:0}:A(t)&&A(n)?{cx:t,cy:n,startAngle:o||r||0,endAngle:i||r||0,innerRadius:u||0,outerRadius:c||l||a||0,clockWise:v}:e.viewBox?e.viewBox:{}};Lf.parseViewBox=Bf,Lf.renderCallByParent=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(!e||!e.children&&n&&!e.label)return null;var r=e.children,i=Bf(e),a=G(r,Lf).map((function(e,n){return(0,o.cloneElement)(e,{viewBox:t||i,key:"label-".concat(n)})}));if(!n)return a;var l,u=function(e,t){return e?!0===e?o.createElement(Lf,{key:"label-implicit",viewBox:t}):k(e)?o.createElement(Lf,{key:"label-implicit",viewBox:t,value:e}):(0,o.isValidElement)(e)?e.type===Lf?(0,o.cloneElement)(e,{key:"label-implicit",viewBox:t}):o.createElement(Lf,{key:"label-implicit",content:e,viewBox:t}):h()(e)?o.createElement(Lf,{key:"label-implicit",content:e,viewBox:t}):v()(e)?o.createElement(Lf,Tf({viewBox:t},e,{key:"label-implicit"})):null:null}(e.label,t||i);return[u].concat(function(e){if(Array.isArray(e))return jf(e)}(l=a)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(l)||function(e,t){if(e){if("string"==typeof e)return jf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jf(e,t):void 0}}(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())};var zf=n(928),Ff=n.n(zf);function Uf(e){return Uf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Uf(e)}var Wf=["valueAccessor"],$f=["data","dataKey","clockWise","id","textBreakAll"];function Vf(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Hf(){return Hf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Hf.apply(this,arguments)}function qf(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kf(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qf(Object(n),!0).forEach((function(t){Xf(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qf(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xf(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Uf(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Uf(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Uf(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Gf(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Yf=function(e){return Array.isArray(e.value)?Ff()(e.value):e.value};function Qf(e){var t=e.valueAccessor,n=void 0===t?Yf:t,r=Gf(e,Wf),i=r.data,a=r.dataKey,l=r.clockWise,u=r.id,c=r.textBreakAll,f=Gf(r,$f);return i&&i.length?o.createElement(fe,{className:"recharts-label-list"},i.map((function(e,t){var r=s()(a)?n(e,t):Bs(e&&e.payload,a),i=s()(u)?{}:{id:"".concat(u,"-").concat(t)};return o.createElement(Lf,Hf({},ne(e,!0),f,i,{parentViewBox:e.parentViewBox,value:r,textBreakAll:c,viewBox:Lf.parseViewBox(s()(l)?e:Kf(Kf({},e),{},{clockWise:l})),key:"label-".concat(t),index:t}))}))):null}Qf.displayName="LabelList",Qf.renderCallByParent=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(!e||!e.children&&n&&!e.label)return null;var r,i=G(e.children,Qf).map((function(e,n){return(0,o.cloneElement)(e,{data:t,key:"labelList-".concat(n)})}));return n?[function(e,t){return e?!0===e?o.createElement(Qf,{key:"labelList-implicit",data:t}):o.isValidElement(e)||h()(e)?o.createElement(Qf,{key:"labelList-implicit",data:t,content:e}):v()(e)?o.createElement(Qf,Hf({data:t},e,{key:"labelList-implicit"})):null:null}(e.label,t)].concat(function(e){if(Array.isArray(e))return Vf(e)}(r=i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,t){if(e){if("string"==typeof e)return Vf(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Vf(e,t):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()):i};var Zf=["component"];function Jf(e){return Jf="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jf(e)}function ep(e){var t,n=e.component,r=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Zf);return(0,o.isValidElement)(n)?t=(0,o.cloneElement)(n,r):h()(n)?t=(0,o.createElement)(n,r):pe(!1,"Customized's props `component` must be React.element or Function, but got %s.",Jf(n)),o.createElement(fe,{className:"recharts-customized-wrapper"},t)}function tp(e){return tp="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tp(e)}function np(){return np=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},np.apply(this,arguments)}function rp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function op(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?rp(Object(n),!0).forEach((function(t){ip(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):rp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ip(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==tp(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==tp(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===tp(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}ep.displayName="Customized";var ap=function(e){var t=e.cx,n=e.cy,r=e.radius,o=e.angle,i=e.sign,a=e.isExternal,l=e.cornerRadius,u=e.cornerIsExternal,c=l*(a?1:-1)+r,s=Math.asin(l/c)/gf,f=u?o:o+i*s,p=u?o-i*s:o;return{center:xf(t,n,c,f),circleTangency:xf(t,n,r,f),lineTangency:xf(t,n,c*Math.cos(s*gf),p),theta:s}},lp=function(e){var t=e.cx,n=e.cy,r=e.innerRadius,o=e.outerRadius,i=e.startAngle,a=function(e,t){return O(t-e)*Math.min(Math.abs(t-e),359.999)}(i,e.endAngle),l=i+a,u=xf(t,n,o,i),c=xf(t,n,o,l),s="M ".concat(u.x,",").concat(u.y,"\n    A ").concat(o,",").concat(o,",0,\n    ").concat(+(Math.abs(a)>180),",").concat(+(i>l),",\n    ").concat(c.x,",").concat(c.y,"\n  ");if(r>0){var f=xf(t,n,r,i),p=xf(t,n,r,l);s+="L ".concat(p.x,",").concat(p.y,"\n            A ").concat(r,",").concat(r,",0,\n            ").concat(+(Math.abs(a)>180),",").concat(+(i<=l),",\n            ").concat(f.x,",").concat(f.y," Z")}else s+="L ".concat(t,",").concat(n," Z");return s},up={cx:0,cy:0,innerRadius:0,outerRadius:0,startAngle:0,endAngle:0,cornerRadius:0,forceCornerRadius:!1,cornerIsExternal:!1},cp=function(e){var t=op(op({},up),e),n=t.cx,r=t.cy,i=t.innerRadius,l=t.outerRadius,u=t.cornerRadius,c=t.forceCornerRadius,s=t.cornerIsExternal,f=t.startAngle,p=t.endAngle,d=t.className;if(l<i||f===p)return null;var h,y=a("recharts-sector",d),v=l-i,m=P(u,v,0,!0);return h=m>0&&Math.abs(f-p)<360?function(e){var t=e.cx,n=e.cy,r=e.innerRadius,o=e.outerRadius,i=e.cornerRadius,a=e.forceCornerRadius,l=e.cornerIsExternal,u=e.startAngle,c=e.endAngle,s=O(c-u),f=ap({cx:t,cy:n,radius:o,angle:u,sign:s,cornerRadius:i,cornerIsExternal:l}),p=f.circleTangency,d=f.lineTangency,h=f.theta,y=ap({cx:t,cy:n,radius:o,angle:c,sign:-s,cornerRadius:i,cornerIsExternal:l}),v=y.circleTangency,m=y.lineTangency,g=y.theta,b=l?Math.abs(u-c):Math.abs(u-c)-h-g;if(b<0)return a?"M ".concat(d.x,",").concat(d.y,"\n        a").concat(i,",").concat(i,",0,0,1,").concat(2*i,",0\n        a").concat(i,",").concat(i,",0,0,1,").concat(2*-i,",0\n      "):lp({cx:t,cy:n,innerRadius:r,outerRadius:o,startAngle:u,endAngle:c});var x="M ".concat(d.x,",").concat(d.y,"\n    A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(p.x,",").concat(p.y,"\n    A").concat(o,",").concat(o,",0,").concat(+(b>180),",").concat(+(s<0),",").concat(v.x,",").concat(v.y,"\n    A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(m.x,",").concat(m.y,"\n  ");if(r>0){var w=ap({cx:t,cy:n,radius:r,angle:u,sign:s,isExternal:!0,cornerRadius:i,cornerIsExternal:l}),S=w.circleTangency,A=w.lineTangency,k=w.theta,E=ap({cx:t,cy:n,radius:r,angle:c,sign:-s,isExternal:!0,cornerRadius:i,cornerIsExternal:l}),j=E.circleTangency,P=E.lineTangency,C=E.theta,_=l?Math.abs(u-c):Math.abs(u-c)-k-C;if(_<0&&0===i)return"".concat(x,"L").concat(t,",").concat(n,"Z");x+="L".concat(P.x,",").concat(P.y,"\n      A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(j.x,",").concat(j.y,"\n      A").concat(r,",").concat(r,",0,").concat(+(_>180),",").concat(+(s>0),",").concat(S.x,",").concat(S.y,"\n      A").concat(i,",").concat(i,",0,0,").concat(+(s<0),",").concat(A.x,",").concat(A.y,"Z")}else x+="L".concat(t,",").concat(n,"Z");return x}({cx:n,cy:r,innerRadius:i,outerRadius:l,cornerRadius:Math.min(m,v/2),forceCornerRadius:c,cornerIsExternal:s,startAngle:f,endAngle:p}):lp({cx:n,cy:r,innerRadius:i,outerRadius:l,startAngle:f,endAngle:p}),o.createElement("path",np({},ne(t,!0),{className:y,d:h,role:"img"}))};function sp(){}function fp(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function pp(e){this._context=e}function dp(e){this._context=e}function hp(e){this._context=e}pp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:fp(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:fp(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},dp.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:fp(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}},hp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:fp(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};class yp{constructor(e,t){this._context=e,this._x=t}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+e)/2,this._y0,this._x0,t,e,t):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+t)/2,e,this._y0,e,t)}this._x0=e,this._y0=t}}function vp(e){this._context=e}function mp(e){this._context=e}function gp(e){return new mp(e)}function bp(e){return e<0?-1:1}function xp(e,t,n){var r=e._x1-e._x0,o=t-e._x1,i=(e._y1-e._y0)/(r||o<0&&-0),a=(n-e._y1)/(o||r<0&&-0),l=(i*o+a*r)/(r+o);return(bp(i)+bp(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(l))||0}function wp(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Op(e,t,n){var r=e._x0,o=e._y0,i=e._x1,a=e._y1,l=(i-r)/3;e._context.bezierCurveTo(r+l,o+l*t,i-l,a-l*n,i,a)}function Sp(e){this._context=e}function Ap(e){this._context=new kp(e)}function kp(e){this._context=e}function Ep(e){this._context=e}function jp(e){var t,n,r=e.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=e[0]+2*e[1],t=1;t<r-1;++t)o[t]=1,i[t]=4,a[t]=4*e[t]+2*e[t+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=o[t]/i[t-1],i[t]-=n,a[t]-=n*a[t-1];for(o[r-1]=a[r-1]/i[r-1],t=r-2;t>=0;--t)o[t]=(a[t]-o[t+1])/i[t];for(i[r-1]=(e[r]+o[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-o[t+1];return[o,i]}function Pp(e,t){this._context=e,this._t=t}function Cp(e){return e[0]}function _p(e){return e[1]}function Tp(e,t){var n=Le(!0),r=null,o=gp,i=null,a=Ve(l);function l(l){var u,c,s,f=(l=Lc(l)).length,p=!1;for(null==r&&(i=o(s=a())),u=0;u<=f;++u)!(u<f&&n(c=l[u],u,l))===p&&((p=!p)?i.lineStart():i.lineEnd()),p&&i.point(+e(c,u,l),+t(c,u,l));if(s)return i=null,s+""||null}return e="function"==typeof e?e:void 0===e?Cp:Le(e),t="function"==typeof t?t:void 0===t?_p:Le(t),l.x=function(t){return arguments.length?(e="function"==typeof t?t:Le(+t),l):e},l.y=function(e){return arguments.length?(t="function"==typeof e?e:Le(+e),l):t},l.defined=function(e){return arguments.length?(n="function"==typeof e?e:Le(!!e),l):n},l.curve=function(e){return arguments.length?(o=e,null!=r&&(i=o(r)),l):o},l.context=function(e){return arguments.length?(null==e?r=i=null:i=o(r=e),l):r},l}function Mp(e,t,n){var r=null,o=Le(!0),i=null,a=gp,l=null,u=Ve(c);function c(c){var s,f,p,d,h,y=(c=Lc(c)).length,v=!1,m=new Array(y),g=new Array(y);for(null==i&&(l=a(h=u())),s=0;s<=y;++s){if(!(s<y&&o(d=c[s],s,c))===v)if(v=!v)f=s,l.areaStart(),l.lineStart();else{for(l.lineEnd(),l.lineStart(),p=s-1;p>=f;--p)l.point(m[p],g[p]);l.lineEnd(),l.areaEnd()}v&&(m[s]=+e(d,s,c),g[s]=+t(d,s,c),l.point(r?+r(d,s,c):m[s],n?+n(d,s,c):g[s]))}if(h)return l=null,h+""||null}function s(){return Tp().defined(o).curve(a).context(i)}return e="function"==typeof e?e:void 0===e?Cp:Le(+e),t="function"==typeof t?t:Le(void 0===t?0:+t),n="function"==typeof n?n:void 0===n?_p:Le(+n),c.x=function(t){return arguments.length?(e="function"==typeof t?t:Le(+t),r=null,c):e},c.x0=function(t){return arguments.length?(e="function"==typeof t?t:Le(+t),c):e},c.x1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:Le(+e),c):r},c.y=function(e){return arguments.length?(t="function"==typeof e?e:Le(+e),n=null,c):t},c.y0=function(e){return arguments.length?(t="function"==typeof e?e:Le(+e),c):t},c.y1=function(e){return arguments.length?(n=null==e?null:"function"==typeof e?e:Le(+e),c):n},c.lineX0=c.lineY0=function(){return s().x(e).y(t)},c.lineY1=function(){return s().x(e).y(n)},c.lineX1=function(){return s().x(r).y(t)},c.defined=function(e){return arguments.length?(o="function"==typeof e?e:Le(!!e),c):o},c.curve=function(e){return arguments.length?(a=e,null!=i&&(l=a(i)),c):a},c.context=function(e){return arguments.length?(null==e?i=l=null:l=a(i=e),c):i},c}function Np(e){return Np="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Np(e)}function Ip(){return Ip=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ip.apply(this,arguments)}function Dp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dp(Object(n),!0).forEach((function(t){Lp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Lp(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Np(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Np(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Np(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}vp.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}},mp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},Sp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Op(this,this._t0,wp(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Op(this,wp(this,n=xp(this,e,t)),n);break;default:Op(this,this._t0,n=xp(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(Ap.prototype=Object.create(Sp.prototype)).point=function(e,t){Sp.prototype.point.call(this,t,e)},kp.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,o,i){this._context.bezierCurveTo(t,e,r,n,i,o)}},Ep.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=jp(e),o=jp(t),i=0,a=1;a<n;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],e[a],t[a]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}},Pp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var Bp={curveBasisClosed:function(e){return new dp(e)},curveBasisOpen:function(e){return new hp(e)},curveBasis:function(e){return new pp(e)},curveBumpX:function(e){return new yp(e,!0)},curveBumpY:function(e){return new yp(e,!1)},curveLinearClosed:function(e){return new vp(e)},curveLinear:gp,curveMonotoneX:function(e){return new Sp(e)},curveMonotoneY:function(e){return new Ap(e)},curveNatural:function(e){return new Ep(e)},curveStep:function(e){return new Pp(e,.5)},curveStepAfter:function(e){return new Pp(e,1)},curveStepBefore:function(e){return new Pp(e,0)}},zp=function(e){return e.x===+e.x&&e.y===+e.y},Fp=function(e){return e.x},Up=function(e){return e.y},Wp=function(e){var t=e.className,n=e.points,r=e.path,i=e.pathRef;if(!(n&&n.length||r))return null;var l=n&&n.length?function(e){var t,n=e.type,r=void 0===n?"linear":n,o=e.points,i=void 0===o?[]:o,a=e.baseLine,l=e.layout,u=e.connectNulls,c=void 0!==u&&u,s=function(e,t){if(h()(e))return e;var n="curve".concat(he()(e));return"curveMonotone"!==n&&"curveBump"!==n||!t?Bp[n]||gp:Bp["".concat(n).concat("vertical"===t?"Y":"X")]}(r,l),f=c?i.filter((function(e){return zp(e)})):i;if(Array.isArray(a)){var p=c?a.filter((function(e){return zp(e)})):a,d=f.map((function(e,t){return Rp(Rp({},e),{},{base:p[t]})}));return(t="vertical"===l?Mp().y(Up).x1(Fp).x0((function(e){return e.base.x})):Mp().x(Fp).y1(Up).y0((function(e){return e.base.y}))).defined(zp).curve(s),t(d)}return(t="vertical"===l&&A(a)?Mp().y(Up).x1(Fp).x0(a):A(a)?Mp().x(Fp).y1(Up).y0(a):Tp().x(Fp).y(Up)).defined(zp).curve(s),t(f)}(e):r;return o.createElement("path",Ip({},ne(e),B(e),{className:a("recharts-curve",t),d:l,ref:i}))};function $p(e){return $p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$p(e)}function Vp(){return Vp=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Vp.apply(this,arguments)}function Hp(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function qp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qp(Object(n),!0).forEach((function(t){Xp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xp(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==$p(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==$p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===$p(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Gp=function(e,t,n,r,o){var i,a=Math.min(Math.abs(n)/2,Math.abs(r)/2),l=r>=0?1:-1,u=n>=0?1:-1,c=r>=0&&n>=0||r<0&&n<0?1:0;if(a>0&&o instanceof Array){for(var s=[0,0,0,0],f=0;f<4;f++)s[f]=o[f]>a?a:o[f];i="M".concat(e,",").concat(t+l*s[0]),s[0]>0&&(i+="A ".concat(s[0],",").concat(s[0],",0,0,").concat(c,",").concat(e+u*s[0],",").concat(t)),i+="L ".concat(e+n-u*s[1],",").concat(t),s[1]>0&&(i+="A ".concat(s[1],",").concat(s[1],",0,0,").concat(c,",\n        ").concat(e+n,",").concat(t+l*s[1])),i+="L ".concat(e+n,",").concat(t+r-l*s[2]),s[2]>0&&(i+="A ".concat(s[2],",").concat(s[2],",0,0,").concat(c,",\n        ").concat(e+n-u*s[2],",").concat(t+r)),i+="L ".concat(e+u*s[3],",").concat(t+r),s[3]>0&&(i+="A ".concat(s[3],",").concat(s[3],",0,0,").concat(c,",\n        ").concat(e,",").concat(t+r-l*s[3])),i+="Z"}else if(a>0&&o===+o&&o>0){var p=Math.min(a,o);i="M ".concat(e,",").concat(t+l*p,"\n            A ").concat(p,",").concat(p,",0,0,").concat(c,",").concat(e+u*p,",").concat(t,"\n            L ").concat(e+n-u*p,",").concat(t,"\n            A ").concat(p,",").concat(p,",0,0,").concat(c,",").concat(e+n,",").concat(t+l*p,"\n            L ").concat(e+n,",").concat(t+r-l*p,"\n            A ").concat(p,",").concat(p,",0,0,").concat(c,",").concat(e+n-u*p,",").concat(t+r,"\n            L ").concat(e+u*p,",").concat(t+r,"\n            A ").concat(p,",").concat(p,",0,0,").concat(c,",").concat(e,",").concat(t+r-l*p," Z")}else i="M ".concat(e,",").concat(t," h ").concat(n," v ").concat(r," h ").concat(-n," Z");return i},Yp=function(e,t){if(!e||!t)return!1;var n=e.x,r=e.y,o=t.x,i=t.y,a=t.width,l=t.height;if(Math.abs(a)>0&&Math.abs(l)>0){var u=Math.min(o,o+a),c=Math.max(o,o+a),s=Math.min(i,i+l),f=Math.max(i,i+l);return n>=u&&n<=c&&r>=s&&r<=f}return!1},Qp={x:0,y:0,width:0,height:0,radius:0,isAnimationActive:!1,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},Zp=function(e){var t,n,r=Kp(Kp({},Qp),e),i=(0,o.useRef)(),l=(t=(0,o.useState)(-1),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Hp(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hp(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=l[0],c=l[1];(0,o.useEffect)((function(){if(i.current&&i.current.getTotalLength)try{var e=i.current.getTotalLength();e&&c(e)}catch(e){}}),[]);var s=r.x,f=r.y,p=r.width,d=r.height,h=r.radius,y=r.className,v=r.animationEasing,m=r.animationDuration,g=r.animationBegin,b=r.isAnimationActive,x=r.isUpdateAnimationActive;if(s!==+s||f!==+f||p!==+p||d!==+d||0===p||0===d)return null;var w=a("recharts-rectangle",y);return x?o.createElement(gr,{canBegin:u>0,from:{width:p,height:d,x:s,y:f},to:{width:p,height:d,x:s,y:f},duration:m,animationEasing:v,isActive:x},(function(e){var t=e.width,n=e.height,a=e.x,l=e.y;return o.createElement(gr,{canBegin:u>0,from:"0px ".concat(-1===u?1:u,"px"),to:"".concat(u,"px 0px"),attributeName:"strokeDasharray",begin:g,duration:m,isActive:b,easing:v},o.createElement("path",Vp({},ne(r,!0),{className:w,d:Gp(a,l,t,n,h),ref:i})))})):o.createElement("path",Vp({},ne(r,!0),{className:w,d:Gp(s,f,p,d,h)}))},Jp=["points","className","baseLinePoints","connectNulls"];function ed(){return ed=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ed.apply(this,arguments)}function td(e){return function(e){if(Array.isArray(e))return nd(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return nd(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?nd(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function nd(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var rd=function(e){return e&&e.x===+e.x&&e.y===+e.y},od=function(e,t){var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=[[]];return e.forEach((function(e){rd(e)?t[t.length-1].push(e):t[t.length-1].length>0&&t.push([])})),rd(e[0])&&t[t.length-1].push(e[0]),t[t.length-1].length<=0&&(t=t.slice(0,-1)),t}(e);t&&(n=[n.reduce((function(e,t){return[].concat(td(e),td(t))}),[])]);var r=n.map((function(e){return e.reduce((function(e,t,n){return"".concat(e).concat(0===n?"M":"L").concat(t.x,",").concat(t.y)}),"")})).join("");return 1===n.length?"".concat(r,"Z"):r},id=function(e){var t=e.points,n=e.className,r=e.baseLinePoints,i=e.connectNulls,l=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Jp);if(!t||!t.length)return null;var u=a("recharts-polygon",n);if(r&&r.length){var c=l.stroke&&"none"!==l.stroke,s=function(e,t,n){var r=od(e,n);return"".concat("Z"===r.slice(-1)?r.slice(0,-1):r,"L").concat(od(t.reverse(),n).slice(1))}(t,r,i);return o.createElement("g",{className:u},o.createElement("path",ed({},ne(l,!0),{fill:"Z"===s.slice(-1)?l.fill:"none",stroke:"none",d:s})),c?o.createElement("path",ed({},ne(l,!0),{fill:"none",d:od(t,i)})):null,c?o.createElement("path",ed({},ne(l,!0),{fill:"none",d:od(r,i)})):null)}var f=od(t,i);return o.createElement("path",ed({},ne(l,!0),{fill:"Z"===f.slice(-1)?l.fill:"none",className:u,d:f}))};function ad(){return ad=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ad.apply(this,arguments)}var ld=function(e){var t=e.cx,n=e.cy,r=e.r,i=e.className,l=a("recharts-dot",i);return t===+t&&n===+n&&r===+r?o.createElement("circle",ad({},ne(e),B(e),{className:l,cx:t,cy:n,r})):null};function ud(e){return ud="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ud(e)}var cd=["x","y","top","left","width","height","className"];function sd(){return sd=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},sd.apply(this,arguments)}function fd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pd(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ud(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ud(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ud(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var dd=function(e,t,n,r,o,i){return"M".concat(e,",").concat(o,"v").concat(r,"M").concat(i,",").concat(t,"h").concat(n)},hd=function(e){var t=e.x,n=void 0===t?0:t,r=e.y,i=void 0===r?0:r,l=e.top,u=void 0===l?0:l,c=e.left,s=void 0===c?0:c,f=e.width,p=void 0===f?0:f,d=e.height,h=void 0===d?0:d,y=e.className,v=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fd(Object(n),!0).forEach((function(t){pd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({x:n,y:i,top:u,left:s,width:p,height:h},function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,cd));return A(n)&&A(i)&&A(p)&&A(h)&&A(u)&&A(s)?o.createElement("path",sd({},ne(v,!0),{className:a("recharts-cross",y),d:dd(n,i,p,h,u,s)})):null},yd=["cx","cy","innerRadius","outerRadius","gridType","radialLines"];function vd(e){return vd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},vd(e)}function md(){return md=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},md.apply(this,arguments)}function gd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gd(Object(n),!0).forEach((function(t){xd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xd(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==vd(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==vd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===vd(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var wd=function(e,t,n,r){var o="";return r.forEach((function(r,i){var a=xf(t,n,e,r);o+=i?"L ".concat(a.x,",").concat(a.y):"M ".concat(a.x,",").concat(a.y)})),o+="Z"},Od=function(e){var t=e.cx,n=e.cy,r=e.innerRadius,i=e.outerRadius,a=e.polarAngles,l=e.radialLines;if(!a||!a.length||!l)return null;var u=bd({stroke:"#ccc"},ne(e));return o.createElement("g",{className:"recharts-polar-grid-angle"},a.map((function(e){var a=xf(t,n,r,e),l=xf(t,n,i,e);return o.createElement("line",md({},u,{key:"line-".concat(e),x1:a.x,y1:a.y,x2:l.x,y2:l.y}))})))},Sd=function(e){var t=e.cx,n=e.cy,r=e.radius,i=e.index,a=bd(bd({stroke:"#ccc"},ne(e)),{},{fill:"none"});return o.createElement("circle",md({},a,{className:"recharts-polar-grid-concentric-circle",key:"circle-".concat(i),cx:t,cy:n,r}))},Ad=function(e){var t=e.radius,n=e.index,r=bd(bd({stroke:"#ccc"},ne(e)),{},{fill:"none"});return o.createElement("path",md({},r,{className:"recharts-polar-grid-concentric-polygon",key:"path-".concat(n),d:wd(t,e.cx,e.cy,e.polarAngles)}))},kd=function(e){var t=e.polarRadius,n=e.gridType;return t&&t.length?o.createElement("g",{className:"recharts-polar-grid-concentric"},t.map((function(t,r){var i=r;return"circle"===n?o.createElement(Sd,md({key:i},e,{radius:t,index:r})):o.createElement(Ad,md({key:i},e,{radius:t,index:r}))}))):null},Ed=function(e){var t=e.cx,n=void 0===t?0:t,r=e.cy,i=void 0===r?0:r,a=e.innerRadius,l=void 0===a?0:a,u=e.outerRadius,c=void 0===u?0:u,s=e.gridType,f=void 0===s?"polygon":s,p=e.radialLines,d=void 0===p||p,h=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,yd);return c<=0?null:o.createElement("g",{className:"recharts-polar-grid"},o.createElement(Od,md({cx:n,cy:i,innerRadius:l,outerRadius:c,gridType:f,radialLines:d},h)),o.createElement(kd,md({cx:n,cy:i,innerRadius:l,outerRadius:c,gridType:f,radialLines:d},h)))};Ed.displayName="PolarGrid";var jd=n(4753),Pd=n.n(jd),Cd=n(2762),_d=n.n(Cd),Td=["cx","cy","angle","ticks","axisLine"],Md=["ticks","tick","angle","tickFormatter","stroke"];function Nd(e){return Nd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Nd(e)}function Id(){return Id=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Id.apply(this,arguments)}function Dd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Rd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dd(Object(n),!0).forEach((function(t){Ud(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ld(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Bd(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Wd(r.key),r)}}function zd(e,t){return zd=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},zd(e,t)}function Fd(e){return Fd=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Fd(e)}function Ud(e,t,n){return(t=Wd(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Wd(e){var t=function(e,t){if("object"!==Nd(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Nd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Nd(t)?t:String(t)}var $d=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&zd(e,t)}(u,e);var t,n,r,i,a,l=(i=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Fd(i);if(a){var n=Fd(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Nd(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),l.apply(this,arguments)}return t=u,n=[{key:"getTickValueCoord",value:function(e){var t=e.coordinate,n=this.props,r=n.angle,o=n.cx,i=n.cy;return xf(o,i,t,r)}},{key:"getTickTextAnchor",value:function(){var e;switch(this.props.orientation){case"left":e="end";break;case"right":e="start";break;default:e="middle"}return e}},{key:"getViewBox",value:function(){var e=this.props,t=e.cx,n=e.cy,r=e.angle,o=e.ticks,i=Pd()(o,(function(e){return e.coordinate||0}));return{cx:t,cy:n,startAngle:r,endAngle:r,innerRadius:_d()(o,(function(e){return e.coordinate||0})).coordinate||0,outerRadius:i.coordinate||0}}},{key:"renderAxisLine",value:function(){var e=this.props,t=e.cx,n=e.cy,r=e.angle,i=e.ticks,a=e.axisLine,l=Ld(e,Td),u=i.reduce((function(e,t){return[Math.min(e[0],t.coordinate),Math.max(e[1],t.coordinate)]}),[1/0,-1/0]),c=xf(t,n,u[0],r),s=xf(t,n,u[1],r),f=Rd(Rd(Rd({},ne(l)),{},{fill:"none"},ne(a)),{},{x1:c.x,y1:c.y,x2:s.x,y2:s.y});return o.createElement("line",Id({className:"recharts-polar-radius-axis-line"},f))}},{key:"renderTicks",value:function(){var e=this,t=this.props,n=t.ticks,r=t.tick,i=t.angle,a=t.tickFormatter,l=t.stroke,c=Ld(t,Md),s=this.getTickTextAnchor(),f=ne(c),p=ne(r),d=n.map((function(t,n){var c=e.getTickValueCoord(t),d=Rd(Rd(Rd(Rd({textAnchor:s,transform:"rotate(".concat(90-i,", ").concat(c.x,", ").concat(c.y,")")},f),{},{stroke:"none",fill:l},p),{},{index:n},c),{},{payload:t});return o.createElement(fe,Id({className:"recharts-polar-radius-axis-tick",key:"tick-".concat(t.coordinate)},z(e.props,t,n)),u.renderTickItem(r,d,a?a(t.value,n):t.value))}));return o.createElement(fe,{className:"recharts-polar-radius-axis-ticks"},d)}},{key:"render",value:function(){var e=this.props,t=e.ticks,n=e.axisLine,r=e.tick;return t&&t.length?o.createElement(fe,{className:"recharts-polar-radius-axis"},n&&this.renderAxisLine(),r&&this.renderTicks(),Lf.renderCallByParent(this.props,this.getViewBox())):null}}],r=[{key:"renderTickItem",value:function(e,t,n){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Do,Id({},t,{className:"recharts-polar-radius-axis-tick-value"}),n)}}],n&&Bd(t.prototype,n),r&&Bd(t,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(o.PureComponent);function Vd(e){return Vd="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Vd(e)}function Hd(){return Hd=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Hd.apply(this,arguments)}function qd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qd(Object(n),!0).forEach((function(t){Qd(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Xd(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Zd(r.key),r)}}function Gd(e,t){return Gd=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Gd(e,t)}function Yd(e){return Yd=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Yd(e)}function Qd(e,t,n){return(t=Zd(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Zd(e){var t=function(e,t){if("object"!==Vd(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Vd(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Vd(t)?t:String(t)}Ud($d,"displayName","PolarRadiusAxis"),Ud($d,"axisType","radiusAxis"),Ud($d,"defaultProps",{type:"number",radiusAxisId:0,cx:0,cy:0,angle:0,orientation:"right",stroke:"#ccc",axisLine:!0,tick:!0,tickCount:5,allowDataOverflow:!1,scale:"auto",allowDuplicatedCategory:!0});var Jd=Math.PI/180,eh=1e-5,th=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Gd(e,t)}(u,e);var t,n,r,i,a,l=(i=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Yd(i);if(a){var n=Yd(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Vd(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),l.apply(this,arguments)}return t=u,n=[{key:"getTickLineCoord",value:function(e){var t=this.props,n=t.cx,r=t.cy,o=t.radius,i=t.orientation,a=t.tickSize||8,l=xf(n,r,o,e.coordinate),u=xf(n,r,o+("inner"===i?-1:1)*a,e.coordinate);return{x1:l.x,y1:l.y,x2:u.x,y2:u.y}}},{key:"getTickTextAnchor",value:function(e){var t=this.props.orientation,n=Math.cos(-e.coordinate*Jd);return n>eh?"outer"===t?"start":"end":n<-eh?"outer"===t?"end":"start":"middle"}},{key:"renderAxisLine",value:function(){var e=this.props,t=e.cx,n=e.cy,r=e.radius,i=e.axisLine,a=e.axisLineType,l=Kd(Kd({},ne(this.props)),{},{fill:"none"},ne(i));if("circle"===a)return o.createElement(ld,Hd({className:"recharts-polar-angle-axis-line"},l,{cx:t,cy:n,r}));var u=this.props.ticks.map((function(e){return xf(t,n,r,e.coordinate)}));return o.createElement(id,Hd({className:"recharts-polar-angle-axis-line"},l,{points:u}))}},{key:"renderTicks",value:function(){var e=this,t=this.props,n=t.ticks,r=t.tick,i=t.tickLine,a=t.tickFormatter,l=t.stroke,c=ne(this.props),s=ne(r),f=Kd(Kd({},c),{},{fill:"none"},ne(i)),p=n.map((function(t,n){var p=e.getTickLineCoord(t),d=Kd(Kd(Kd({textAnchor:e.getTickTextAnchor(t)},c),{},{stroke:"none",fill:l},s),{},{index:n,payload:t,x:p.x2,y:p.y2});return o.createElement(fe,Hd({className:"recharts-polar-angle-axis-tick",key:"tick-".concat(t.coordinate)},z(e.props,t,n)),i&&o.createElement("line",Hd({className:"recharts-polar-angle-axis-tick-line"},f,p)),r&&u.renderTickItem(r,d,a?a(t.value,n):t.value))}));return o.createElement(fe,{className:"recharts-polar-angle-axis-ticks"},p)}},{key:"render",value:function(){var e=this.props,t=e.ticks,n=e.radius,r=e.axisLine;return n<=0||!t||!t.length?null:o.createElement(fe,{className:"recharts-polar-angle-axis"},r&&this.renderAxisLine(),this.renderTicks())}}],r=[{key:"renderTickItem",value:function(e,t,n){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Do,Hd({},t,{className:"recharts-polar-angle-axis-tick-value"}),n)}}],n&&Xd(t.prototype,n),r&&Xd(t,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(o.PureComponent);Qd(th,"displayName","PolarAngleAxis"),Qd(th,"axisType","angleAxis"),Qd(th,"defaultProps",{type:"category",angleAxisId:0,scale:"auto",cx:0,cy:0,orientation:"outer",axisLine:!0,tickLine:!0,tickSize:8,tick:!0,hide:!1,allowDuplicatedCategory:!0});var nh=n(8630),rh=n.n(nh),oh=n(1584),ih=n.n(oh);function ah(e){return ah="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ah(e)}function lh(){return lh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},lh.apply(this,arguments)}function uh(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ch(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ch(Object(n),!0).forEach((function(t){fh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ch(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fh(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ah(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ah(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ah(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ph,dh=function(e,t,n,r,o){var i,a=n-r;return i="M ".concat(e,",").concat(t),i+="L ".concat(e+n,",").concat(t),i+="L ".concat(e+n-a/2,",").concat(t+o),(i+="L ".concat(e+n-a/2-r,",").concat(t+o))+"L ".concat(e,",").concat(t," Z")},hh={x:0,y:0,upperWidth:0,lowerWidth:0,height:0,isUpdateAnimationActive:!1,animationBegin:0,animationDuration:1500,animationEasing:"ease"},yh=function(e){var t,n,r=sh(sh({},hh),e),i=(0,o.useRef)(),l=(t=(0,o.useState)(-1),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return uh(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?uh(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=l[0],c=l[1];(0,o.useEffect)((function(){if(i.current&&i.current.getTotalLength)try{var e=i.current.getTotalLength();e&&c(e)}catch(e){}}),[]);var s=r.x,f=r.y,p=r.upperWidth,d=r.lowerWidth,h=r.height,y=r.className,v=r.animationEasing,m=r.animationDuration,g=r.animationBegin,b=r.isUpdateAnimationActive;if(s!==+s||f!==+f||p!==+p||d!==+d||h!==+h||0===p&&0===d||0===h)return null;var x=a("recharts-trapezoid",y);return b?o.createElement(gr,{canBegin:u>0,from:{upperWidth:0,lowerWidth:0,height:h,x:s,y:f},to:{upperWidth:p,lowerWidth:d,height:h,x:s,y:f},duration:m,animationEasing:v,isActive:b},(function(e){var t=e.upperWidth,n=e.lowerWidth,a=e.height,l=e.x,c=e.y;return o.createElement(gr,{canBegin:u>0,from:"0px ".concat(-1===u?1:u,"px"),to:"".concat(u,"px 0px"),attributeName:"strokeDasharray",begin:g,duration:m,easing:v},o.createElement("path",lh({},ne(r,!0),{className:x,d:dh(l,c,t,n,a),ref:i})))})):o.createElement("g",null,o.createElement("path",lh({},ne(r,!0),{className:x,d:dh(s,f,p,d,h)})))},vh=["option","shapeType","propTransformer","activeClassName","isActive"];function mh(e){return mh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},mh(e)}function gh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function bh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?gh(Object(n),!0).forEach((function(t){xh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):gh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function xh(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==mh(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==mh(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===mh(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wh(e,t){return bh(bh({},t),e)}function Oh(e){var t=e.shapeType,n=e.elementProps;switch(t){case"rectangle":return o.createElement(Zp,n);case"trapezoid":return o.createElement(yh,n);case"sector":return o.createElement(cp,n);case"symbols":if(function(e,t){return"symbols"===e}(t))return o.createElement(Je,n);break;default:return null}}function Sh(e){return(0,o.isValidElement)(e)?e.props:e}function Ah(e){var t,n=e.option,r=e.shapeType,i=e.propTransformer,a=void 0===i?wh:i,l=e.activeClassName,u=void 0===l?"recharts-active-shape":l,c=e.isActive,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,vh);if((0,o.isValidElement)(n))t=(0,o.cloneElement)(n,bh(bh({},s),Sh(n)));else if(h()(n))t=n(s);else if(rh()(n)&&!ih()(n)){var f=a(n,s);t=o.createElement(Oh,{shapeType:r,elementProps:f})}else{var p=s;t=o.createElement(Oh,{shapeType:r,elementProps:p})}return c?o.createElement(fe,{className:u},t):t}function kh(e,t){return null!=t&&"trapezoids"in e.props}function Eh(e,t){return null!=t&&"sectors"in e.props}function jh(e,t){return null!=t&&"points"in e.props}function Ph(e,t){var n,r,o=e.x===(null==t||null===(n=t.labelViewBox)||void 0===n?void 0:n.x)||e.x===t.x,i=e.y===(null==t||null===(r=t.labelViewBox)||void 0===r?void 0:r.y)||e.y===t.y;return o&&i}function Ch(e,t){var n=e.endAngle===t.endAngle,r=e.startAngle===t.startAngle;return n&&r}function _h(e,t){var n=e.x===t.x,r=e.y===t.y,o=e.z===t.z;return n&&r&&o}function Th(e){var t=e.activeTooltipItem,n=e.graphicalItem,r=e.itemData,o=function(e,t){var n;return kh(e,t)?n="trapezoids":Eh(e,t)?n="sectors":jh(e,t)&&(n="points"),n}(n,t),i=function(e,t){var n,r;return kh(e,t)?null===(n=t.tooltipPayload)||void 0===n||null===(n=n[0])||void 0===n||null===(n=n.payload)||void 0===n?void 0:n.payload:Eh(e,t)?null===(r=t.tooltipPayload)||void 0===r||null===(r=r[0])||void 0===r||null===(r=r.payload)||void 0===r?void 0:r.payload:jh(e,t)?t.payload:{}}(n,t),a=r.filter((function(e,r){var a=Xc()(i,e),l=n.props[o].filter((function(e){var r=function(e,t){var n;return kh(e,t)?n=Ph:Eh(e,t)?n=Ch:jh(e,t)&&(n=_h),n}(n,t);return r(e,t)})),u=n.props[o].indexOf(l[l.length-1]);return a&&r===u}));return r.indexOf(a[a.length-1])}function Mh(e){return Mh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Mh(e)}function Nh(){return Nh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Nh.apply(this,arguments)}function Ih(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Dh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ih(Object(n),!0).forEach((function(t){Fh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ih(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Rh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Uh(r.key),r)}}function Lh(e,t){return Lh=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Lh(e,t)}function Bh(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function zh(e){return zh=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},zh(e)}function Fh(e,t,n){return(t=Uh(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Uh(e){var t=function(e,t){if("object"!==Mh(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Mh(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Mh(t)?t:String(t)}var Wh=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Lh(e,t)}(f,e);var t,n,r,i,l,c=(i=f,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=zh(i);if(l){var n=zh(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Mh(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Bh(e)}(this,e)});function f(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),Fh(Bh(t=c.call(this,e)),"pieRef",null),Fh(Bh(t),"sectorRefs",[]),Fh(Bh(t),"id",j("recharts-pie-")),Fh(Bh(t),"handleAnimationEnd",(function(){var e=t.props.onAnimationEnd;t.setState({isAnimationFinished:!0}),h()(e)&&e()})),Fh(Bh(t),"handleAnimationStart",(function(){var e=t.props.onAnimationStart;t.setState({isAnimationFinished:!1}),h()(e)&&e()})),t.state={isAnimationFinished:!e.isAnimationActive,prevIsAnimationActive:e.isAnimationActive,prevAnimationId:e.animationId,sectorToFocus:0},t}return t=f,r=[{key:"getDerivedStateFromProps",value:function(e,t){return t.prevIsAnimationActive!==e.isAnimationActive?{prevIsAnimationActive:e.isAnimationActive,prevAnimationId:e.animationId,curSectors:e.sectors,prevSectors:[],isAnimationFinished:!0}:e.isAnimationActive&&e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curSectors:e.sectors,prevSectors:t.curSectors,isAnimationFinished:!0}:e.sectors!==t.curSectors?{curSectors:e.sectors,isAnimationFinished:!0}:null}},{key:"getTextAnchor",value:function(e,t){return e>t?"start":e<t?"end":"middle"}},{key:"renderLabelLineItem",value:function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Wp,Nh({},t,{type:"linear",className:"recharts-pie-label-line"}))}},{key:"renderLabelItem",value:function(e,t,n){if(o.isValidElement(e))return o.cloneElement(e,t);var r=n;return h()(e)&&(r=e(t),o.isValidElement(r))?r:o.createElement(Do,Nh({},t,{alignmentBaseline:"middle",className:"recharts-pie-label-text"}),r)}}],(n=[{key:"isActiveIndex",value:function(e){var t=this.props.activeIndex;return Array.isArray(t)?-1!==t.indexOf(e):e===t}},{key:"hasActiveIndex",value:function(){var e=this.props.activeIndex;return Array.isArray(e)?0!==e.length:e||0===e}},{key:"renderLabels",value:function(e){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var t=this.props,n=t.label,r=t.labelLine,i=t.dataKey,a=t.valueKey,l=ne(this.props),u=ne(n),c=ne(r),p=n&&n.offsetRadius||20,d=e.map((function(e,t){var d=(e.startAngle+e.endAngle)/2,h=xf(e.cx,e.cy,e.outerRadius+p,d),y=Dh(Dh(Dh(Dh({},l),e),{},{stroke:"none"},u),{},{index:t,textAnchor:f.getTextAnchor(h.x,e.cx)},h),v=Dh(Dh(Dh(Dh({},l),e),{},{fill:"none",stroke:e.fill},c),{},{index:t,points:[xf(e.cx,e.cy,e.outerRadius,d),h],key:"line"}),m=i;return s()(i)&&s()(a)?m="value":s()(i)&&(m=a),o.createElement(fe,{key:"label-".concat(e.startAngle,"-").concat(e.endAngle)},r&&f.renderLabelLineItem(r,v),f.renderLabelItem(n,y,Bs(e,m)))}));return o.createElement(fe,{className:"recharts-pie-labels"},d)}},{key:"renderSectorsStatically",value:function(e){var t=this,n=this.props,r=n.activeShape,i=n.blendStroke,a=n.inactiveShape;return e.map((function(e,n){var l=t.isActiveIndex(n),u=a&&t.hasActiveIndex()?a:null,c=l?r:u,s=Dh(Dh({},e),{},{stroke:i?e.fill:e.stroke,tabIndex:-1});return o.createElement(fe,Nh({ref:function(e){e&&!t.sectorRefs.includes(e)&&t.sectorRefs.push(e)},tabIndex:-1,className:"recharts-pie-sector"},z(t.props,e,n),{key:"sector-".concat(n)}),o.createElement(Ah,Nh({option:c,isActive:l,shapeType:"sector"},s)))}))}},{key:"renderSectorsWithAnimation",value:function(){var e=this,t=this.props,n=t.sectors,r=t.isAnimationActive,i=t.animationBegin,a=t.animationDuration,l=t.animationEasing,c=t.animationId,s=this.state,f=s.prevSectors,p=s.prevIsAnimationActive;return o.createElement(gr,{begin:i,duration:a,isActive:r,easing:l,from:{t:0},to:{t:1},key:"pie-".concat(c,"-").concat(p),onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(t){var r=t.t,i=[],a=(n&&n[0]).startAngle;return n.forEach((function(e,t){var n=f&&f[t],o=t>0?u()(e,"paddingAngle",0):0;if(n){var l=_(n.endAngle-n.startAngle,e.endAngle-e.startAngle),c=Dh(Dh({},e),{},{startAngle:a+o,endAngle:a+l(r)+o});i.push(c),a=c.endAngle}else{var s=e.endAngle,p=e.startAngle,d=_(0,s-p)(r),h=Dh(Dh({},e),{},{startAngle:a+o,endAngle:a+d+o});i.push(h),a=h.endAngle}})),o.createElement(fe,null,e.renderSectorsStatically(i))}))}},{key:"attachKeyboardHandlers",value:function(e){var t=this;e.onkeydown=function(e){if(!e.altKey)switch(e.key){case"ArrowLeft":var n=++t.state.sectorToFocus%t.sectorRefs.length;t.sectorRefs[n].focus(),t.setState({sectorToFocus:n});break;case"ArrowRight":var r=--t.state.sectorToFocus<0?t.sectorRefs.length-1:t.state.sectorToFocus%t.sectorRefs.length;t.sectorRefs[r].focus(),t.setState({sectorToFocus:r});break;case"Escape":t.sectorRefs[t.state.sectorToFocus].blur(),t.setState({sectorToFocus:0})}}}},{key:"renderSectors",value:function(){var e=this.props,t=e.sectors,n=e.isAnimationActive,r=this.state.prevSectors;return!(n&&t&&t.length)||r&&Xc()(r,t)?this.renderSectorsStatically(t):this.renderSectorsWithAnimation()}},{key:"componentDidMount",value:function(){this.pieRef&&this.attachKeyboardHandlers(this.pieRef)}},{key:"render",value:function(){var e=this,t=this.props,n=t.hide,r=t.sectors,i=t.className,l=t.label,u=t.cx,c=t.cy,s=t.innerRadius,f=t.outerRadius,p=t.isAnimationActive,d=this.state.isAnimationFinished;if(n||!r||!r.length||!A(u)||!A(c)||!A(s)||!A(f))return null;var h=a("recharts-pie",i);return o.createElement(fe,{tabIndex:this.props.rootTabIndex,className:h,ref:function(t){e.pieRef=t}},this.renderSectors(),l&&this.renderLabels(r),Lf.renderCallByParent(this.props,null,!1),(!p||d)&&Qf.renderCallByParent(this.props,r,!1))}}])&&Rh(t.prototype,n),r&&Rh(t,r),Object.defineProperty(t,"prototype",{writable:!1}),f}(o.PureComponent);ph=Wh,Fh(Wh,"displayName","Pie"),Fh(Wh,"defaultProps",{stroke:"#fff",fill:"#808080",legendType:"rect",cx:"50%",cy:"50%",startAngle:0,endAngle:360,innerRadius:0,outerRadius:"80%",paddingAngle:0,labelLine:!0,hide:!1,minAngle:0,isAnimationActive:!Dr.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",blendStroke:!1,rootTabIndex:0}),Fh(Wh,"parseDeltaAngle",(function(e,t){return O(t-e)*Math.min(Math.abs(t-e),360)})),Fh(Wh,"getRealPieData",(function(e){var t=e.props,n=t.data,r=t.children,o=ne(e.props),i=G(r,eo);return n&&n.length?n.map((function(e,t){return Dh(Dh(Dh({payload:e},o),e),i&&i[t]&&i[t].props)})):i&&i.length?i.map((function(e){return Dh(Dh({},o),e.props)})):[]})),Fh(Wh,"parseCoordinateOfPie",(function(e,t){var n=t.top,r=t.left,o=t.width,i=t.height,a=wf(o,i);return{cx:r+P(e.props.cx,o,o/2),cy:n+P(e.props.cy,i,i/2),innerRadius:P(e.props.innerRadius,a,0),outerRadius:P(e.props.outerRadius,a,.8*a),maxRadius:e.props.maxRadius||Math.sqrt(o*o+i*i)/2}})),Fh(Wh,"getComposedData",(function(e){var t=e.item,n=e.offset,r=ph.getRealPieData(t);if(!r||!r.length)return null;var o=t.props,i=o.cornerRadius,a=o.startAngle,l=o.endAngle,u=o.paddingAngle,c=o.dataKey,f=o.nameKey,p=o.valueKey,d=o.tooltipType,h=Math.abs(t.props.minAngle),y=ph.parseCoordinateOfPie(t,n),v=ph.parseDeltaAngle(a,l),m=Math.abs(v),g=c;s()(c)&&s()(p)?(pe(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),g="value"):s()(c)&&(pe(!1,'Use "dataKey" to specify the value of pie,\n      the props "valueKey" will be deprecated in 1.1.0'),g=p);var b,x,w=r.filter((function(e){return 0!==Bs(e,g,0)})).length,S=m-w*h-(m>=360?w:w-1)*u,k=r.reduce((function(e,t){var n=Bs(t,g,0);return e+(A(n)?n:0)}),0);return k>0&&(b=r.map((function(e,t){var n,r=Bs(e,g,0),o=Bs(e,f,t),l=(A(r)?r:0)/k,c=(n=t?x.endAngle+O(v)*u*(0!==r?1:0):a)+O(v)*((0!==r?h:0)+l*S),s=(n+c)/2,p=(y.innerRadius+y.outerRadius)/2,m=[{name:o,value:r,payload:e,dataKey:g,type:d}],b=xf(y.cx,y.cy,p,s);return x=Dh(Dh(Dh({percent:l,cornerRadius:i,name:o,tooltipPayload:m,midAngle:s,middleRadius:p,tooltipPosition:b},e),y),{},{value:Bs(e,g),startAngle:n,endAngle:c,payload:e,paddingAngle:O(v)*u})}))),Dh(Dh({},y),{},{sectors:b,data:r})}));var $h=n(8804),Vh=n.n($h);function Hh(e){return Hh="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hh(e)}function qh(){return qh=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qh.apply(this,arguments)}function Kh(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xh(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kh(Object(n),!0).forEach((function(t){Jh(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kh(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Gh(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ey(r.key),r)}}function Yh(e,t){return Yh=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Yh(e,t)}function Qh(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Zh(e){return Zh=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Zh(e)}function Jh(e,t,n){return(t=ey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ey(e){var t=function(e,t){if("object"!==Hh(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Hh(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Hh(t)?t:String(t)}var ty=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Yh(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Zh(i);if(l){var n=Zh(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Hh(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Qh(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Jh(Qh(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!1}),Jh(Qh(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h()(t)&&t()})),Jh(Qh(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h()(t)&&t()})),Jh(Qh(e),"handleMouseEnter",(function(t){var n=e.props.onMouseEnter;n&&n(e.props,t)})),Jh(Qh(e),"handleMouseLeave",(function(t){var n=e.props.onMouseLeave;n&&n(e.props,t)})),e}return t=c,r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curPoints:e.points,prevPoints:t.curPoints}:e.points!==t.curPoints?{curPoints:e.points}:null}},{key:"renderDotItem",value:function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(ld,qh({},t,{className:"recharts-radar-dot"}))}}],(n=[{key:"renderDots",value:function(e){var t=this.props,n=t.dot,r=t.dataKey,i=ne(this.props),a=ne(n),l=e.map((function(e,t){var o=Xh(Xh(Xh({key:"dot-".concat(t),r:3},i),a),{},{dataKey:r,cx:e.x,cy:e.y,index:t,payload:e});return c.renderDotItem(n,o)}));return o.createElement(fe,{className:"recharts-radar-dots"},l)}},{key:"renderPolygonStatically",value:function(e){var t,n=this.props,r=n.shape,i=n.dot,a=n.isRange,l=n.baseLinePoints,u=n.connectNulls;return t=o.isValidElement(r)?o.cloneElement(r,Xh(Xh({},this.props),{},{points:e})):h()(r)?r(Xh(Xh({},this.props),{},{points:e})):o.createElement(id,qh({},ne(this.props,!0),{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,points:e,baseLinePoints:a?l:null,connectNulls:u})),o.createElement(fe,{className:"recharts-radar-polygon"},t,i?this.renderDots(e):null)}},{key:"renderPolygonWithAnimation",value:function(){var e=this,t=this.props,n=t.points,r=t.isAnimationActive,i=t.animationBegin,a=t.animationDuration,l=t.animationEasing,u=t.animationId,c=this.state.prevPoints;return o.createElement(gr,{begin:i,duration:a,isActive:r,easing:l,from:{t:0},to:{t:1},key:"radar-".concat(u),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(t){var r=t.t,o=c&&c.length/n.length,i=n.map((function(e,t){var n=c&&c[Math.floor(t*o)];if(n){var i=_(n.x,e.x),a=_(n.y,e.y);return Xh(Xh({},e),{},{x:i(r),y:a(r)})}var l=_(e.cx,e.x),u=_(e.cy,e.y);return Xh(Xh({},e),{},{x:l(r),y:u(r)})}));return e.renderPolygonStatically(i)}))}},{key:"renderPolygon",value:function(){var e=this.props,t=e.points,n=e.isAnimationActive,r=e.isRange,o=this.state.prevPoints;return!(n&&t&&t.length)||r||o&&Xc()(o,t)?this.renderPolygonStatically(t):this.renderPolygonWithAnimation()}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.className,r=e.points,i=e.isAnimationActive;if(t||!r||!r.length)return null;var l=this.state.isAnimationFinished,u=a("recharts-radar",n);return o.createElement(fe,{className:u},this.renderPolygon(),(!i||l)&&Qf.renderCallByParent(this.props,r))}}])&&Gh(t.prototype,n),r&&Gh(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);function ny(e){return ny="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ny(e)}function ry(){return ry=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ry.apply(this,arguments)}function oy(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function iy(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oy(Object(n),!0).forEach((function(t){ay(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oy(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ay(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ny(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ny(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ny(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ly(e){return"string"==typeof e?parseInt(e,10):e}function uy(e,t){var n="".concat(t.cx||e.cx),r=parseInt(n,10),o="".concat(t.cy||e.cy),i=parseInt(o,10);return iy(iy(iy({},t),e),{},{cx:r,cy:i})}function cy(e){return o.createElement(Ah,ry({shapeType:"sector",propTransformer:uy},e))}Jh(ty,"displayName","Radar"),Jh(ty,"defaultProps",{angleAxisId:0,radiusAxisId:0,hide:!1,activeDot:!0,dot:!1,legendType:"rect",isAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"}),Jh(ty,"getComposedData",(function(e){var t=e.radiusAxis,n=e.angleAxis,r=e.displayedData,o=e.dataKey,i=e.bandSize,a=n.cx,l=n.cy,u=!1,c=[],f="number"!==n.type&&null!=i?i:0;r.forEach((function(e,r){var i=Bs(e,n.dataKey,r),p=Bs(e,o),d=n.scale(i)+f,h=Array.isArray(p)?Ff()(p):p,y=s()(h)?void 0:t.scale(h);Array.isArray(p)&&p.length>=2&&(u=!0),c.push(Xh(Xh({},xf(a,l,y,d)),{},{name:i,value:p,cx:a,cy:l,radius:y,angle:d,payload:e}))}));var p=[];return u&&c.forEach((function(e){if(Array.isArray(e.value)){var n=Vh()(e.value),r=s()(n)?void 0:t.scale(n);p.push(Xh(Xh({},e),{},{radius:r},xf(a,l,r,e.angle)))}else p.push(e)})),{points:c,isRange:u,baseLinePoints:p}}));var sy=["shape","activeShape","activeIndex","cornerRadius"],fy=["value","background"];function py(e){return py="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},py(e)}function dy(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hy(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dy(Object(n),!0).forEach((function(t){xy(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dy(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function yy(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function vy(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,wy(r.key),r)}}function my(e,t){return my=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},my(e,t)}function gy(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function by(e){return by=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},by(e)}function xy(e,t,n){return(t=wy(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function wy(e){var t=function(e,t){if("object"!==py(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==py(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===py(t)?t:String(t)}var Oy=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&my(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=by(i);if(l){var n=by(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===py(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return gy(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return xy(gy(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!1}),xy(gy(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h()(t)&&t()})),xy(gy(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h()(t)&&t()})),e}return t=c,r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curData:e.data,prevData:t.curData}:e.data!==t.curData?{curData:e.data}:null}}],(n=[{key:"getDeltaAngle",value:function(){var e=this.props,t=e.startAngle,n=e.endAngle;return O(n-t)*Math.min(Math.abs(n-t),360)}},{key:"renderSectorsStatically",value:function(e){var t=this,n=this.props,r=n.shape,i=n.activeShape,a=n.activeIndex,l=n.cornerRadius,u=yy(n,sy),c=ne(u);return e.map((function(e,n){var s=n===a,f=hy(hy(hy(hy({},c),{},{cornerRadius:ly(l)},e),z(t.props,e,n)),{},{key:"sector-".concat(n),className:"recharts-radial-bar-sector ".concat(e.className),forceCornerRadius:u.forceCornerRadius,cornerIsExternal:u.cornerIsExternal,isActive:s,option:s?i:r});return o.createElement(cy,f)}))}},{key:"renderSectorsWithAnimation",value:function(){var e=this,t=this.props,n=t.data,r=t.isAnimationActive,i=t.animationBegin,a=t.animationDuration,l=t.animationEasing,u=t.animationId,c=this.state.prevData;return o.createElement(gr,{begin:i,duration:a,isActive:r,easing:l,from:{t:0},to:{t:1},key:"radialBar-".concat(u),onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(t){var r=t.t,i=n.map((function(e,t){var n=c&&c[t];if(n){var o=_(n.startAngle,e.startAngle),i=_(n.endAngle,e.endAngle);return hy(hy({},e),{},{startAngle:o(r),endAngle:i(r)})}var a=e.endAngle,l=e.startAngle,u=_(l,a);return hy(hy({},e),{},{endAngle:u(r)})}));return o.createElement(fe,null,e.renderSectorsStatically(i))}))}},{key:"renderSectors",value:function(){var e=this.props,t=e.data,n=e.isAnimationActive,r=this.state.prevData;return!(n&&t&&t.length)||r&&Xc()(r,t)?this.renderSectorsStatically(t):this.renderSectorsWithAnimation()}},{key:"renderBackground",value:function(e){var t=this,n=this.props.cornerRadius,r=ne(this.props.background);return e.map((function(e,i){e.value;var a=e.background,l=yy(e,fy);if(!a)return null;var u=hy(hy(hy(hy(hy({cornerRadius:ly(n)},l),{},{fill:"#eee"},a),r),z(t.props,e,i)),{},{index:i,key:"sector-".concat(i),className:"recharts-radial-bar-background-sector",option:a,isActive:!1});return o.createElement(cy,u)}))}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.data,r=e.className,i=e.background,l=e.isAnimationActive;if(t||!n||!n.length)return null;var u=this.state.isAnimationFinished,c=a("recharts-area",r);return o.createElement(fe,{className:c},i&&o.createElement(fe,{className:"recharts-radial-bar-background"},this.renderBackground(n)),o.createElement(fe,{className:"recharts-radial-bar-sectors"},this.renderSectors()),(!l||u)&&Qf.renderCallByParent(hy({},this.props),n))}}])&&vy(t.prototype,n),r&&vy(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);xy(Oy,"displayName","RadialBar"),xy(Oy,"defaultProps",{angleAxisId:0,radiusAxisId:0,minPointSize:0,hide:!1,legendType:"rect",data:[],isAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease",forceCornerRadius:!1,cornerIsExternal:!1}),xy(Oy,"getComposedData",(function(e){var t=e.item,n=e.props,r=e.radiusAxis,o=e.radiusAxisTicks,i=e.angleAxis,a=e.angleAxisTicks,l=e.displayedData,u=e.dataKey,c=e.stackedData,s=e.barPosition,f=e.bandSize,p=e.dataStartIndex,d=Qs(s,t);if(!d)return null;var h=i.cx,y=i.cy,v=n.layout,m=t.props,g=m.children,b=m.minPointSize,x="radial"===v?i:r,w=c?x.scale.domain():null,S=of({numericAxis:x}),A=G(g,eo),k=l.map((function(e,l){var s,m,g,x,k,E;if(c?s=Zs(c[p+l],w):(s=Bs(e,u),Array.isArray(s)||(s=[S,s])),"radial"===v){m=rf({axis:r,ticks:o,bandSize:f,offset:d.offset,entry:e,index:l}),k=i.scale(s[1]),x=i.scale(s[0]),g=m+d.size;var j=k-x;Math.abs(b)>0&&Math.abs(j)<Math.abs(b)&&(k+=O(j||b)*(Math.abs(b)-Math.abs(j))),E={background:{cx:h,cy:y,innerRadius:m,outerRadius:g,startAngle:n.startAngle,endAngle:n.endAngle}}}else{m=r.scale(s[0]),g=r.scale(s[1]),k=(x=rf({axis:i,ticks:a,bandSize:f,offset:d.offset,entry:e,index:l}))+d.size;var P=g-m;Math.abs(b)>0&&Math.abs(P)<Math.abs(b)&&(g+=O(P||b)*(Math.abs(b)-Math.abs(P)))}return hy(hy(hy(hy({},e),E),{},{payload:e,value:c?s:s[1],cx:h,cy:y,innerRadius:m,outerRadius:g,startAngle:x,endAngle:k},A&&A[l]&&A[l].props),{},{tooltipPayload:[pf(t,e)],tooltipPosition:xf(h,y,(m+g)/2,(x+k)/2)})}));return{data:k,layout:v}}));var Sy=n(6026),Ay=n.n(Sy);function ky(e){return ky="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ky(e)}function Ey(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jy(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ey(Object(n),!0).forEach((function(t){Py(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ey(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Py(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==ky(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ky(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ky(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Cy=["Webkit","Moz","O","ms"];function _y(e){return _y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_y(e)}function Ty(){return Ty=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ty.apply(this,arguments)}function My(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ny(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?My(Object(n),!0).forEach((function(t){By(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):My(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Iy(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,zy(r.key),r)}}function Dy(e,t){return Dy=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Dy(e,t)}function Ry(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ly(e){return Ly=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ly(e)}function By(e,t,n){return(t=zy(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zy(e){var t=function(e,t){if("object"!==_y(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==_y(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===_y(t)?t:String(t)}var Fy=function(e){return e.changedTouches&&!!e.changedTouches.length},Uy=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Dy(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ly(i);if(l){var n=Ly(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===_y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Ry(e)}(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),By(Ry(t=u.call(this,e)),"handleDrag",(function(e){t.leaveTimer&&(clearTimeout(t.leaveTimer),t.leaveTimer=null),t.state.isTravellerMoving?t.handleTravellerMove(e):t.state.isSlideMoving&&t.handleSlideDrag(e)})),By(Ry(t),"handleTouchMove",(function(e){null!=e.changedTouches&&e.changedTouches.length>0&&t.handleDrag(e.changedTouches[0])})),By(Ry(t),"handleDragEnd",(function(){t.setState({isTravellerMoving:!1,isSlideMoving:!1},(function(){var e=t.props,n=e.endIndex,r=e.onDragEnd,o=e.startIndex;null==r||r({endIndex:n,startIndex:o})})),t.detachDragEndListener()})),By(Ry(t),"handleLeaveWrapper",(function(){(t.state.isTravellerMoving||t.state.isSlideMoving)&&(t.leaveTimer=window.setTimeout(t.handleDragEnd,t.props.leaveTimeOut))})),By(Ry(t),"handleEnterSlideOrTraveller",(function(){t.setState({isTextActive:!0})})),By(Ry(t),"handleLeaveSlideOrTraveller",(function(){t.setState({isTextActive:!1})})),By(Ry(t),"handleSlideDragStart",(function(e){var n=Fy(e)?e.changedTouches[0]:e;t.setState({isTravellerMoving:!1,isSlideMoving:!0,slideMoveStartX:n.pageX}),t.attachDragEndListener()})),t.travellerDragStartHandlers={startX:t.handleTravellerDragStart.bind(Ry(t),"startX"),endX:t.handleTravellerDragStart.bind(Ry(t),"endX")},t.state={},t}return t=c,n=[{key:"componentWillUnmount",value:function(){this.leaveTimer&&(clearTimeout(this.leaveTimer),this.leaveTimer=null),this.detachDragEndListener()}},{key:"getIndex",value:function(e){var t=e.startX,n=e.endX,r=this.state.scaleValues,o=this.props,i=o.gap,a=o.data.length-1,l=Math.min(t,n),u=Math.max(t,n),s=c.getIndexInRange(r,l),f=c.getIndexInRange(r,u);return{startIndex:s-s%i,endIndex:f===a?a:f-f%i}}},{key:"getTextOfTick",value:function(e){var t=this.props,n=t.data,r=t.tickFormatter,o=t.dataKey,i=Bs(n[e],o,e);return h()(r)?r(i,e):i}},{key:"attachDragEndListener",value:function(){window.addEventListener("mouseup",this.handleDragEnd,!0),window.addEventListener("touchend",this.handleDragEnd,!0),window.addEventListener("mousemove",this.handleDrag,!0)}},{key:"detachDragEndListener",value:function(){window.removeEventListener("mouseup",this.handleDragEnd,!0),window.removeEventListener("touchend",this.handleDragEnd,!0),window.removeEventListener("mousemove",this.handleDrag,!0)}},{key:"handleSlideDrag",value:function(e){var t=this.state,n=t.slideMoveStartX,r=t.startX,o=t.endX,i=this.props,a=i.x,l=i.width,u=i.travellerWidth,c=i.startIndex,s=i.endIndex,f=i.onChange,p=e.pageX-n;p>0?p=Math.min(p,a+l-u-o,a+l-u-r):p<0&&(p=Math.max(p,a-r,a-o));var d=this.getIndex({startX:r+p,endX:o+p});d.startIndex===c&&d.endIndex===s||!f||f(d),this.setState({startX:r+p,endX:o+p,slideMoveStartX:e.pageX})}},{key:"handleTravellerDragStart",value:function(e,t){var n=Fy(t)?t.changedTouches[0]:t;this.setState({isSlideMoving:!1,isTravellerMoving:!0,movingTravellerId:e,brushMoveStartX:n.pageX}),this.attachDragEndListener()}},{key:"handleTravellerMove",value:function(e){var t,n=this.state,r=n.brushMoveStartX,o=n.movingTravellerId,i=n.endX,a=n.startX,l=this.state[o],u=this.props,c=u.x,s=u.width,f=u.travellerWidth,p=u.onChange,d=u.gap,h=u.data,y={startX:this.state.startX,endX:this.state.endX},v=e.pageX-r;v>0?v=Math.min(v,c+s-f-l):v<0&&(v=Math.max(v,c-l)),y[o]=l+v;var m=this.getIndex(y),g=m.startIndex,b=m.endIndex;this.setState((By(t={},o,l+v),By(t,"brushMoveStartX",e.pageX),t),(function(){var e;p&&(e=h.length-1,("startX"===o&&(i>a?g%d==0:b%d==0)||i<a&&b===e||"endX"===o&&(i>a?b%d==0:g%d==0)||i>a&&b===e)&&p(m))}))}},{key:"handleTravellerMoveKeyboard",value:function(e,t){var n=this,r=this.state,o=r.scaleValues,i=r.startX,a=r.endX,l=this.state[t],u=o.indexOf(l);if(-1!==u){var c=u+e;if(!(-1===c||c>=o.length)){var s=o[c];"startX"===t&&s>=a||"endX"===t&&s<=i||this.setState(By({},t,s),(function(){n.props.onChange(n.getIndex({startX:n.state.startX,endX:n.state.endX}))}))}}}},{key:"renderBackground",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,i=e.height,a=e.fill,l=e.stroke;return o.createElement("rect",{stroke:l,fill:a,x:t,y:n,width:r,height:i})}},{key:"renderPanorama",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,i=e.height,a=e.data,l=e.children,u=e.padding,c=o.Children.only(l);return c?o.cloneElement(c,{x:t,y:n,width:r,height:i,margin:u,compact:!0,data:a}):null}},{key:"renderTravellerLayer",value:function(e,t){var n=this,r=this.props,i=r.y,a=r.travellerWidth,l=r.height,u=r.traveller,s=r.ariaLabel,f=r.data,p=r.startIndex,d=r.endIndex,h=Math.max(e,this.props.x),y=Ny(Ny({},ne(this.props)),{},{x:h,y:i,width:a,height:l}),v=s||"Min value: ".concat(f[p].name,", Max value: ").concat(f[d].name);return o.createElement(fe,{tabIndex:0,role:"slider","aria-label":v,"aria-valuenow":e,className:"recharts-brush-traveller",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.travellerDragStartHandlers[t],onTouchStart:this.travellerDragStartHandlers[t],onKeyDown:function(e){["ArrowLeft","ArrowRight"].includes(e.key)&&(e.preventDefault(),e.stopPropagation(),n.handleTravellerMoveKeyboard("ArrowRight"===e.key?1:-1,t))},onFocus:function(){n.setState({isTravellerFocused:!0})},onBlur:function(){n.setState({isTravellerFocused:!1})},style:{cursor:"col-resize"}},c.renderTraveller(u,y))}},{key:"renderSlide",value:function(e,t){var n=this.props,r=n.y,i=n.height,a=n.stroke,l=n.travellerWidth,u=Math.min(e,t)+l,c=Math.max(Math.abs(t-e)-l,0);return o.createElement("rect",{className:"recharts-brush-slide",onMouseEnter:this.handleEnterSlideOrTraveller,onMouseLeave:this.handleLeaveSlideOrTraveller,onMouseDown:this.handleSlideDragStart,onTouchStart:this.handleSlideDragStart,style:{cursor:"move"},stroke:"none",fill:a,fillOpacity:.2,x:u,y:r,width:c,height:i})}},{key:"renderText",value:function(){var e=this.props,t=e.startIndex,n=e.endIndex,r=e.y,i=e.height,a=e.travellerWidth,l=e.stroke,u=this.state,c=u.startX,s=u.endX,f={pointerEvents:"none",fill:l};return o.createElement(fe,{className:"recharts-brush-texts"},o.createElement(Do,Ty({textAnchor:"end",verticalAnchor:"middle",x:Math.min(c,s)-5,y:r+i/2},f),this.getTextOfTick(t)),o.createElement(Do,Ty({textAnchor:"start",verticalAnchor:"middle",x:Math.max(c,s)+a+5,y:r+i/2},f),this.getTextOfTick(n)))}},{key:"render",value:function(){var e=this.props,t=e.data,n=e.className,r=e.children,i=e.x,l=e.y,u=e.width,c=e.height,s=e.alwaysShowText,f=this.state,p=f.startX,d=f.endX,h=f.isTextActive,y=f.isSlideMoving,v=f.isTravellerMoving,m=f.isTravellerFocused;if(!t||!t.length||!A(i)||!A(l)||!A(u)||!A(c)||u<=0||c<=0)return null;var g=a("recharts-brush",n),b=1===o.Children.count(r),x=function(e,t){var n=e.replace(/(\w)/,(function(e){return e.toUpperCase()})),r=Cy.reduce((function(e,r){return jy(jy({},e),{},Py({},r+n,t))}),{});return r[e]=t,r}("userSelect","none");return o.createElement(fe,{className:g,onMouseLeave:this.handleLeaveWrapper,onTouchMove:this.handleTouchMove,style:x},this.renderBackground(),b&&this.renderPanorama(),this.renderSlide(p,d),this.renderTravellerLayer(p,"startX"),this.renderTravellerLayer(d,"endX"),(h||y||v||m||s)&&this.renderText())}}],r=[{key:"renderDefaultTraveller",value:function(e){var t=e.x,n=e.y,r=e.width,i=e.height,a=e.stroke,l=Math.floor(n+i/2)-1;return o.createElement(o.Fragment,null,o.createElement("rect",{x:t,y:n,width:r,height:i,fill:a,stroke:"none"}),o.createElement("line",{x1:t+1,y1:l,x2:t+r-1,y2:l,fill:"none",stroke:"#fff"}),o.createElement("line",{x1:t+1,y1:l+2,x2:t+r-1,y2:l+2,fill:"none",stroke:"#fff"}))}},{key:"renderTraveller",value:function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):c.renderDefaultTraveller(t)}},{key:"getDerivedStateFromProps",value:function(e,t){var n=e.data,r=e.width,o=e.x,i=e.travellerWidth,a=e.updateId,l=e.startIndex,u=e.endIndex;if(n!==t.prevData||a!==t.prevUpdateId)return Ny({prevData:n,prevTravellerWidth:i,prevUpdateId:a,prevX:o,prevWidth:r},n&&n.length?function(e){var t=e.data,n=e.startIndex,r=e.endIndex,o=e.x,i=e.width,a=e.travellerWidth;if(!t||!t.length)return{};var l=t.length,u=Ho().domain(Ay()(0,l)).range([o,o+i-a]),c=u.domain().map((function(e){return u(e)}));return{isTextActive:!1,isSlideMoving:!1,isTravellerMoving:!1,isTravellerFocused:!1,startX:u(n),endX:u(r),scale:u,scaleValues:c}}({data:n,width:r,x:o,travellerWidth:i,startIndex:l,endIndex:u}):{scale:null,scaleValues:null});if(t.scale&&(r!==t.prevWidth||o!==t.prevX||i!==t.prevTravellerWidth)){t.scale.range([o,o+r-i]);var c=t.scale.domain().map((function(e){return t.scale(e)}));return{prevData:n,prevTravellerWidth:i,prevUpdateId:a,prevX:o,prevWidth:r,startX:t.scale(e.startIndex),endX:t.scale(e.endIndex),scaleValues:c}}return null}},{key:"getIndexInRange",value:function(e,t){for(var n=0,r=e.length-1;r-n>1;){var o=Math.floor((n+r)/2);e[o]>t?r=o:n=o}return t>=e[r]?r:n}}],n&&Iy(t.prototype,n),r&&Iy(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);By(Uy,"displayName","Brush"),By(Uy,"defaultProps",{height:40,travellerWidth:5,gap:1,fill:"#fff",stroke:"#666",padding:{top:1,right:1,bottom:1,left:1},leaveTimeOut:1e3,alwaysShowText:!1});var Wy=n(9704),$y=n.n(Wy),Vy=function(e,t){var n=e.alwaysShow,r=e.ifOverflow;return n&&(r="extendDomain"),r===t},Hy=n(6604),qy=n.n(Hy),Ky=n(711),Xy=n.n(Ky);function Gy(e){return Gy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gy(e)}var Yy=["x","y"];function Qy(){return Qy=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Qy.apply(this,arguments)}function Zy(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Jy(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zy(Object(n),!0).forEach((function(t){ev(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zy(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ev(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Gy(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Gy(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Gy(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tv(e,t){var n=e.x,r=e.y,o=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Yy),i="".concat(n),a=parseInt(i,10),l="".concat(r),u=parseInt(l,10),c="".concat(t.height||o.height),s=parseInt(c,10),f="".concat(t.width||o.width),p=parseInt(f,10);return Jy(Jy(Jy(Jy(Jy({},t),o),a?{x:a}:{}),u?{y:u}:{}),{},{height:s,width:p,name:t.name,radius:t.radius})}function nv(e){return o.createElement(Ah,Qy({shapeType:"rectangle",propTransformer:tv,activeClassName:"recharts-active-bar"},e))}var rv=["value","background"];function ov(e){return ov="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ov(e)}function iv(){return iv=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},iv.apply(this,arguments)}function av(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function lv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?av(Object(n),!0).forEach((function(t){pv(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):av(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function uv(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,dv(r.key),r)}}function cv(e,t){return cv=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},cv(e,t)}function sv(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fv(e){return fv=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},fv(e)}function pv(e,t,n){return(t=dv(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function dv(e){var t=function(e,t){if("object"!==ov(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ov(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ov(t)?t:String(t)}var hv=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&cv(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=fv(i);if(l){var n=fv(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===ov(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return sv(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return pv(sv(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!1}),pv(sv(e),"id",j("recharts-bar-")),pv(sv(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),t&&t()})),pv(sv(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),t&&t()})),e}return t=c,n=[{key:"renderRectanglesStatically",value:function(e){var t=this,n=this.props,r=n.shape,i=n.dataKey,a=n.activeIndex,l=n.activeBar,u=ne(this.props);return e&&e.map((function(e,n){var c=n===a,s=c?l:r,f=lv(lv(lv({},u),e),{},{isActive:c,option:s,index:n,dataKey:i,onAnimationStart:t.handleAnimationStart,onAnimationEnd:t.handleAnimationEnd});return o.createElement(fe,iv({className:"recharts-bar-rectangle"},z(t.props,e,n),{key:"rectangle-".concat(null==e?void 0:e.x,"-").concat(null==e?void 0:e.y,"-").concat(null==e?void 0:e.value)}),o.createElement(nv,f))}))}},{key:"renderRectanglesWithAnimation",value:function(){var e=this,t=this.props,n=t.data,r=t.layout,i=t.isAnimationActive,a=t.animationBegin,l=t.animationDuration,u=t.animationEasing,c=t.animationId,s=this.state.prevData;return o.createElement(gr,{begin:a,duration:l,isActive:i,easing:u,from:{t:0},to:{t:1},key:"bar-".concat(c),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(t){var i=t.t,a=n.map((function(e,t){var n=s&&s[t];if(n){var o=_(n.x,e.x),a=_(n.y,e.y),l=_(n.width,e.width),u=_(n.height,e.height);return lv(lv({},e),{},{x:o(i),y:a(i),width:l(i),height:u(i)})}if("horizontal"===r){var c=_(0,e.height)(i);return lv(lv({},e),{},{y:e.y+e.height-c,height:c})}var f=_(0,e.width)(i);return lv(lv({},e),{},{width:f})}));return o.createElement(fe,null,e.renderRectanglesStatically(a))}))}},{key:"renderRectangles",value:function(){var e=this.props,t=e.data,n=e.isAnimationActive,r=this.state.prevData;return!(n&&t&&t.length)||r&&Xc()(r,t)?this.renderRectanglesStatically(t):this.renderRectanglesWithAnimation()}},{key:"renderBackground",value:function(){var e=this,t=this.props,n=t.data,r=t.dataKey,i=t.activeIndex,a=ne(this.props.background);return n.map((function(t,n){t.value;var l=t.background,u=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(t,rv);if(!l)return null;var c=lv(lv(lv(lv(lv({},u),{},{fill:"#eee"},l),a),z(e.props,t,n)),{},{onAnimationStart:e.handleAnimationStart,onAnimationEnd:e.handleAnimationEnd,dataKey:r,index:n,key:"background-bar-".concat(n),className:"recharts-bar-background-rectangle"});return o.createElement(nv,iv({option:e.props.background,isActive:n===i},c))}))}},{key:"renderErrorBar",value:function(e,t){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var n=this.props,r=n.data,i=n.xAxis,a=n.yAxis,l=n.layout,u=G(n.children,Es);if(!u)return null;var c="vertical"===l?r[0].height/2:r[0].width/2,s=function(e,t){var n=Array.isArray(e.value)?e.value[1]:e.value;return{x:e.x,y:e.y,value:n,errorVal:Bs(e,t)}},f={clipPath:e?"url(#clipPath-".concat(t,")"):null};return o.createElement(fe,f,u.map((function(e){return o.cloneElement(e,{key:"error-bar-".concat(t,"-").concat(e.props.dataKey),data:r,xAxis:i,yAxis:a,layout:l,offset:c,dataPointFormatter:s})})))}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.data,r=e.className,i=e.xAxis,l=e.yAxis,u=e.left,c=e.top,f=e.width,p=e.height,d=e.isAnimationActive,h=e.background,y=e.id;if(t||!n||!n.length)return null;var v=this.state.isAnimationFinished,m=a("recharts-bar",r),g=i&&i.allowDataOverflow,b=l&&l.allowDataOverflow,x=g||b,w=s()(y)?this.id:y;return o.createElement(fe,{className:m},g||b?o.createElement("defs",null,o.createElement("clipPath",{id:"clipPath-".concat(w)},o.createElement("rect",{x:g?u:u-f/2,y:b?c:c-p/2,width:g?f:2*f,height:b?p:2*p}))):null,o.createElement(fe,{className:"recharts-bar-rectangles",clipPath:x?"url(#clipPath-".concat(w,")"):null},h?this.renderBackground():null,this.renderRectangles()),this.renderErrorBar(x,w),(!d||v)&&Qf.renderCallByParent(this.props,n))}}],r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curData:e.data,prevData:t.curData}:e.data!==t.curData?{curData:e.data}:null}}],n&&uv(t.prototype,n),r&&uv(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);function yv(e){return yv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yv(e)}function vv(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,xv(r.key),r)}}function mv(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mv(Object(n),!0).forEach((function(t){bv(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mv(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function bv(e,t,n){return(t=xv(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xv(e){var t=function(e,t){if("object"!==yv(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==yv(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yv(t)?t:String(t)}pv(hv,"displayName","Bar"),pv(hv,"defaultProps",{xAxisId:0,yAxisId:0,legendType:"rect",minPointSize:0,hide:!1,data:[],layout:"vertical",activeBar:!0,isAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:400,animationEasing:"ease"}),pv(hv,"getComposedData",(function(e){var t=e.props,n=e.item,r=e.barPosition,o=e.bandSize,i=e.xAxis,a=e.yAxis,l=e.xAxisTicks,u=e.yAxisTicks,c=e.stackedData,s=e.dataStartIndex,f=e.displayedData,p=e.offset,d=Qs(r,n);if(!d)return null;var h=t.layout,y=n.props,v=y.dataKey,m=y.children,g=y.minPointSize,b="horizontal"===h?a:i,x=c?b.scale.domain():null,w=of({numericAxis:b}),S=G(m,eo),A=f.map((function(e,t){var r,f,p,y,m,b;if(c?r=Zs(c[s+t],x):(r=Bs(e,v),Array.isArray(r)||(r=[w,r])),"horizontal"===h){var A,k=[a.scale(r[0]),a.scale(r[1])],E=k[0],j=k[1];f=rf({axis:i,ticks:l,bandSize:o,offset:d.offset,entry:e,index:t}),p=null!==(A=null!=j?j:E)&&void 0!==A?A:void 0,y=d.size;var P=E-j;if(m=Number.isNaN(P)?0:P,b={x:f,y:a.y,width:y,height:a.height},Math.abs(g)>0&&Math.abs(m)<Math.abs(g)){var C=O(m||g)*(Math.abs(g)-Math.abs(m));p-=C,m+=C}}else{var _=[i.scale(r[0]),i.scale(r[1])],T=_[0],M=_[1];f=T,p=rf({axis:a,ticks:u,bandSize:o,offset:d.offset,entry:e,index:t}),y=M-T,m=d.size,b={x:i.x,y:p,width:i.width,height:m},Math.abs(g)>0&&Math.abs(y)<Math.abs(g)&&(y+=O(y||g)*(Math.abs(g)-Math.abs(y)))}return lv(lv(lv({},e),{},{x:f,y:p,width:y,height:m,value:c?r:r[1],payload:e,background:b},S&&S[t]&&S[t].props),{},{tooltipPayload:[pf(n,e)],tooltipPosition:{x:f+y/2,y:p+m/2}})}));return lv({data:A,layout:h},p)}));var wv=function(e,t,n,r,o){var i=e.width,a=e.height,l=e.layout,u=e.children,c=Object.keys(t),s={left:n.left,leftMirror:n.left,right:i-n.right,rightMirror:i-n.right,top:n.top,topMirror:n.top,bottom:a-n.bottom,bottomMirror:a-n.bottom},f=!!Y(u,hv);return c.reduce((function(i,a){var u,c,p,d,h,y=t[a],v=y.orientation,m=y.domain,g=y.padding,b=void 0===g?{}:g,x=y.mirror,w=y.reversed,O="".concat(v).concat(x?"Mirror":"");if("number"===y.type&&("gap"===y.padding||"no-gap"===y.padding)){var S=m[1]-m[0],A=1/0,k=y.categoricalDomain.sort();k.forEach((function(e,t){t>0&&(A=Math.min((e||0)-(k[t-1]||0),A))}));var E=A/S,j="vertical"===y.layout?n.height:n.width;if("gap"===y.padding&&(u=E*j/2),"no-gap"===y.padding){var C=P(e.barCategoryGap,E*j),_=E*j/2;u=_-C-(_-C)/j*C}}c="xAxis"===r?[n.left+(b.left||0)+(u||0),n.left+n.width-(b.right||0)-(u||0)]:"yAxis"===r?"horizontal"===l?[n.top+n.height-(b.bottom||0),n.top+(b.top||0)]:[n.top+(b.top||0)+(u||0),n.top+n.height-(b.bottom||0)-(u||0)]:y.range,w&&(c=[c[1],c[0]]);var T=Xs(y,o,f),M=T.scale,N=T.realScaleType;M.domain(m).range(c),Ys(M);var I=tf(M,gv(gv({},y),{},{realScaleType:N}));"xAxis"===r?(h="top"===v&&!x||"bottom"===v&&x,p=n.left,d=s[O]-h*y.height):"yAxis"===r&&(h="left"===v&&!x||"right"===v&&x,p=s[O]-h*y.width,d=n.top);var D=gv(gv(gv({},y),I),{},{realScaleType:N,x:p,y:d,scale:M,width:"xAxis"===r?n.width:y.width,height:"yAxis"===r?n.height:y.height});return D.bandSize=sf(D,I),y.hide||"xAxis"!==r?y.hide||(s[O]+=(h?-1:1)*D.width):s[O]+=(h?-1:1)*D.height,gv(gv({},i),{},bv({},a,D))}),{})},Ov=function(e,t){var n=e.x,r=e.y,o=t.x,i=t.y;return{x:Math.min(n,o),y:Math.min(r,i),width:Math.abs(o-n),height:Math.abs(i-r)}},Sv=function(e){var t=e.x1,n=e.y1,r=e.x2,o=e.y2;return Ov({x:t,y:n},{x:r,y:o})},Av=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scale=t}var t,n,r;return t=e,n=[{key:"domain",get:function(){return this.scale.domain}},{key:"range",get:function(){return this.scale.range}},{key:"rangeMin",get:function(){return this.range()[0]}},{key:"rangeMax",get:function(){return this.range()[1]}},{key:"bandwidth",get:function(){return this.scale.bandwidth}},{key:"apply",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.bandAware,r=t.position;if(void 0!==e){if(r)switch(r){case"start":default:return this.scale(e);case"middle":var o=this.bandwidth?this.bandwidth()/2:0;return this.scale(e)+o;case"end":var i=this.bandwidth?this.bandwidth():0;return this.scale(e)+i}if(n){var a=this.bandwidth?this.bandwidth()/2:0;return this.scale(e)+a}return this.scale(e)}}},{key:"isInRange",value:function(e){var t=this.range(),n=t[0],r=t[t.length-1];return n<=r?e>=n&&e<=r:e>=r&&e<=n}}],r=[{key:"create",value:function(t){return new e(t)}}],n&&vv(t.prototype,n),r&&vv(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();bv(Av,"EPS",1e-4);var kv=function(e){var t=Object.keys(e).reduce((function(t,n){return gv(gv({},t),{},bv({},n,Av.create(e[n])))}),{});return gv(gv({},t),{},{apply:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.bandAware,o=n.position;return qy()(e,(function(e,n){return t[n].apply(e,{bandAware:r,position:o})}))},isInRange:function(e){return Xy()(e,(function(e,n){return t[n].isInRange(e)}))}})};function Ev(e){return Ev="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ev(e)}function jv(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jv(Object(n),!0).forEach((function(t){Cv(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jv(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Cv(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ev(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ev(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ev(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Tv(){return Tv=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Tv.apply(this,arguments)}var Mv=function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement("line",Tv({},t,{className:"recharts-reference-line-line"}))},Nv=function(e,t,n,r,o){var i=o.viewBox,a=i.x,l=i.y,u=i.width,c=i.height,s=o.position;if(n){var f=o.y,p=o.yAxis.orientation,d=e.y.apply(f,{position:s});if(Vy(o,"discard")&&!e.y.isInRange(d))return null;var h=[{x:a+u,y:d},{x:a,y:d}];return"left"===p?h.reverse():h}if(t){var y=o.x,v=o.xAxis.orientation,m=e.x.apply(y,{position:s});if(Vy(o,"discard")&&!e.x.isInRange(m))return null;var g=[{x:m,y:l+c},{x:m,y:l}];return"top"===v?g.reverse():g}if(r){var b=o.segment.map((function(t){return e.apply(t,{position:s})}));return Vy(o,"discard")&&$y()(b,(function(t){return!e.isInRange(t)}))?null:b}return null};function Iv(e){var t=e.x,n=e.y,r=e.segment,i=e.xAxis,l=e.yAxis,u=e.shape,c=e.className,s=e.alwaysShow,f=e.clipPathId;pe(void 0===s,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var p=kv({x:i.scale,y:l.scale}),d=k(t),h=k(n),y=r&&2===r.length,v=Nv(p,d,h,y,e);if(!v)return null;var m,g,b=(g=2,function(e){if(Array.isArray(e))return e}(m=v)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(m,g)||function(e,t){if(e){if("string"==typeof e)return _v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_v(e,t):void 0}}(m,g)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),x=b[0],w=x.x,O=x.y,S=b[1],A=S.x,E=S.y,j=Pv(Pv({clipPath:Vy(e,"hidden")?"url(#".concat(f,")"):void 0},ne(e,!0)),{},{x1:w,y1:O,x2:A,y2:E});return o.createElement(fe,{className:a("recharts-reference-line",c)},Mv(u,j),Lf.renderCallByParent(e,Sv({x1:w,y1:O,x2:A,y2:E})))}function Dv(e){return Dv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Dv(e)}function Rv(){return Rv=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Rv.apply(this,arguments)}function Lv(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Lv(Object(n),!0).forEach((function(t){zv(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Lv(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function zv(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Dv(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Dv(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Dv(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Iv.displayName="ReferenceLine",Iv.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,fill:"none",stroke:"#ccc",fillOpacity:1,strokeWidth:1,position:"middle"};var Fv=function(e){var t=e.x,n=e.y,r=e.xAxis,o=e.yAxis,i=kv({x:r.scale,y:o.scale}),a=i.apply({x:t,y:n},{bandAware:!0});return Vy(e,"discard")&&!i.isInRange(a)?null:a};function Uv(e){var t=e.x,n=e.y,r=e.r,i=e.alwaysShow,l=e.clipPathId,u=k(t),c=k(n);if(pe(void 0===i,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.'),!u||!c)return null;var s=Fv(e);if(!s)return null;var f=s.x,p=s.y,d=e.shape,h=e.className,y=Bv(Bv({clipPath:Vy(e,"hidden")?"url(#".concat(l,")"):void 0},ne(e,!0)),{},{cx:f,cy:p});return o.createElement(fe,{className:a("recharts-reference-dot",h)},Uv.renderDot(d,y),Lf.renderCallByParent(e,{x:f-r,y:p-r,width:2*r,height:2*r}))}function Wv(e){return Wv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wv(e)}function $v(){return $v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$v.apply(this,arguments)}function Vv(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Hv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vv(Object(n),!0).forEach((function(t){qv(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vv(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function qv(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Wv(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Wv(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Wv(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Uv.displayName="ReferenceDot",Uv.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#fff",stroke:"#ccc",fillOpacity:1,strokeWidth:1},Uv.renderDot=function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(ld,Rv({},t,{cx:t.cx,cy:t.cy,className:"recharts-reference-dot-dot"}))};var Kv=function(e,t,n,r,o){var i=o.x1,a=o.x2,l=o.y1,u=o.y2,c=o.xAxis,s=o.yAxis;if(!c||!s)return null;var f=kv({x:c.scale,y:s.scale}),p={x:e?f.x.apply(i,{position:"start"}):f.x.rangeMin,y:n?f.y.apply(l,{position:"start"}):f.y.rangeMin},d={x:t?f.x.apply(a,{position:"end"}):f.x.rangeMax,y:r?f.y.apply(u,{position:"end"}):f.y.rangeMax};return!Vy(o,"discard")||f.isInRange(p)&&f.isInRange(d)?Ov(p,d):null};function Xv(e){var t=e.x1,n=e.x2,r=e.y1,i=e.y2,l=e.className,u=e.alwaysShow,c=e.clipPathId;pe(void 0===u,'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');var s=k(t),f=k(n),p=k(r),d=k(i),h=e.shape;if(!(s||f||p||d||h))return null;var y=Kv(s,f,p,d,e);if(!y&&!h)return null;var v=Vy(e,"hidden")?"url(#".concat(c,")"):void 0;return o.createElement(fe,{className:a("recharts-reference-area",l)},Xv.renderRect(h,Hv(Hv({clipPath:v},ne(e,!0)),y)),Lf.renderCallByParent(e,y))}function Gv(e,t,n){if(t<1)return[];if(1===t&&void 0===n)return e;for(var r=[],o=0;o<e.length;o+=t){if(void 0!==n&&!0!==n(e[o]))return;r.push(e[o])}return r}function Yv(e,t,n,r,o){if(e*t<e*r||e*t>e*o)return!1;var i=n();return e*(t-e*i/2-r)>=0&&e*(t+e*i/2-o)<=0}function Qv(e){return Qv="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qv(e)}function Zv(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Jv(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Zv(Object(n),!0).forEach((function(t){em(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Zv(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function em(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Qv(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Qv(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Qv(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tm(e,t,n){var r=e.tick,o=e.ticks,i=e.viewBox,a=e.minTickGap,l=e.orientation,u=e.interval,c=e.tickFormatter,s=e.unit,f=e.angle;if(!o||!o.length||!r)return[];if(A(u)||Dr.isSsr)return function(e,t){return Gv(e,t+1)}(o,"number"==typeof u&&A(u)?u:0);var p=[],d="top"===l||"bottom"===l?"width":"height",y=s&&"width"===d?uo(s,{fontSize:t,letterSpacing:n}):{width:0,height:0},v=function(e,r){var o=h()(c)?c(e.value,r):e.value;return"width"===d?function(e,t,n){return function(e){var t=e.width,n=e.height,r=((arguments.length>1&&void 0!==arguments[1]?arguments[1]:0)%180+180)%180*Math.PI/180,o=Math.atan(n/t),i=r>o&&r<Math.PI-o?n/Math.sin(r):t/Math.cos(r);return Math.abs(i)}({width:e.width+t.width,height:e.height+t.height},n)}(uo(o,{fontSize:t,letterSpacing:n}),y,f):uo(o,{fontSize:t,letterSpacing:n})[d]},m=o.length>=2?O(o[1].coordinate-o[0].coordinate):1,g=function(e,t,n){var r="width"===n,o=e.x,i=e.y,a=e.width,l=e.height;return 1===t?{start:r?o:i,end:r?o+a:i+l}:{start:r?o+a:i+l,end:r?o:i}}(i,m,d);return"equidistantPreserveStart"===u?function(e,t,n,r,o){for(var i,a=(r||[]).slice(),l=t.start,u=t.end,c=0,s=1,f=l,p=function(){var t=null==r?void 0:r[c];if(void 0===t)return{v:Gv(r,s)};var i,a=c,p=function(){return void 0===i&&(i=n(t,a)),i},d=t.coordinate,h=0===c||Yv(e,d,p,f,u);h||(c=0,f=l,s+=1),h&&(f=d+e*(p()/2+o),c+=s)};s<=a.length;)if(i=p())return i.v;return[]}(m,g,v,o,a):(p="preserveStart"===u||"preserveStartEnd"===u?function(e,t,n,r,o,i){var a=(r||[]).slice(),l=a.length,u=t.start,c=t.end;if(i){var s=r[l-1],f=n(s,l-1),p=e*(s.coordinate+e*f/2-c);a[l-1]=s=Jv(Jv({},s),{},{tickCoord:p>0?s.coordinate-p*e:s.coordinate}),Yv(e,s.tickCoord,(function(){return f}),u,c)&&(c=s.tickCoord-e*(f/2+o),a[l-1]=Jv(Jv({},s),{},{isShow:!0}))}for(var d=i?l-1:l,h=function(t){var r,i=a[t],l=function(){return void 0===r&&(r=n(i,t)),r};if(0===t){var s=e*(i.coordinate-e*l()/2-u);a[t]=i=Jv(Jv({},i),{},{tickCoord:s<0?i.coordinate-s*e:i.coordinate})}else a[t]=i=Jv(Jv({},i),{},{tickCoord:i.coordinate});Yv(e,i.tickCoord,l,u,c)&&(u=i.tickCoord+e*(l()/2+o),a[t]=Jv(Jv({},i),{},{isShow:!0}))},y=0;y<d;y++)h(y);return a}(m,g,v,o,a,"preserveStartEnd"===u):function(e,t,n,r,o){for(var i=(r||[]).slice(),a=i.length,l=t.start,u=t.end,c=function(t){var r,c=i[t],s=function(){return void 0===r&&(r=n(c,t)),r};if(t===a-1){var f=e*(c.coordinate+e*s()/2-u);i[t]=c=Jv(Jv({},c),{},{tickCoord:f>0?c.coordinate-f*e:c.coordinate})}else i[t]=c=Jv(Jv({},c),{},{tickCoord:c.coordinate});Yv(e,c.tickCoord,s,l,u)&&(u=c.tickCoord-e*(s()/2+o),i[t]=Jv(Jv({},c),{},{isShow:!0}))},s=a-1;s>=0;s--)c(s);return i}(m,g,v,o,a),p.filter((function(e){return e.isShow})))}Xv.displayName="ReferenceArea",Xv.defaultProps={isFront:!1,ifOverflow:"discard",xAxisId:0,yAxisId:0,r:10,fill:"#ccc",fillOpacity:.5,stroke:"none",strokeWidth:1},Xv.renderRect=function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Zp,$v({},t,{className:"recharts-reference-area-rect"}))};var nm=["viewBox"],rm=["viewBox"],om=["ticks"];function im(e){return im="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},im(e)}function am(){return am=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},am.apply(this,arguments)}function lm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function um(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lm(Object(n),!0).forEach((function(t){dm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function cm(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function sm(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,hm(r.key),r)}}function fm(e,t){return fm=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},fm(e,t)}function pm(e){return pm=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},pm(e)}function dm(e,t,n){return(t=hm(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function hm(e){var t=function(e,t){if("object"!==im(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==im(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===im(t)?t:String(t)}var ym=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&fm(e,t)}(s,e);var t,n,r,i,l,c=(i=s,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=pm(i);if(l){var n=pm(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===im(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(t=c.call(this,e)).state={fontSize:"",letterSpacing:""},t}return t=s,n=[{key:"shouldComponentUpdate",value:function(e,t){var n=e.viewBox,r=cm(e,nm),o=this.props,i=o.viewBox,a=cm(o,rm);return!M(n,i)||!M(r,a)||!M(t,this.state)}},{key:"componentDidMount",value:function(){var e=this.layerReference;if(e){var t=e.getElementsByClassName("recharts-cartesian-axis-tick-value")[0];t&&this.setState({fontSize:window.getComputedStyle(t).fontSize,letterSpacing:window.getComputedStyle(t).letterSpacing})}}},{key:"getTickLineCoord",value:function(e){var t,n,r,o,i,a,l=this.props,u=l.x,c=l.y,s=l.width,f=l.height,p=l.orientation,d=l.tickSize,h=l.mirror,y=l.tickMargin,v=h?-1:1,m=e.tickSize||d,g=A(e.tickCoord)?e.tickCoord:e.coordinate;switch(p){case"top":t=n=e.coordinate,a=(r=(o=c+ +!h*f)-v*m)-v*y,i=g;break;case"left":r=o=e.coordinate,i=(t=(n=u+ +!h*s)-v*m)-v*y,a=g;break;case"right":r=o=e.coordinate,i=(t=(n=u+ +h*s)+v*m)+v*y,a=g;break;default:t=n=e.coordinate,a=(r=(o=c+ +h*f)+v*m)+v*y,i=g}return{line:{x1:t,y1:r,x2:n,y2:o},tick:{x:i,y:a}}}},{key:"getTickTextAnchor",value:function(){var e,t=this.props,n=t.orientation,r=t.mirror;switch(n){case"left":e=r?"start":"end";break;case"right":e=r?"end":"start";break;default:e="middle"}return e}},{key:"getTickVerticalAnchor",value:function(){var e=this.props,t=e.orientation,n=e.mirror,r="end";switch(t){case"left":case"right":r="middle";break;case"top":r=n?"start":"end";break;default:r=n?"end":"start"}return r}},{key:"renderAxisLine",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,i=e.height,l=e.orientation,c=e.mirror,s=e.axisLine,f=um(um(um({},ne(this.props)),ne(s)),{},{fill:"none"});if("top"===l||"bottom"===l){var p=+("top"===l&&!c||"bottom"===l&&c);f=um(um({},f),{},{x1:t,y1:n+p*i,x2:t+r,y2:n+p*i})}else{var d=+("left"===l&&!c||"right"===l&&c);f=um(um({},f),{},{x1:t+d*r,y1:n,x2:t+d*r,y2:n+i})}return o.createElement("line",am({},f,{className:a("recharts-cartesian-axis-line",u()(s,"className"))}))}},{key:"renderTicks",value:function(e,t,n){var r=this,i=this.props,l=i.tickLine,c=i.stroke,f=i.tick,p=i.tickFormatter,d=i.unit,y=tm(um(um({},this.props),{},{ticks:e}),t,n),v=this.getTickTextAnchor(),m=this.getTickVerticalAnchor(),g=ne(this.props),b=ne(f),x=um(um({},g),{},{fill:"none"},ne(l)),w=y.map((function(e,t){var n=r.getTickLineCoord(e),i=n.line,w=n.tick,O=um(um(um(um({textAnchor:v,verticalAnchor:m},g),{},{stroke:"none",fill:c},b),w),{},{index:t,payload:e,visibleTicksCount:y.length,tickFormatter:p});return o.createElement(fe,am({className:"recharts-cartesian-axis-tick",key:"tick-".concat(e.value,"-").concat(e.coordinate,"-").concat(e.tickCoord)},z(r.props,e,t)),l&&o.createElement("line",am({},x,i,{className:a("recharts-cartesian-axis-tick-line",u()(l,"className"))})),f&&s.renderTickItem(f,O,"".concat(h()(p)?p(e.value,t):e.value).concat(d||"")))}));return o.createElement("g",{className:"recharts-cartesian-axis-ticks"},w)}},{key:"render",value:function(){var e=this,t=this.props,n=t.axisLine,r=t.width,i=t.height,l=t.ticksGenerator,u=t.className;if(t.hide)return null;var c=this.props,s=c.ticks,f=cm(c,om),p=s;return h()(l)&&(p=s&&s.length>0?l(this.props):l(f)),r<=0||i<=0||!p||!p.length?null:o.createElement(fe,{className:a("recharts-cartesian-axis",u),ref:function(t){e.layerReference=t}},n&&this.renderAxisLine(),this.renderTicks(p,this.state.fontSize,this.state.letterSpacing),Lf.renderCallByParent(this.props))}}],r=[{key:"renderTickItem",value:function(e,t,n){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Do,am({},t,{className:"recharts-cartesian-axis-tick-value"}),n)}}],n&&sm(t.prototype,n),r&&sm(t,r),Object.defineProperty(t,"prototype",{writable:!1}),s}(o.Component);dm(ym,"displayName","CartesianAxis"),dm(ym,"defaultProps",{x:0,y:0,width:0,height:0,viewBox:{x:0,y:0,width:0,height:0},orientation:"bottom",ticks:[],stroke:"#666",tickLine:!0,axisLine:!0,tick:!0,mirror:!1,minTickGap:5,tickSize:6,tickMargin:2,interval:"preserveEnd"});var vm=["x1","y1","x2","y2","key"],mm=["offset"];function gm(e){return gm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},gm(e)}function bm(){return bm=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},bm.apply(this,arguments)}function xm(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function wm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Om(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wm(Object(n),!0).forEach((function(t){Em(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Sm(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,jm(r.key),r)}}function Am(e,t){return Am=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Am(e,t)}function km(e){return km=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},km(e)}function Em(e,t,n){return(t=jm(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function jm(e){var t=function(e,t){if("object"!==gm(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==gm(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===gm(t)?t:String(t)}var Pm=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Am(e,t)}(u,e);var t,n,r,i,a,l=(i=u,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=km(i);if(a){var n=km(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===gm(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),l.apply(this,arguments)}return t=u,n=[{key:"renderHorizontal",value:function(e){var t=this,n=this.props,r=n.x,i=n.width,a=n.horizontal;if(!e||!e.length)return null;var l=e.map((function(e,n){var o=Om(Om({},t.props),{},{x1:r,y1:e,x2:r+i,y2:e,key:"line-".concat(n),index:n});return u.renderLineItem(a,o)}));return o.createElement("g",{className:"recharts-cartesian-grid-horizontal"},l)}},{key:"renderVertical",value:function(e){var t=this,n=this.props,r=n.y,i=n.height,a=n.vertical;if(!e||!e.length)return null;var l=e.map((function(e,n){var o=Om(Om({},t.props),{},{x1:e,y1:r,x2:e,y2:r+i,key:"line-".concat(n),index:n});return u.renderLineItem(a,o)}));return o.createElement("g",{className:"recharts-cartesian-grid-vertical"},l)}},{key:"renderVerticalStripes",value:function(e){var t=this.props.verticalFill;if(!t||!t.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,a=n.y,l=n.width,u=n.height,c=e.map((function(e){return Math.round(e+i-i)})).sort((function(e,t){return e-t}));i!==c[0]&&c.unshift(0);var s=c.map((function(e,n){var s=c[n+1]?c[n+1]-e:i+l-e;if(s<=0)return null;var f=n%t.length;return o.createElement("rect",{key:"react-".concat(n),x:e,y:a,width:s,height:u,stroke:"none",fill:t[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return o.createElement("g",{className:"recharts-cartesian-gridstripes-vertical"},s)}},{key:"renderHorizontalStripes",value:function(e){var t=this.props.horizontalFill;if(!t||!t.length)return null;var n=this.props,r=n.fillOpacity,i=n.x,a=n.y,l=n.width,u=n.height,c=e.map((function(e){return Math.round(e+a-a)})).sort((function(e,t){return e-t}));a!==c[0]&&c.unshift(0);var s=c.map((function(e,n){var s=c[n+1]?c[n+1]-e:a+u-e;if(s<=0)return null;var f=n%t.length;return o.createElement("rect",{key:"react-".concat(n),y:e,x:i,height:s,width:l,stroke:"none",fill:t[f],fillOpacity:r,className:"recharts-cartesian-grid-bg"})}));return o.createElement("g",{className:"recharts-cartesian-gridstripes-horizontal"},s)}},{key:"renderBackground",value:function(){var e=this.props.fill;if(!e||"none"===e)return null;var t=this.props,n=t.fillOpacity,r=t.x,i=t.y,a=t.width,l=t.height;return o.createElement("rect",{x:r,y:i,width:a,height:l,stroke:"none",fill:e,fillOpacity:n,className:"recharts-cartesian-grid-bg"})}},{key:"render",value:function(){var e=this.props,t=e.x,n=e.y,r=e.width,i=e.height,a=e.horizontal,l=e.vertical,u=e.horizontalCoordinatesGenerator,c=e.verticalCoordinatesGenerator,s=e.xAxis,f=e.yAxis,p=e.offset,d=e.chartWidth,y=e.chartHeight,v=e.syncWithTicks,m=e.horizontalValues,g=e.verticalValues;if(!A(r)||r<=0||!A(i)||i<=0||!A(t)||t!==+t||!A(n)||n!==+n)return null;var b=this.props,x=b.horizontalPoints,w=b.verticalPoints;if((!x||!x.length)&&h()(u)){var O=m&&m.length;x=u({yAxis:f?Om(Om({},f),{},{ticks:O?m:f.ticks}):void 0,width:d,height:y,offset:p},!!O||v)}if((!w||!w.length)&&h()(c)){var S=g&&g.length;w=c({xAxis:s?Om(Om({},s),{},{ticks:S?g:s.ticks}):void 0,width:d,height:y,offset:p},!!S||v)}return o.createElement("g",{className:"recharts-cartesian-grid"},this.renderBackground(),a&&this.renderHorizontal(x),l&&this.renderVertical(w),a&&this.renderHorizontalStripes(x),l&&this.renderVerticalStripes(w))}}],r=[{key:"renderLineItem",value:function(e,t){var n;if(o.isValidElement(e))n=o.cloneElement(e,t);else if(h()(e))n=e(t);else{var r=t.x1,i=t.y1,a=t.x2,l=t.y2,u=t.key,c=xm(t,vm),s=ne(c),f=(s.offset,xm(s,mm));n=o.createElement("line",bm({},f,{x1:r,y1:i,x2:a,y2:l,fill:"none",key:u}))}return n}}],n&&Sm(t.prototype,n),r&&Sm(t,r),Object.defineProperty(t,"prototype",{writable:!1}),u}(o.PureComponent);Em(Pm,"displayName","CartesianGrid"),Em(Pm,"defaultProps",{horizontal:!0,vertical:!0,horizontalPoints:[],verticalPoints:[],stroke:"#ccc",fill:"none",verticalFill:[],horizontalFill:[]});var Cm=["type","layout","connectNulls","ref"];function _m(e){return _m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_m(e)}function Tm(){return Tm=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Tm.apply(this,arguments)}function Mm(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Nm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mm(Object(n),!0).forEach((function(t){Fm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mm(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Im(e){return function(e){if(Array.isArray(e))return Dm(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Dm(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Dm(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Dm(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Rm(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Um(r.key),r)}}function Lm(e,t){return Lm=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Lm(e,t)}function Bm(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function zm(e){return zm=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},zm(e)}function Fm(e,t,n){return(t=Um(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Um(e){var t=function(e,t){if("object"!==_m(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==_m(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===_m(t)?t:String(t)}var Wm=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Lm(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=zm(i);if(l){var n=zm(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===_m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Bm(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Fm(Bm(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!0,totalLength:0}),Fm(Bm(e),"generateSimpleStrokeDasharray",(function(e,t){return"".concat(t,"px ").concat(e-t,"px")})),Fm(Bm(e),"getStrokeDasharray",(function(t,n,r){var o=r.reduce((function(e,t){return e+t}));if(!o)return e.generateSimpleStrokeDasharray(n,t);for(var i=Math.floor(t/o),a=t%o,l=n-t,u=[],s=0,f=0;s<r.length;f+=r[s],++s)if(f+r[s]>a){u=[].concat(Im(r.slice(0,s)),[a-f]);break}var p=u.length%2==0?[0,l]:[l];return[].concat(Im(c.repeat(r,i)),Im(u),p).map((function(e){return"".concat(e,"px")})).join(", ")})),Fm(Bm(e),"id",j("recharts-line-")),Fm(Bm(e),"pathRef",(function(t){e.mainCurve=t})),Fm(Bm(e),"handleAnimationEnd",(function(){e.setState({isAnimationFinished:!0}),e.props.onAnimationEnd&&e.props.onAnimationEnd()})),Fm(Bm(e),"handleAnimationStart",(function(){e.setState({isAnimationFinished:!1}),e.props.onAnimationStart&&e.props.onAnimationStart()})),e}return t=c,n=[{key:"componentDidMount",value:function(){if(this.props.isAnimationActive){var e=this.getTotalLength();this.setState({totalLength:e})}}},{key:"componentDidUpdate",value:function(){if(this.props.isAnimationActive){var e=this.getTotalLength();e!==this.state.totalLength&&this.setState({totalLength:e})}}},{key:"getTotalLength",value:function(){var e=this.mainCurve;try{return e&&e.getTotalLength&&e.getTotalLength()||0}catch(e){return 0}}},{key:"renderErrorBar",value:function(e,t){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var n=this.props,r=n.points,i=n.xAxis,a=n.yAxis,l=n.layout,u=G(n.children,Es);if(!u)return null;var c=function(e,t){return{x:e.x,y:e.y,value:e.value,errorVal:Bs(e.payload,t)}},s={clipPath:e?"url(#clipPath-".concat(t,")"):null};return o.createElement(fe,s,u.map((function(e){return o.cloneElement(e,{key:"bar-".concat(e.props.dataKey),data:r,xAxis:i,yAxis:a,layout:l,dataPointFormatter:c})})))}},{key:"renderDots",value:function(e,t,n){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var r=this.props,i=r.dot,a=r.points,l=r.dataKey,u=ne(this.props),s=ne(i,!0),f=a.map((function(e,t){var n=Nm(Nm(Nm({key:"dot-".concat(t),r:3},u),s),{},{value:e.value,dataKey:l,cx:e.x,cy:e.y,index:t,payload:e.payload});return c.renderDotItem(i,n)})),p={clipPath:e?"url(#clipPath-".concat(t?"":"dots-").concat(n,")"):null};return o.createElement(fe,Tm({className:"recharts-line-dots",key:"dots"},p),f)}},{key:"renderCurveStatically",value:function(e,t,n,r){var i=this.props,a=i.type,l=i.layout,u=i.connectNulls,c=(i.ref,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(i,Cm)),s=Nm(Nm(Nm({},ne(c,!0)),{},{fill:"none",className:"recharts-line-curve",clipPath:t?"url(#clipPath-".concat(n,")"):null,points:e},r),{},{type:a,layout:l,connectNulls:u});return o.createElement(Wp,Tm({},s,{pathRef:this.pathRef}))}},{key:"renderCurveWithAnimation",value:function(e,t){var n=this,r=this.props,i=r.points,a=r.strokeDasharray,l=r.isAnimationActive,u=r.animationBegin,c=r.animationDuration,s=r.animationEasing,f=r.animationId,p=r.animateNewValues,d=r.width,h=r.height,y=this.state,v=y.prevPoints,m=y.totalLength;return o.createElement(gr,{begin:u,duration:c,isActive:l,easing:s,from:{t:0},to:{t:1},key:"line-".concat(f),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var o=r.t;if(v){var l=v.length/i.length,u=i.map((function(e,t){var n=Math.floor(t*l);if(v[n]){var r=v[n],i=_(r.x,e.x),a=_(r.y,e.y);return Nm(Nm({},e),{},{x:i(o),y:a(o)})}if(p){var u=_(2*d,e.x),c=_(h/2,e.y);return Nm(Nm({},e),{},{x:u(o),y:c(o)})}return Nm(Nm({},e),{},{x:e.x,y:e.y})}));return n.renderCurveStatically(u,e,t)}var c,s=_(0,m)(o);if(a){var f="".concat(a).split(/[,\s]+/gim).map((function(e){return parseFloat(e)}));c=n.getStrokeDasharray(s,m,f)}else c=n.generateSimpleStrokeDasharray(m,s);return n.renderCurveStatically(i,e,t,{strokeDasharray:c})}))}},{key:"renderCurve",value:function(e,t){var n=this.props,r=n.points,o=n.isAnimationActive,i=this.state,a=i.prevPoints,l=i.totalLength;return o&&r&&r.length&&(!a&&l>0||!Xc()(a,r))?this.renderCurveWithAnimation(e,t):this.renderCurveStatically(r,e,t)}},{key:"render",value:function(){var e,t=this.props,n=t.hide,r=t.dot,i=t.points,l=t.className,u=t.xAxis,c=t.yAxis,f=t.top,p=t.left,d=t.width,h=t.height,y=t.isAnimationActive,v=t.id;if(n||!i||!i.length)return null;var m=this.state.isAnimationFinished,g=1===i.length,b=a("recharts-line",l),x=u&&u.allowDataOverflow,w=c&&c.allowDataOverflow,O=x||w,S=s()(v)?this.id:v,A=null!==(e=ne(r))&&void 0!==e?e:{r:3,strokeWidth:2},k=A.r,E=void 0===k?3:k,j=A.strokeWidth,P=void 0===j?2:j,C=(ee(r)?r:{}).clipDot,_=void 0===C||C,T=2*E+P;return o.createElement(fe,{className:b},x||w?o.createElement("defs",null,o.createElement("clipPath",{id:"clipPath-".concat(S)},o.createElement("rect",{x:x?p:p-d/2,y:w?f:f-h/2,width:x?d:2*d,height:w?h:2*h})),!_&&o.createElement("clipPath",{id:"clipPath-dots-".concat(S)},o.createElement("rect",{x:p-T/2,y:f-T/2,width:d+T,height:h+T}))):null,!g&&this.renderCurve(O,S),this.renderErrorBar(O,S),(g||r)&&this.renderDots(O,_,S),(!y||m)&&Qf.renderCallByParent(this.props,i))}}],r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curPoints:e.points,prevPoints:t.curPoints}:e.points!==t.curPoints?{curPoints:e.points}:null}},{key:"repeat",value:function(e,t){for(var n=e.length%2!=0?[].concat(Im(e),[0]):e,r=[],o=0;o<t;++o)r=[].concat(Im(r),Im(n));return r}},{key:"renderDotItem",value:function(e,t){var n;if(o.isValidElement(e))n=o.cloneElement(e,t);else if(h()(e))n=e(t);else{var r=a("recharts-line-dot",e?e.className:"");n=o.createElement(ld,Tm({},t,{className:r}))}return n}}],n&&Rm(t.prototype,n),r&&Rm(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);Fm(Wm,"displayName","Line"),Fm(Wm,"defaultProps",{xAxisId:0,yAxisId:0,connectNulls:!1,activeDot:!0,dot:!0,legendType:"line",stroke:"#3182bd",strokeWidth:1,fill:"#fff",points:[],isAnimationActive:!Dr.isSsr,animateNewValues:!0,animationBegin:0,animationDuration:1500,animationEasing:"ease",hide:!1,label:!1}),Fm(Wm,"getComposedData",(function(e){var t=e.props,n=e.xAxis,r=e.yAxis,o=e.xAxisTicks,i=e.yAxisTicks,a=e.dataKey,l=e.bandSize,u=e.displayedData,c=e.offset,f=t.layout,p=u.map((function(e,t){var u=Bs(e,a);return"horizontal"===f?{x:nf({axis:n,ticks:o,bandSize:l,entry:e,index:t}),y:s()(u)?null:r.scale(u),value:u,payload:e}:{x:s()(u)?null:n.scale(u),y:nf({axis:r,ticks:i,bandSize:l,entry:e,index:t}),value:u,payload:e}}));return Nm({points:p,layout:f},c)}));var $m,Vm=["layout","type","stroke","connectNulls","isRange","ref"];function Hm(e){return Hm="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hm(e)}function qm(){return qm=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qm.apply(this,arguments)}function Km(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xm(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Km(Object(n),!0).forEach((function(t){Jm(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Km(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Gm(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,eg(r.key),r)}}function Ym(e,t){return Ym=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ym(e,t)}function Qm(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Zm(e){return Zm=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Zm(e)}function Jm(e,t,n){return(t=eg(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function eg(e){var t=function(e,t){if("object"!==Hm(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Hm(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Hm(t)?t:String(t)}var tg=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ym(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Zm(i);if(l){var n=Zm(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Hm(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Qm(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Jm(Qm(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!0}),Jm(Qm(e),"id",j("recharts-area-")),Jm(Qm(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h()(t)&&t()})),Jm(Qm(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h()(t)&&t()})),e}return t=c,n=[{key:"renderDots",value:function(e,t,n){var r=this.props.isAnimationActive,i=this.state.isAnimationFinished;if(r&&!i)return null;var a=this.props,l=a.dot,u=a.points,s=a.dataKey,f=ne(this.props),p=ne(l,!0),d=u.map((function(e,t){var n=Xm(Xm(Xm({key:"dot-".concat(t),r:3},f),p),{},{dataKey:s,cx:e.x,cy:e.y,index:t,value:e.value,payload:e.payload});return c.renderDotItem(l,n)})),h={clipPath:e?"url(#clipPath-".concat(t?"":"dots-").concat(n,")"):null};return o.createElement(fe,qm({className:"recharts-area-dots"},h),d)}},{key:"renderHorizontalRect",value:function(e){var t=this.props,n=t.baseLine,r=t.points,i=t.strokeWidth,a=r[0].x,l=r[r.length-1].x,u=e*Math.abs(a-l),c=Wc()(r.map((function(e){return e.y||0})));return A(n)&&"number"==typeof n?c=Math.max(n,c):n&&Array.isArray(n)&&n.length&&(c=Math.max(Wc()(n.map((function(e){return e.y||0}))),c)),A(c)?o.createElement("rect",{x:a<l?a:a-u,y:0,width:u,height:Math.floor(c+(i?parseInt("".concat(i),10):1))}):null}},{key:"renderVerticalRect",value:function(e){var t=this.props,n=t.baseLine,r=t.points,i=t.strokeWidth,a=r[0].y,l=r[r.length-1].y,u=e*Math.abs(a-l),c=Wc()(r.map((function(e){return e.x||0})));return A(n)&&"number"==typeof n?c=Math.max(n,c):n&&Array.isArray(n)&&n.length&&(c=Math.max(Wc()(n.map((function(e){return e.x||0}))),c)),A(c)?o.createElement("rect",{x:0,y:a<l?a:a-u,width:c+(i?parseInt("".concat(i),10):1),height:Math.floor(u)}):null}},{key:"renderClipRect",value:function(e){return"vertical"===this.props.layout?this.renderVerticalRect(e):this.renderHorizontalRect(e)}},{key:"renderAreaStatically",value:function(e,t,n,r){var i=this.props,a=i.layout,l=i.type,u=i.stroke,c=i.connectNulls,s=i.isRange,f=(i.ref,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(i,Vm));return o.createElement(fe,{clipPath:n?"url(#clipPath-".concat(r,")"):null},o.createElement(Wp,qm({},ne(f,!0),{points:e,connectNulls:c,type:l,baseLine:t,layout:a,stroke:"none",className:"recharts-area-area"})),"none"!==u&&o.createElement(Wp,qm({},ne(this.props),{className:"recharts-area-curve",layout:a,type:l,connectNulls:c,fill:"none",points:e})),"none"!==u&&s&&o.createElement(Wp,qm({},ne(this.props),{className:"recharts-area-curve",layout:a,type:l,connectNulls:c,fill:"none",points:t})))}},{key:"renderAreaWithAnimation",value:function(e,t){var n=this,r=this.props,i=r.points,a=r.baseLine,l=r.isAnimationActive,u=r.animationBegin,c=r.animationDuration,f=r.animationEasing,p=r.animationId,d=this.state,h=d.prevPoints,y=d.prevBaseLine;return o.createElement(gr,{begin:u,duration:c,isActive:l,easing:f,from:{t:0},to:{t:1},key:"area-".concat(p),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(r){var l=r.t;if(h){var u,c=h.length/i.length,f=i.map((function(e,t){var n=Math.floor(t*c);if(h[n]){var r=h[n],o=_(r.x,e.x),i=_(r.y,e.y);return Xm(Xm({},e),{},{x:o(l),y:i(l)})}return e}));return u=A(a)&&"number"==typeof a?_(y,a)(l):s()(a)||b()(a)?_(y,0)(l):a.map((function(e,t){var n=Math.floor(t*c);if(y[n]){var r=y[n],o=_(r.x,e.x),i=_(r.y,e.y);return Xm(Xm({},e),{},{x:o(l),y:i(l)})}return e})),n.renderAreaStatically(f,u,e,t)}return o.createElement(fe,null,o.createElement("defs",null,o.createElement("clipPath",{id:"animationClipPath-".concat(t)},n.renderClipRect(l))),o.createElement(fe,{clipPath:"url(#animationClipPath-".concat(t,")")},n.renderAreaStatically(i,a,e,t)))}))}},{key:"renderArea",value:function(e,t){var n=this.props,r=n.points,o=n.baseLine,i=n.isAnimationActive,a=this.state,l=a.prevPoints,u=a.prevBaseLine,c=a.totalLength;return i&&r&&r.length&&(!l&&c>0||!Xc()(l,r)||!Xc()(u,o))?this.renderAreaWithAnimation(e,t):this.renderAreaStatically(r,o,e,t)}},{key:"render",value:function(){var e,t=this.props,n=t.hide,r=t.dot,i=t.points,l=t.className,u=t.top,c=t.left,f=t.xAxis,p=t.yAxis,d=t.width,h=t.height,y=t.isAnimationActive,v=t.id;if(n||!i||!i.length)return null;var m=this.state.isAnimationFinished,g=1===i.length,b=a("recharts-area",l),x=f&&f.allowDataOverflow,w=p&&p.allowDataOverflow,O=x||w,S=s()(v)?this.id:v,A=null!==(e=ne(r))&&void 0!==e?e:{r:3,strokeWidth:2},k=A.r,E=void 0===k?3:k,j=A.strokeWidth,P=void 0===j?2:j,C=(ee(r)?r:{}).clipDot,_=void 0===C||C,T=2*E+P;return o.createElement(fe,{className:b},x||w?o.createElement("defs",null,o.createElement("clipPath",{id:"clipPath-".concat(S)},o.createElement("rect",{x:x?c:c-d/2,y:w?u:u-h/2,width:x?d:2*d,height:w?h:2*h})),!_&&o.createElement("clipPath",{id:"clipPath-dots-".concat(S)},o.createElement("rect",{x:c-T/2,y:u-T/2,width:d+T,height:h+T}))):null,g?null:this.renderArea(O,S),(r||g)&&this.renderDots(O,_,S),(!y||m)&&Qf.renderCallByParent(this.props,i))}}],r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curPoints:e.points,curBaseLine:e.baseLine,prevPoints:t.curPoints,prevBaseLine:t.curBaseLine}:e.points!==t.curPoints||e.baseLine!==t.curBaseLine?{curPoints:e.points,curBaseLine:e.baseLine}:null}}],n&&Gm(t.prototype,n),r&&Gm(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);$m=tg,Jm(tg,"displayName","Area"),Jm(tg,"defaultProps",{stroke:"#3182bd",fill:"#3182bd",fillOpacity:.6,xAxisId:0,yAxisId:0,legendType:"line",connectNulls:!1,points:[],dot:!1,activeDot:!0,hide:!1,isAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"ease"}),Jm(tg,"getBaseValue",(function(e,t,n,r){var o=e.layout,i=e.baseValue,a=t.props.baseValue,l=null!=a?a:i;if(A(l)&&"number"==typeof l)return l;var u="horizontal"===o?r:n,c=u.scale.domain();if("number"===u.type){var s=Math.max(c[0],c[1]),f=Math.min(c[0],c[1]);return"dataMin"===l?f:"dataMax"===l||s<0?s:Math.max(Math.min(c[0],c[1]),0)}return"dataMin"===l?c[0]:"dataMax"===l?c[1]:c[0]})),Jm(tg,"getComposedData",(function(e){var t,n=e.props,r=e.item,o=e.xAxis,i=e.yAxis,a=e.xAxisTicks,l=e.yAxisTicks,u=e.bandSize,c=e.dataKey,s=e.stackedData,f=e.dataStartIndex,p=e.displayedData,d=e.offset,h=n.layout,y=s&&s.length,v=$m.getBaseValue(n,r,o,i),m="horizontal"===h,g=!1,b=p.map((function(e,t){var n;y?n=s[f+t]:(n=Bs(e,c),Array.isArray(n)?g=!0:n=[v,n]);var r=null==n[1]||y&&null==Bs(e,c);return m?{x:nf({axis:o,ticks:a,bandSize:u,entry:e,index:t}),y:r?null:i.scale(n[1]),value:n,payload:e}:{x:r?null:o.scale(n[1]),y:nf({axis:i,ticks:l,bandSize:u,entry:e,index:t}),value:n,payload:e}}));return t=y||g?b.map((function(e){var t=Array.isArray(e.value)?e.value[0]:null;return m?{x:e.x,y:null!=t&&null!=e.y?i.scale(t):null}:{x:null!=t?o.scale(t):null,y:e.y}})):m?i.scale(v):o.scale(v),Xm({points:b,baseLine:t,layout:h,isRange:g},d)})),Jm(tg,"renderDotItem",(function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(ld,qm({},t,{className:"recharts-area-dot"}))}));var ng=function(){return null};ng.displayName="ZAxis",ng.defaultProps={zAxisId:0,range:[64,64],scale:"auto",type:"number"};var rg=["option","isActive"];function og(){return og=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},og.apply(this,arguments)}function ig(e){var t=e.option,n=e.isActive,r=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,rg);return"string"==typeof t?o.createElement(Ah,og({option:o.createElement(Je,og({type:t},r)),isActive:n,shapeType:"symbols"},r)):o.createElement(Ah,og({option:t,isActive:n,shapeType:"symbols"},r))}function ag(e){return ag="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ag(e)}function lg(){return lg=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},lg.apply(this,arguments)}function ug(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cg(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ug(Object(n),!0).forEach((function(t){hg(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ug(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function sg(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,yg(r.key),r)}}function fg(e,t){return fg=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},fg(e,t)}function pg(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function dg(e){return dg=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},dg(e)}function hg(e,t,n){return(t=yg(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function yg(e){var t=function(e,t){if("object"!==ag(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ag(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ag(t)?t:String(t)}var vg=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&fg(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=dg(i);if(l){var n=dg(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===ag(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return pg(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return hg(pg(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!1}),hg(pg(e),"handleAnimationEnd",(function(){e.setState({isAnimationFinished:!0})})),hg(pg(e),"handleAnimationStart",(function(){e.setState({isAnimationFinished:!1})})),hg(pg(e),"id",j("recharts-scatter-")),e}return t=c,n=[{key:"renderSymbolsStatically",value:function(e){var t=this,n=this.props,r=n.shape,i=n.activeShape,a=n.activeIndex,l=ne(this.props);return e.map((function(e,n){var u=a===n,c=u?i:r,s=cg(cg({key:"symbol-".concat(n)},l),e);return o.createElement(fe,lg({className:"recharts-scatter-symbol"},z(t.props,e,n),{key:"symbol-".concat(null==e?void 0:e.cx,"-").concat(null==e?void 0:e.cy,"-").concat(null==e?void 0:e.size),role:"img"}),o.createElement(ig,lg({option:c,isActive:u},s)))}))}},{key:"renderSymbolsWithAnimation",value:function(){var e=this,t=this.props,n=t.points,r=t.isAnimationActive,i=t.animationBegin,a=t.animationDuration,l=t.animationEasing,u=t.animationId,c=this.state.prevPoints;return o.createElement(gr,{begin:i,duration:a,isActive:r,easing:l,from:{t:0},to:{t:1},key:"pie-".concat(u),onAnimationEnd:this.handleAnimationEnd,onAnimationStart:this.handleAnimationStart},(function(t){var r=t.t,i=n.map((function(e,t){var n=c&&c[t];if(n){var o=_(n.cx,e.cx),i=_(n.cy,e.cy),a=_(n.size,e.size);return cg(cg({},e),{},{cx:o(r),cy:i(r),size:a(r)})}var l=_(0,e.size);return cg(cg({},e),{},{size:l(r)})}));return o.createElement(fe,null,e.renderSymbolsStatically(i))}))}},{key:"renderSymbols",value:function(){var e=this.props,t=e.points,n=e.isAnimationActive,r=this.state.prevPoints;return!(n&&t&&t.length)||r&&Xc()(r,t)?this.renderSymbolsStatically(t):this.renderSymbolsWithAnimation()}},{key:"renderErrorBar",value:function(){if(this.props.isAnimationActive&&!this.state.isAnimationFinished)return null;var e=this.props,t=e.points,n=e.xAxis,r=e.yAxis,i=G(e.children,Es);return i?i.map((function(e,i){var a=e.props,l=a.direction,u=a.dataKey;return o.cloneElement(e,{key:"".concat(l,"-").concat(u,"-").concat(t[i]),data:t,xAxis:n,yAxis:r,layout:"x"===l?"vertical":"horizontal",dataPointFormatter:function(e,t){return{x:e.cx,y:e.cy,value:"x"===l?+e.node.x:+e.node.y,errorVal:Bs(e,t)}}})})):null}},{key:"renderLine",value:function(){var e,t,n=this.props,r=n.points,i=n.line,a=n.lineType,l=n.lineJointType,u=ne(this.props),c=ne(i);if("joint"===a)e=r.map((function(e){return{x:e.cx,y:e.cy}}));else if("fitting"===a){var s=function(e){if(!e||!e.length)return null;for(var t=e.length,n=0,r=0,o=0,i=0,a=1/0,l=-1/0,u=0,c=0,s=0;s<t;s++)n+=u=e[s].cx||0,r+=c=e[s].cy||0,o+=u*c,i+=u*u,a=Math.min(a,u),l=Math.max(l,u);var f=t*i!=n*n?(t*o-n*r)/(t*i-n*n):0;return{xmin:a,xmax:l,a:f,b:(r-f*n)/t}}(r),f=s.xmin,p=s.xmax,d=s.a,y=s.b,v=function(e){return d*e+y};e=[{x:f,y:v(f)},{x:p,y:v(p)}]}var m=cg(cg(cg({},u),{},{fill:"none",stroke:u&&u.fill},c),{},{points:e});return t=o.isValidElement(i)?o.cloneElement(i,m):h()(i)?i(m):o.createElement(Wp,lg({},m,{type:l})),o.createElement(fe,{className:"recharts-scatter-line",key:"recharts-scatter-line"},t)}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.points,r=e.line,i=e.className,l=e.xAxis,u=e.yAxis,c=e.left,f=e.top,p=e.width,d=e.height,h=e.id,y=e.isAnimationActive;if(t||!n||!n.length)return null;var v=this.state.isAnimationFinished,m=a("recharts-scatter",i),g=l&&l.allowDataOverflow,b=u&&u.allowDataOverflow,x=g||b,w=s()(h)?this.id:h;return o.createElement(fe,{className:m,clipPath:x?"url(#clipPath-".concat(w,")"):null},g||b?o.createElement("defs",null,o.createElement("clipPath",{id:"clipPath-".concat(w)},o.createElement("rect",{x:g?c:c-p/2,y:b?f:f-d/2,width:g?p:2*p,height:b?d:2*d}))):null,r&&this.renderLine(),this.renderErrorBar(),o.createElement(fe,{key:"recharts-scatter-symbols"},this.renderSymbols()),(!y||v)&&Qf.renderCallByParent(this.props,n))}}],r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curPoints:e.points,prevPoints:t.curPoints}:e.points!==t.curPoints?{curPoints:e.points}:null}}],n&&sg(t.prototype,n),r&&sg(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);hg(vg,"displayName","Scatter"),hg(vg,"defaultProps",{xAxisId:0,yAxisId:0,zAxisId:0,legendType:"circle",lineType:"joint",lineJointType:"linear",data:[],shape:"circle",hide:!1,isAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:400,animationEasing:"linear"}),hg(vg,"getComposedData",(function(e){var t=e.xAxis,n=e.yAxis,r=e.zAxis,o=e.item,i=e.displayedData,a=e.xAxisTicks,l=e.yAxisTicks,u=e.offset,c=o.props.tooltipType,f=G(o.props.children,eo),p=s()(t.dataKey)?o.props.dataKey:t.dataKey,d=s()(n.dataKey)?o.props.dataKey:n.dataKey,h=r&&r.dataKey,y=r?r.range:ng.defaultProps.range,v=y&&y[0],m=t.scale.bandwidth?t.scale.bandwidth():0,g=n.scale.bandwidth?n.scale.bandwidth():0,b=i.map((function(e,i){var u=Bs(e,p),y=Bs(e,d),b=!s()(h)&&Bs(e,h)||"-",x=[{name:s()(t.dataKey)?o.props.name:t.name||t.dataKey,unit:t.unit||"",value:u,payload:e,dataKey:p,type:c},{name:s()(n.dataKey)?o.props.name:n.name||n.dataKey,unit:n.unit||"",value:y,payload:e,dataKey:d,type:c}];"-"!==b&&x.push({name:r.name||r.dataKey,unit:r.unit||"",value:b,payload:e,dataKey:h,type:c});var w=nf({axis:t,ticks:a,bandSize:m,entry:e,index:i,dataKey:p}),O=nf({axis:n,ticks:l,bandSize:g,entry:e,index:i,dataKey:d}),S="-"!==b?r.scale(b):v,A=Math.sqrt(Math.max(S,0)/Math.PI);return cg(cg({},e),{},{cx:w,cy:O,x:w-A,y:O-A,xAxis:t,yAxis:n,zAxis:r,width:2*A,height:2*A,size:S,node:{x:u,y,z:b},tooltipPayload:x,tooltipPosition:{x:w,y:O},payload:e},f&&f[i]&&f[i].props)}));return cg({points:b},u)}));var mg=function(){return null};mg.displayName="XAxis",mg.defaultProps={allowDecimals:!0,hide:!1,orientation:"bottom",width:0,height:30,mirror:!1,xAxisId:0,tickCount:5,type:"category",padding:{left:0,right:0},allowDataOverflow:!1,scale:"auto",reversed:!1,allowDuplicatedCategory:!0};var gg=function(){return null};gg.displayName="YAxis",gg.defaultProps={allowDuplicatedCategory:!0,allowDecimals:!0,hide:!1,orientation:"left",width:60,height:0,mirror:!1,yAxisId:0,tickCount:5,type:"number",padding:{top:0,bottom:0},allowDataOverflow:!1,scale:"auto",reversed:!1};var bg=n(3311),xg=n.n(bg);function wg(e){var t=e.cx,n=e.cy,r=e.radius,o=e.startAngle,i=e.endAngle;return{points:[xf(t,n,r,o),xf(t,n,r,i)],cx:t,cy:n,radius:r,startAngle:o,endAngle:i}}function Og(e){return function(e){if(Array.isArray(e))return Sg(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Sg(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Sg(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Sg(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ag=function(e,t,n,r,o){var i=G(e,Iv),a=G(e,Uv),l=[].concat(Og(i),Og(a)),u=G(e,Xv),c="".concat(r,"Id"),s=r[0],f=t;if(l.length&&(f=l.reduce((function(e,t){if(t.props[c]===n&&Vy(t.props,"extendDomain")&&A(t.props[s])){var r=t.props[s];return[Math.min(e[0],r),Math.max(e[1],r)]}return e}),f)),u.length){var p="".concat(s,"1"),d="".concat(s,"2");f=u.reduce((function(e,t){if(t.props[c]===n&&Vy(t.props,"extendDomain")&&A(t.props[p])&&A(t.props[d])){var r=t.props[p],o=t.props[d];return[Math.min(e[0],r,o),Math.max(e[1],r,o)]}return e}),f)}return o&&o.length&&(f=o.reduce((function(e,t){return A(t)?[Math.min(e[0],t),Math.max(e[1],t)]:e}),f)),f},kg=n(6729),Eg=new(n.n(kg)()),jg="recharts.syncMouseEvents";function Pg(e){return Pg="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Pg(e)}function Cg(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Tg(r.key),r)}}function _g(e,t,n){return(t=Tg(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Tg(e){var t=function(e,t){if("object"!==Pg(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Pg(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Pg(t)?t:String(t)}var Mg=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),_g(this,"activeIndex",0),_g(this,"coordinateList",[]),_g(this,"layout","horizontal")}var t,n;return t=e,(n=[{key:"setDetails",value:function(e){var t=e.coordinateList,n=void 0===t?[]:t,r=e.container,o=void 0===r?null:r,i=e.layout,a=void 0===i?null:i,l=e.offset,u=void 0===l?null:l,c=e.mouseHandlerCallback,s=void 0===c?null:c;this.coordinateList=null!=n?n:this.coordinateList,this.container=null!=o?o:this.container,this.layout=null!=a?a:this.layout,this.offset=null!=u?u:this.offset,this.mouseHandlerCallback=null!=s?s:this.mouseHandlerCallback,this.activeIndex=Math.min(Math.max(this.activeIndex,0),this.coordinateList.length-1)}},{key:"focus",value:function(){this.spoofMouse()}},{key:"keyboardEvent",value:function(e){if(0!==this.coordinateList.length)switch(e.key){case"ArrowRight":if("horizontal"!==this.layout)return;this.activeIndex=Math.min(this.activeIndex+1,this.coordinateList.length-1),this.spoofMouse();break;case"ArrowLeft":if("horizontal"!==this.layout)return;this.activeIndex=Math.max(this.activeIndex-1,0),this.spoofMouse()}}},{key:"spoofMouse",value:function(){var e,t;if("horizontal"===this.layout&&0!==this.coordinateList.length){var n=this.container.getBoundingClientRect(),r=n.x,o=n.y,i=n.height,a=this.coordinateList[this.activeIndex].coordinate,l=(null===(e=window)||void 0===e?void 0:e.scrollX)||0,u=(null===(t=window)||void 0===t?void 0:t.scrollY)||0,c=r+a+l,s=o+this.offset.top+i/2+u;this.mouseHandlerCallback({pageX:c,pageY:s})}}}])&&Cg(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Ng(e,t,n){var r,o,i,a;if("horizontal"===e)i=r=t.x,o=n.top,a=n.top+n.height;else if("vertical"===e)a=o=t.y,r=n.left,i=n.left+n.width;else if(null!=t.cx&&null!=t.cy){if("centric"!==e)return wg(t);var l=t.cx,u=t.cy,c=t.innerRadius,s=t.outerRadius,f=t.angle,p=xf(l,u,c,f),d=xf(l,u,s,f);r=p.x,o=p.y,i=d.x,a=d.y}return[{x:r,y:o},{x:i,y:a}]}var Ig=["item"],Dg=["children","className","width","height","style","compact","title","desc"];function Rg(e){return Rg="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rg(e)}function Lg(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||Hg(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bg(){return Bg=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bg.apply(this,arguments)}function zg(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Fg(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Yg(r.key),r)}}function Ug(e,t){return Ug=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ug(e,t)}function Wg(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function $g(e){return $g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},$g(e)}function Vg(e){return function(e){if(Array.isArray(e))return qg(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Hg(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hg(e,t){if(e){if("string"==typeof e)return qg(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?qg(e,t):void 0}}function qg(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Kg(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xg(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kg(Object(n),!0).forEach((function(t){Gg(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kg(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Gg(e,t,n){return(t=Yg(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yg(e){var t=function(e,t){if("object"!==Rg(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Rg(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Rg(t)?t:String(t)}var Qg={xAxis:["bottom","top"],yAxis:["left","right"]},Zg={width:"100%",height:"100%"},Jg={x:0,y:0},eb=function(e,t){var n=t.graphicalItems,r=t.dataStartIndex,o=t.dataEndIndex,i=(null!=n?n:[]).reduce((function(e,t){var n=t.props.data;return n&&n.length?[].concat(Vg(e),Vg(n)):e}),[]);return i.length>0?i:e&&e.length&&A(r)&&A(o)?e.slice(r,o+1):[]};function tb(e){return"number"===e?[0,"auto"]:void 0}var nb=function(e,t,n,r){var o=e.graphicalItems,i=e.tooltipAxis,a=eb(t,e);return n<0||!o||!o.length||n>=a.length?null:o.reduce((function(o,l){var u;if(l.props.hide)return o;var c,s=null!==(u=l.props.data)&&void 0!==u?u:t;return s&&e.dataStartIndex+e.dataEndIndex!==0&&(s=s.slice(e.dataStartIndex,e.dataEndIndex+1)),(c=i.dataKey&&!i.allowDuplicatedCategory?T(void 0===s?a:s,i.dataKey,r):s&&s[n]||a[n])?[].concat(Vg(o),[pf(l,c)]):o}),[])},rb=function(e,t,n,r){var o=r||{x:e.chartX,y:e.chartY},i=function(e,t){return"horizontal"===t?e.x:"vertical"===t?e.y:"centric"===t?e.angle:e.radius}(o,n),a=e.orderedTooltipTicks,l=e.tooltipAxis,u=e.tooltipTicks,c=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2?arguments[2]:void 0,o=arguments.length>3?arguments[3]:void 0,i=-1,a=null!==(t=null==n?void 0:n.length)&&void 0!==t?t:0;if(a<=1)return 0;if(o&&"angleAxis"===o.axisType&&Math.abs(Math.abs(o.range[1]-o.range[0])-360)<=1e-6)for(var l=o.range,u=0;u<a;u++){var c=u>0?r[u-1].coordinate:r[a-1].coordinate,s=r[u].coordinate,f=u>=a-1?r[0].coordinate:r[u+1].coordinate,p=void 0;if(O(s-c)!==O(f-s)){var d=[];if(O(f-s)===O(l[1]-l[0])){p=f;var h=s+l[1]-l[0];d[0]=Math.min(h,(h+c)/2),d[1]=Math.max(h,(h+c)/2)}else{p=c;var y=f+l[1]-l[0];d[0]=Math.min(s,(y+s)/2),d[1]=Math.max(s,(y+s)/2)}var v=[Math.min(s,(p+s)/2),Math.max(s,(p+s)/2)];if(e>v[0]&&e<=v[1]||e>=d[0]&&e<=d[1]){i=r[u].index;break}}else{var m=Math.min(c,f),g=Math.max(c,f);if(e>(m+s)/2&&e<=(g+s)/2){i=r[u].index;break}}}else for(var b=0;b<a;b++)if(0===b&&e<=(n[b].coordinate+n[b+1].coordinate)/2||b>0&&b<a-1&&e>(n[b].coordinate+n[b-1].coordinate)/2&&e<=(n[b].coordinate+n[b+1].coordinate)/2||b===a-1&&e>(n[b].coordinate+n[b-1].coordinate)/2){i=n[b].index;break}return i}(i,a,u,l);if(c>=0&&u){var s=u[c]&&u[c].value,f=nb(e,t,c,s),p=function(e,t,n,r){var o=t.find((function(e){return e&&e.index===n}));if(o){if("horizontal"===e)return{x:o.coordinate,y:r.y};if("vertical"===e)return{x:r.x,y:o.coordinate};if("centric"===e){var i=o.coordinate,a=r.radius;return Xg(Xg(Xg({},r),xf(r.cx,r.cy,a,i)),{},{angle:i,radius:a})}var l=o.coordinate,u=r.angle;return Xg(Xg(Xg({},r),xf(r.cx,r.cy,l,u)),{},{angle:u,radius:l})}return Jg}(n,a,c,o);return{activeTooltipIndex:c,activeLabel:s,activePayload:f,activeCoordinate:p}}return null},ob=function(e,t){var n=t.axisType,r=void 0===n?"xAxis":n,o=t.AxisComp,i=t.graphicalItems,a=t.stackGroups,l=t.dataStartIndex,c=t.dataEndIndex,f=e.children,p="".concat(r,"Id"),d=G(f,o),h={};return d&&d.length?h=function(e,t){var n=t.axes,r=t.graphicalItems,o=t.axisType,i=t.axisIdKey,a=t.stackGroups,l=t.dataStartIndex,u=t.dataEndIndex,c=e.layout,f=e.children,p=e.stackOffset,d=$s(c,o);return n.reduce((function(t,n){var h,y=n.props,v=y.type,m=y.dataKey,g=y.allowDataOverflow,b=y.allowDuplicatedCategory,x=y.scale,w=y.ticks,O=y.includeHidden,S=n.props[i];if(t[S])return t;var k,E,j,P=eb(e.data,{graphicalItems:r.filter((function(e){return e.props[i]===S})),dataStartIndex:l,dataEndIndex:u}),C=P.length;(function(e,t,n){if("number"===n&&!0===t&&Array.isArray(e)){var r=null==e?void 0:e[0],o=null==e?void 0:e[1];if(r&&o&&A(r)&&A(o))return!0}return!1})(n.props.domain,g,v)&&(k=cf(n.props.domain,null,g),!d||"number"!==v&&"auto"===x||(j=zs(P,m,"category")));var _=tb(v);if(!k||0===k.length){var T,M=null!==(T=n.props.domain)&&void 0!==T?T:_;if(m){if(k=zs(P,m,v),"category"===v&&d){var N=function(e){if(!Array.isArray(e))return!1;for(var t=e.length,n={},r=0;r<t;r++){if(n[e[r]])return!0;n[e[r]]=!0}return!1}(k);b&&N?(E=k,k=Ay()(0,C)):b||(k=ff(M,k,n).reduce((function(e,t){return e.indexOf(t)>=0?e:[].concat(Vg(e),[t])}),[]))}else if("category"===v)k=b?k.filter((function(e){return""!==e&&!s()(e)})):ff(M,k,n).reduce((function(e,t){return e.indexOf(t)>=0||""===t||s()(t)?e:[].concat(Vg(e),[t])}),[]);else if("number"===v){var I=function(e,t,n,r,o){var i=t.map((function(t){return Us(e,t,n,o,r)})).filter((function(e){return!s()(e)}));return i&&i.length?i.reduce((function(e,t){return[Math.min(e[0],t[0]),Math.max(e[1],t[1])]}),[1/0,-1/0]):null}(P,r.filter((function(e){return e.props[i]===S&&(O||!e.props.hide)})),m,o,c);I&&(k=I)}!d||"number"!==v&&"auto"===x||(j=zs(P,m,"category"))}else k=d?Ay()(0,C):a&&a[S]&&a[S].hasStack&&"number"===v?"expand"===p?[0,1]:af(a[S].stackGroups,l,u):Ws(P,r.filter((function(e){return e.props[i]===S&&(O||!e.props.hide)})),v,c,!0);if("number"===v)k=Ag(f,k,S,o,w),M&&(k=cf(M,k,g));else if("category"===v&&M){var D=M;k.every((function(e){return D.indexOf(e)>=0}))&&(k=D)}}return Xg(Xg({},t),{},Gg({},S,Xg(Xg({},n.props),{},{axisType:o,domain:k,categoricalDomain:j,duplicateDomain:E,originalDomain:null!==(h=n.props.domain)&&void 0!==h?h:_,isCategorical:d,layout:c})))}),{})}(e,{axes:d,graphicalItems:i,axisType:r,axisIdKey:p,stackGroups:a,dataStartIndex:l,dataEndIndex:c}):i&&i.length&&(h=function(e,t){var n=t.graphicalItems,r=t.Axis,o=t.axisType,i=t.axisIdKey,a=t.stackGroups,l=t.dataStartIndex,c=t.dataEndIndex,s=e.layout,f=e.children,p=eb(e.data,{graphicalItems:n,dataStartIndex:l,dataEndIndex:c}),d=p.length,h=$s(s,o),y=-1;return n.reduce((function(e,t){var v,m=t.props[i],g=tb("number");return e[m]?e:(y++,h?v=Ay()(0,d):a&&a[m]&&a[m].hasStack?(v=af(a[m].stackGroups,l,c),v=Ag(f,v,m,o)):(v=cf(g,Ws(p,n.filter((function(e){return e.props[i]===m&&!e.props.hide})),"number",s),r.defaultProps.allowDataOverflow),v=Ag(f,v,m,o)),Xg(Xg({},e),{},Gg({},m,Xg(Xg({axisType:o},r.defaultProps),{},{hide:!0,orientation:u()(Qg,"".concat(o,".").concat(y%2),null),domain:v,originalDomain:g,isCategorical:h,layout:s}))))}),{})}(e,{Axis:o,graphicalItems:i,axisType:r,axisIdKey:p,stackGroups:a,dataStartIndex:l,dataEndIndex:c})),h},ib=function(e){var t=e.children,n=e.defaultShowTooltip,r=Y(t,Uy),o=0,i=0;return e.data&&0!==e.data.length&&(i=e.data.length-1),r&&r.props&&(r.props.startIndex>=0&&(o=r.props.startIndex),r.props.endIndex>=0&&(i=r.props.endIndex)),{chartX:0,chartY:0,dataStartIndex:o,dataEndIndex:i,activeTooltipIndex:-1,isTooltipActive:Boolean(n)}},ab=function(e){return"horizontal"===e?{numericAxisName:"yAxis",cateAxisName:"xAxis"}:"vertical"===e?{numericAxisName:"xAxis",cateAxisName:"yAxis"}:"centric"===e?{numericAxisName:"radiusAxis",cateAxisName:"angleAxis"}:{numericAxisName:"angleAxis",cateAxisName:"radiusAxis"}},lb=function(e){var t,n=e.chartName,r=e.GraphicalChild,i=e.defaultTooltipEventType,l=void 0===i?"axis":i,c=e.validateTooltipEventTypes,f=void 0===c?["axis"]:c,p=e.axisComponents,d=e.legendContent,y=e.formatAxisMap,v=e.defaultProps,m=function(e,t){var o=e.props,i=e.dataStartIndex,a=e.dataEndIndex,l=e.updateId;if(!Q({props:o}))return null;var c=o.children,f=o.layout,d=o.stackOffset,h=o.data,v=o.reverseStackOrder,m=ab(f),g=m.numericAxisName,b=m.cateAxisName,x=G(c,r),w=function(e,t,n,r,o,i){if(!e)return null;var a=(i?t.reverse():t).reduce((function(e,t){var o=t.props,i=o.stackId;if(o.hide)return e;var a=t.props[n],l=e[a]||{hasStack:!1,stackGroups:{}};if(k(i)){var u=l.stackGroups[i]||{numericAxisId:n,cateAxisId:r,items:[]};u.items.push(t),l.hasStack=!0,l.stackGroups[i]=u}else l.stackGroups[j("_stackId_")]={numericAxisId:n,cateAxisId:r,items:[t]};return Is(Is({},e),{},Ds({},a,l))}),{});return Object.keys(a).reduce((function(t,i){var l=a[i];return l.hasStack&&(l.stackGroups=Object.keys(l.stackGroups).reduce((function(t,i){var a=l.stackGroups[i];return Is(Is({},t),{},Ds({},i,{numericAxisId:n,cateAxisId:r,items:a.items,stackedData:ef(e,a.items,o)}))}),{})),Is(Is({},t),{},Ds({},i,l))}),{})}(h,x,"".concat(g,"Id"),"".concat(b,"Id"),d,v),O=p.reduce((function(e,t){var n="".concat(t.axisType,"Map");return Xg(Xg({},e),{},Gg({},n,ob(o,Xg(Xg({},t),{},{graphicalItems:x,stackGroups:t.axisType===g&&w,dataStartIndex:i,dataEndIndex:a}))))}),{}),S=function(e,t){var n=e.props,r=(e.graphicalItems,e.xAxisMap),o=void 0===r?{}:r,i=e.yAxisMap,a=void 0===i?{}:i,l=n.width,c=n.height,s=n.children,f=n.margin||{},p=Y(s,Uy),d=Y(s,At),h=Object.keys(a).reduce((function(e,t){var n=a[t],r=n.orientation;return n.mirror||n.hide?e:Xg(Xg({},e),{},Gg({},r,e[r]+n.width))}),{left:f.left||0,right:f.right||0}),y=Object.keys(o).reduce((function(e,t){var n=o[t],r=n.orientation;return n.mirror||n.hide?e:Xg(Xg({},e),{},Gg({},r,u()(e,"".concat(r))+n.height))}),{top:f.top||0,bottom:f.bottom||0}),v=Xg(Xg({},y),h),m=v.bottom;p&&(v.bottom+=p.props.height||Uy.defaultProps.height),d&&t&&(v=function(e,t,n,r){var o=n.children,i=n.width,a=n.margin,l=i-(a.left||0)-(a.right||0),u=Ts({children:o,legendWidth:l});if(u){var c=r||{},s=c.width,f=c.height,p=u.align,d=u.verticalAlign,h=u.layout;if(("vertical"===h||"horizontal"===h&&"middle"===d)&&"center"!==p&&A(e[p]))return Is(Is({},e),{},Ds({},p,e[p]+(s||0)));if(("horizontal"===h||"vertical"===h&&"center"===p)&&"middle"!==d&&A(e[d]))return Is(Is({},e),{},Ds({},d,e[d]+(f||0)))}return e}(v,0,n,t));var g=l-v.left-v.right,b=c-v.top-v.bottom;return Xg(Xg({brushBottom:m},v),{},{width:Math.max(g,0),height:Math.max(b,0)})}(Xg(Xg({},O),{},{props:o,graphicalItems:x}),null==t?void 0:t.legendBBox);Object.keys(O).forEach((function(e){O[e]=y(o,O[e],S,e.replace("Map",""),n)}));var E,_,T=O["".concat(b,"Map")],M=(E=C(T),{tooltipTicks:_=Hs(E,!1,!0),orderedTooltipTicks:Et()(_,(function(e){return e.coordinate})),tooltipAxis:E,tooltipAxisBandSize:sf(E,_)}),N=function(e,t){var n=t.graphicalItems,r=t.stackGroups,o=t.offset,i=t.updateId,a=t.dataStartIndex,l=t.dataEndIndex,u=e.barSize,c=e.layout,f=e.barGap,d=e.barCategoryGap,h=e.maxBarSize,y=ab(c),v=y.numericAxisName,m=y.cateAxisName,g=function(e){return!(!e||!e.length)&&e.some((function(e){var t=H(e&&e.type);return t&&t.indexOf("Bar")>=0}))}(n),b=g&&function(e){var t=e.barSize,n=e.stackGroups,r=void 0===n?{}:n;if(!r)return{};for(var o={},i=Object.keys(r),a=0,l=i.length;a<l;a++)for(var u=r[i[a]].stackGroups,c=Object.keys(u),f=0,p=c.length;f<p;f++){var d=u[c[f]],h=d.items,y=d.cateAxisId,v=h.filter((function(e){return H(e.type).indexOf("Bar")>=0}));if(v&&v.length){var m=v[0].props.barSize,g=v[0].props[y];o[g]||(o[g]=[]),o[g].push({item:v[0],stackList:v.slice(1),barSize:s()(m)?t:m})}}return o}({barSize:u,stackGroups:r}),x=[];return n.forEach((function(n,u){var y=eb(e.data,{graphicalItems:[n],dataStartIndex:a,dataEndIndex:l}),g=n.props,w=g.dataKey,O=g.maxBarSize,S=n.props["".concat(v,"Id")],A=n.props["".concat(m,"Id")],E=p.reduce((function(e,r){var o,i=t["".concat(r.axisType,"Map")],a=n.props["".concat(r.axisType,"Id")];i&&i[a]||"zAxis"===r.axisType||function(e,t){throw new Error("Invariant failed")}();var l=i[a];return Xg(Xg({},e),{},(Gg(o={},r.axisType,l),Gg(o,"".concat(r.axisType,"Ticks"),Hs(l)),o))}),{}),j=E[m],C=E["".concat(m,"Ticks")],_=r&&r[S]&&r[S].hasStack&&function(e,t){var n=e.props.stackId;if(k(n)){var r=t[n];if(r){var o=r.items.indexOf(e);return o>=0?r.stackedData[o]:null}}return null}(n,r[S].stackGroups),T=H(n.type).indexOf("Bar")>=0,M=sf(j,C),N=[];if(T){var I,D,R=s()(O)?h:O,L=null!==(I=null!==(D=sf(j,C,!0))&&void 0!==D?D:R)&&void 0!==I?I:0;N=function(e){var t=e.barGap,n=e.barCategoryGap,r=e.bandSize,o=e.sizeList,i=void 0===o?[]:o,a=e.maxBarSize,l=i.length;if(l<1)return null;var u,c=P(t,r,0,!0),s=[];if(i[0].barSize===+i[0].barSize){var f=!1,p=r/l,d=i.reduce((function(e,t){return e+t.barSize||0}),0);(d+=(l-1)*c)>=r&&(d-=(l-1)*c,c=0),d>=r&&p>0&&(f=!0,d=l*(p*=.9));var h={offset:((r-d)/2>>0)-c,size:0};u=i.reduce((function(e,t){var n={item:t.item,position:{offset:h.offset+h.size+c,size:f?p:t.barSize}},r=[].concat(Rs(e),[n]);return h=r[r.length-1].position,t.stackList&&t.stackList.length&&t.stackList.forEach((function(e){r.push({item:e,position:h})})),r}),s)}else{var y=P(n,r,0,!0);r-2*y-(l-1)*c<=0&&(c=0);var v=(r-2*y-(l-1)*c)/l;v>1&&(v>>=0);var m=a===+a?Math.min(v,a):v;u=i.reduce((function(e,t,n){var r=[].concat(Rs(e),[{item:t.item,position:{offset:y+(v+c)*n+(v-m)/2,size:m}}]);return t.stackList&&t.stackList.length&&t.stackList.forEach((function(e){r.push({item:e,position:r[r.length-1].position})})),r}),s)}return u}({barGap:f,barCategoryGap:d,bandSize:L!==M?L:M,sizeList:b[A],maxBarSize:R}),L!==M&&(N=N.map((function(e){return Xg(Xg({},e),{},{position:Xg(Xg({},e.position),{},{offset:e.position.offset-L/2})})})))}var B,z,F,U=n&&n.type&&n.type.getComposedData;U&&x.push({props:Xg(Xg({},U(Xg(Xg({},E),{},{displayedData:y,props:e,dataKey:w,item:n,bandSize:M,barPosition:N,offset:o,stackedData:_,layout:c,dataStartIndex:a,dataEndIndex:l}))),{},(B={key:n.key||"item-".concat(u)},Gg(B,v,E[v]),Gg(B,m,E[m]),Gg(B,"animationId",i),B)),childIndex:(z=n,F=e.children,X(F).indexOf(z)),item:n})})),x}(o,Xg(Xg({},O),{},{dataStartIndex:i,dataEndIndex:a,updateId:l,graphicalItems:x,stackGroups:w,offset:S}));return Xg(Xg({formattedGraphicalItems:N,graphicalItems:x,offset:S,stackGroups:w},M),O)};return t=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ug(e,t)}(y,e);var t,r,i,c,p=(i=y,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=$g(i);if(c){var n=$g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Rg(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Wg(e)}(this,e)});function y(e){var t,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,y),Gg(Wg(i=p.call(this,e)),"eventEmitterSymbol",Symbol("rechartsEventEmitter")),Gg(Wg(i),"accessibilityManager",new Mg),Gg(Wg(i),"handleLegendBBoxUpdate",(function(e){if(e){var t=i.state,n=t.dataStartIndex,r=t.dataEndIndex,o=t.updateId;i.setState(Xg({legendBBox:e},m({props:i.props,dataStartIndex:n,dataEndIndex:r,updateId:o},Xg(Xg({},i.state),{},{legendBBox:e}))))}})),Gg(Wg(i),"handleReceiveSyncEvent",(function(e,t,n){if(i.props.syncId===e){if(n===i.eventEmitterSymbol&&"function"!=typeof i.props.syncMethod)return;i.applySyncEvent(t)}})),Gg(Wg(i),"handleBrushChange",(function(e){var t=e.startIndex,n=e.endIndex;if(t!==i.state.dataStartIndex||n!==i.state.dataEndIndex){var r=i.state.updateId;i.setState((function(){return Xg({dataStartIndex:t,dataEndIndex:n},m({props:i.props,dataStartIndex:t,dataEndIndex:n,updateId:r},i.state))})),i.triggerSyncEvent({dataStartIndex:t,dataEndIndex:n})}})),Gg(Wg(i),"handleMouseEnter",(function(e){var t=i.getMouseInfo(e);if(t){var n=Xg(Xg({},t),{},{isTooltipActive:!0});i.setState(n),i.triggerSyncEvent(n);var r=i.props.onMouseEnter;h()(r)&&r(n,e)}})),Gg(Wg(i),"triggeredAfterMouseMove",(function(e){var t=i.getMouseInfo(e),n=t?Xg(Xg({},t),{},{isTooltipActive:!0}):{isTooltipActive:!1};i.setState(n),i.triggerSyncEvent(n);var r=i.props.onMouseMove;h()(r)&&r(n,e)})),Gg(Wg(i),"handleItemMouseEnter",(function(e){i.setState((function(){return{isTooltipActive:!0,activeItem:e,activePayload:e.tooltipPayload,activeCoordinate:e.tooltipPosition||{x:e.cx,y:e.cy}}}))})),Gg(Wg(i),"handleItemMouseLeave",(function(){i.setState((function(){return{isTooltipActive:!1}}))})),Gg(Wg(i),"handleMouseMove",(function(e){e.persist(),i.throttleTriggeredAfterMouseMove(e)})),Gg(Wg(i),"handleMouseLeave",(function(e){var t={isTooltipActive:!1};i.setState(t),i.triggerSyncEvent(t);var n=i.props.onMouseLeave;h()(n)&&n(t,e)})),Gg(Wg(i),"handleOuterEvent",(function(e){var t,n=function(e){var t=e&&e.type;return t&&V[t]?V[t]:null}(e),r=u()(i.props,"".concat(n));n&&h()(r)&&r(null!==(t=/.*touch.*/i.test(n)?i.getMouseInfo(e.changedTouches[0]):i.getMouseInfo(e))&&void 0!==t?t:{},e)})),Gg(Wg(i),"handleClick",(function(e){var t=i.getMouseInfo(e);if(t){var n=Xg(Xg({},t),{},{isTooltipActive:!0});i.setState(n),i.triggerSyncEvent(n);var r=i.props.onClick;h()(r)&&r(n,e)}})),Gg(Wg(i),"handleMouseDown",(function(e){var t=i.props.onMouseDown;h()(t)&&t(i.getMouseInfo(e),e)})),Gg(Wg(i),"handleMouseUp",(function(e){var t=i.props.onMouseUp;h()(t)&&t(i.getMouseInfo(e),e)})),Gg(Wg(i),"handleTouchMove",(function(e){null!=e.changedTouches&&e.changedTouches.length>0&&i.throttleTriggeredAfterMouseMove(e.changedTouches[0])})),Gg(Wg(i),"handleTouchStart",(function(e){null!=e.changedTouches&&e.changedTouches.length>0&&i.handleMouseDown(e.changedTouches[0])})),Gg(Wg(i),"handleTouchEnd",(function(e){null!=e.changedTouches&&e.changedTouches.length>0&&i.handleMouseUp(e.changedTouches[0])})),Gg(Wg(i),"triggerSyncEvent",(function(e){void 0!==i.props.syncId&&Eg.emit(jg,i.props.syncId,e,i.eventEmitterSymbol)})),Gg(Wg(i),"applySyncEvent",(function(e){var t=i.props,n=t.layout,r=t.syncMethod,o=i.state.updateId,a=e.dataStartIndex,l=e.dataEndIndex;if(void 0!==e.dataStartIndex||void 0!==e.dataEndIndex)i.setState(Xg({dataStartIndex:a,dataEndIndex:l},m({props:i.props,dataStartIndex:a,dataEndIndex:l,updateId:o},i.state)));else if(void 0!==e.activeTooltipIndex){var u=e.chartX,c=e.chartY,s=e.activeTooltipIndex,f=i.state,p=f.offset,d=f.tooltipTicks;if(!p)return;if("function"==typeof r)s=r(d,e);else if("value"===r){s=-1;for(var h=0;h<d.length;h++)if(d[h].value===e.activeLabel){s=h;break}}var y=Xg(Xg({},p),{},{x:p.left,y:p.top}),v=Math.min(u,y.x+y.width),g=Math.min(c,y.y+y.height),b=d[s]&&d[s].value,x=nb(i.state,i.props.data,s),w=d[s]?{x:"horizontal"===n?d[s].coordinate:v,y:"horizontal"===n?g:d[s].coordinate}:Jg;i.setState(Xg(Xg({},e),{},{activeLabel:b,activeCoordinate:w,activePayload:x,activeTooltipIndex:s}))}else i.setState(e)})),Gg(Wg(i),"verticalCoordinatesGenerator",(function(e,t){var n=e.xAxis,r=e.width,o=e.height,i=e.offset;return Vs(tm(Xg(Xg(Xg({},ym.defaultProps),n),{},{ticks:Hs(n,!0),viewBox:{x:0,y:0,width:r,height:o}})),i.left,i.left+i.width,t)})),Gg(Wg(i),"horizontalCoordinatesGenerator",(function(e,t){var n=e.yAxis,r=e.width,o=e.height,i=e.offset;return Vs(tm(Xg(Xg(Xg({},ym.defaultProps),n),{},{ticks:Hs(n,!0),viewBox:{x:0,y:0,width:r,height:o}})),i.top,i.top+i.height,t)})),Gg(Wg(i),"axesTicksGenerator",(function(e){return Hs(e,!0)})),Gg(Wg(i),"renderCursor",(function(e){var t,r=i.state,a=r.isTooltipActive,l=r.activeCoordinate,u=r.activePayload,c=r.offset,s=r.activeTooltipIndex,f=r.tooltipAxisBandSize,p=i.getTooltipEventType(),d=null!==(t=e.props.active)&&void 0!==t?t:a;if(!e||!e.props.cursor||!d||!l||"ScatterChart"!==n&&"axis"!==p)return null;var h,y=i.props.layout,v=Wp;if("ScatterChart"===n)h=l,v=hd;else if("BarChart"===n)h=function(e,t,n,r){var o=r/2;return{stroke:"none",fill:"#ccc",x:"horizontal"===e?t.x-o:n.left+.5,y:"horizontal"===e?n.top+.5:t.y-o,width:"horizontal"===e?r:n.width-1,height:"horizontal"===e?n.height-1:r}}(y,l,c,f),v=Zp;else if("radial"===y){var m=wg(l),g=m.cx,b=m.cy,x=m.radius;h={cx:g,cy:b,startAngle:m.startAngle,endAngle:m.endAngle,innerRadius:x,outerRadius:x},v=cp}else h={points:Ng(y,l,c)},v=Wp;var w=e.key||"_recharts-cursor",O=Xg(Xg(Xg(Xg({stroke:"#ccc",pointerEvents:"none"},c),h),ne(e.props.cursor)),{},{payload:u,payloadIndex:s,key:w,className:"recharts-tooltip-cursor"});return(0,o.isValidElement)(e.props.cursor)?(0,o.cloneElement)(e.props.cursor,O):(0,o.createElement)(v,O)})),Gg(Wg(i),"renderPolarAxis",(function(e,t,n){var r=u()(e,"type.axisType"),a=u()(i.state,"".concat(r,"Map")),l=a&&a[e.props["".concat(r,"Id")]];return(0,o.cloneElement)(e,Xg(Xg({},l),{},{className:r,key:e.key||"".concat(t,"-").concat(n),ticks:Hs(l,!0)}))})),Gg(Wg(i),"renderXAxis",(function(e,t,n){var r=i.state.xAxisMap[e.props.xAxisId];return i.renderAxis(r,e,t,n)})),Gg(Wg(i),"renderYAxis",(function(e,t,n){var r=i.state.yAxisMap[e.props.yAxisId];return i.renderAxis(r,e,t,n)})),Gg(Wg(i),"renderGrid",(function(e){var t=i.state,n=t.xAxisMap,r=t.yAxisMap,a=t.offset,l=i.props,u=l.width,c=l.height,s=C(n),f=xg()(r,(function(e){return Xy()(e.domain,Number.isFinite)}))||C(r),p=e.props||{};return(0,o.cloneElement)(e,{key:e.key||"grid",x:A(p.x)?p.x:a.left,y:A(p.y)?p.y:a.top,width:A(p.width)?p.width:a.width,height:A(p.height)?p.height:a.height,xAxis:s,yAxis:f,offset:a,chartWidth:u,chartHeight:c,verticalCoordinatesGenerator:p.verticalCoordinatesGenerator||i.verticalCoordinatesGenerator,horizontalCoordinatesGenerator:p.horizontalCoordinatesGenerator||i.horizontalCoordinatesGenerator})})),Gg(Wg(i),"renderPolarGrid",(function(e){var t=e.props,n=t.radialLines,r=t.polarAngles,a=t.polarRadius,l=i.state,u=l.radiusAxisMap,c=l.angleAxisMap,s=C(u),f=C(c),p=f.cx,d=f.cy,h=f.innerRadius,y=f.outerRadius;return(0,o.cloneElement)(e,{polarAngles:Array.isArray(r)?r:Hs(f,!0).map((function(e){return e.coordinate})),polarRadius:Array.isArray(a)?a:Hs(s,!0).map((function(e){return e.coordinate})),cx:p,cy:d,innerRadius:h,outerRadius:y,key:e.key||"polar-grid",radialLines:n})})),Gg(Wg(i),"renderLegend",(function(){var e=i.state.formattedGraphicalItems,t=i.props,n=t.children,r=t.width,a=t.height,l=i.props.margin||{},u=r-(l.left||0)-(l.right||0),c=Ts({children:n,formattedGraphicalItems:e,legendWidth:u,legendContent:d});if(!c)return null;var s=c.item,f=zg(c,Ig);return(0,o.cloneElement)(s,Xg(Xg({},f),{},{chartWidth:r,chartHeight:a,margin:l,onBBoxUpdate:i.handleLegendBBoxUpdate}))})),Gg(Wg(i),"renderTooltip",(function(){var e,t=Y(i.props.children,Hr);if(!t)return null;var n=i.state,r=n.isTooltipActive,a=n.activeCoordinate,l=n.activePayload,u=n.activeLabel,c=n.offset,s=null!==(e=t.props.active)&&void 0!==e?e:r;return(0,o.cloneElement)(t,{viewBox:Xg(Xg({},c),{},{x:c.left,y:c.top}),active:s,label:u,payload:s?l:[],coordinate:a})})),Gg(Wg(i),"renderBrush",(function(e){var t=i.props,n=t.margin,r=t.data,a=i.state,l=a.offset,u=a.dataStartIndex,c=a.dataEndIndex,s=a.updateId;return(0,o.cloneElement)(e,{key:e.key||"_recharts-brush",onChange:Ks(i.handleBrushChange,e.props.onChange),data:r,x:A(e.props.x)?e.props.x:l.left,y:A(e.props.y)?e.props.y:l.top+l.height+l.brushBottom-(n.bottom||0),width:A(e.props.width)?e.props.width:l.width,startIndex:u,endIndex:c,updateId:"brush-".concat(s)})})),Gg(Wg(i),"renderReferenceElement",(function(e,t,n){if(!e)return null;var r=Wg(i).clipPathId,a=i.state,l=a.xAxisMap,u=a.yAxisMap,c=a.offset,s=e.props,f=s.xAxisId,p=s.yAxisId;return(0,o.cloneElement)(e,{key:e.key||"".concat(t,"-").concat(n),xAxis:l[f],yAxis:u[p],viewBox:{x:c.left,y:c.top,width:c.width,height:c.height},clipPathId:r})})),Gg(Wg(i),"renderActivePoints",(function(e){var t=e.item,n=e.activePoint,r=e.basePoint,o=e.childIndex,i=e.isRange,a=[],l=t.props.key,u=t.item.props,c=u.activeDot,s=Xg(Xg({index:o,dataKey:u.dataKey,cx:n.x,cy:n.y,r:4,fill:Fs(t.item),strokeWidth:2,stroke:"#fff",payload:n.payload,value:n.value,key:"".concat(l,"-activePoint-").concat(o)},ne(c)),B(c));return a.push(y.renderActiveDot(c,s)),r?a.push(y.renderActiveDot(c,Xg(Xg({},s),{},{cx:r.x,cy:r.y,key:"".concat(l,"-basePoint-").concat(o)}))):i&&a.push(null),a})),Gg(Wg(i),"renderGraphicChild",(function(e,t,n){var r=i.filterFormatItem(e,t,n);if(!r)return null;var a=i.getTooltipEventType(),l=i.state,u=l.isTooltipActive,c=l.tooltipAxis,f=l.activeTooltipIndex,p=l.activeLabel,d=Y(i.props.children,Hr),h=r.props,y=h.points,v=h.isRange,m=h.baseLine,g=r.item.props,b=g.activeDot,x=g.hide,w=g.activeBar,O=g.activeShape,S=Boolean(!x&&u&&d&&(b||w||O)),A={};"axis"!==a&&d&&"click"===d.props.trigger?A={onClick:Ks(i.handleItemMouseEnter,e.props.onClick)}:"axis"!==a&&(A={onMouseLeave:Ks(i.handleItemMouseLeave,e.props.onMouseLeave),onMouseEnter:Ks(i.handleItemMouseEnter,e.props.onMouseEnter)});var k=(0,o.cloneElement)(e,Xg(Xg({},r.props),A));if(S){if(!(f>=0)){var E,j=(null!==(E=i.getItemByXY(i.state.activeCoordinate))&&void 0!==E?E:{graphicalItem:k}).graphicalItem,P=j.item,C=void 0===P?e:P,_=j.childIndex,M=Xg(Xg(Xg({},r.props),A),{},{activeIndex:_});return[(0,o.cloneElement)(C,M),null,null]}var N,I;if(c.dataKey&&!c.allowDuplicatedCategory){var D="function"==typeof c.dataKey?function(e){return"function"==typeof c.dataKey?c.dataKey(e.payload):null}:"payload.".concat(c.dataKey.toString());N=T(y,D,p),I=v&&m&&T(m,D,p)}else N=null==y?void 0:y[f],I=v&&m&&m[f];if(O||w){var R=void 0!==e.props.activeIndex?e.props.activeIndex:f;return[(0,o.cloneElement)(e,Xg(Xg(Xg({},r.props),A),{},{activeIndex:R})),null,null]}if(!s()(N))return[k].concat(Vg(i.renderActivePoints({item:r,activePoint:N,basePoint:I,childIndex:f,isRange:v})))}return v?[k,null,null]:[k,null]})),Gg(Wg(i),"renderCustomized",(function(e,t,n){return(0,o.cloneElement)(e,Xg(Xg({key:"recharts-customized-".concat(n)},i.props),i.state))})),Gg(Wg(i),"renderMap",{CartesianGrid:{handler:i.renderGrid,once:!0},ReferenceArea:{handler:i.renderReferenceElement},ReferenceLine:{handler:i.renderReferenceElement},ReferenceDot:{handler:i.renderReferenceElement},XAxis:{handler:i.renderXAxis},YAxis:{handler:i.renderYAxis},Brush:{handler:i.renderBrush,once:!0},Bar:{handler:i.renderGraphicChild},Line:{handler:i.renderGraphicChild},Area:{handler:i.renderGraphicChild},Radar:{handler:i.renderGraphicChild},RadialBar:{handler:i.renderGraphicChild},Scatter:{handler:i.renderGraphicChild},Pie:{handler:i.renderGraphicChild},Funnel:{handler:i.renderGraphicChild},Tooltip:{handler:i.renderCursor,once:!0},PolarGrid:{handler:i.renderPolarGrid,once:!0},PolarAngleAxis:{handler:i.renderPolarAxis},PolarRadiusAxis:{handler:i.renderPolarAxis},Customized:{handler:i.renderCustomized}}),i.clipPathId="".concat(null!==(t=e.id)&&void 0!==t?t:j("recharts"),"-clip"),i.throttleTriggeredAfterMouseMove=Kr()(i.triggeredAfterMouseMove,null!==(r=e.throttleDelay)&&void 0!==r?r:1e3/60),i.state={},i}return t=y,r=[{key:"componentDidMount",value:function(){var e,t;this.addListener(),this.accessibilityManager.setDetails({container:this.container,offset:{left:null!==(e=this.props.margin.left)&&void 0!==e?e:0,top:null!==(t=this.props.margin.top)&&void 0!==t?t:0},coordinateList:this.state.tooltipTicks,mouseHandlerCallback:this.triggeredAfterMouseMove,layout:this.props.layout})}},{key:"getSnapshotBeforeUpdate",value:function(e,t){return this.props.accessibilityLayer?(this.state.tooltipTicks!==t.tooltipTicks&&this.accessibilityManager.setDetails({coordinateList:this.state.tooltipTicks}),this.props.layout!==e.layout&&this.accessibilityManager.setDetails({layout:this.props.layout}),this.props.margin!==e.margin&&this.accessibilityManager.setDetails({offset:{left:null!==(n=this.props.margin.left)&&void 0!==n?n:0,top:null!==(r=this.props.margin.top)&&void 0!==r?r:0}}),null):null;var n,r}},{key:"componentDidUpdate",value:function(){}},{key:"componentWillUnmount",value:function(){this.removeListener(),this.throttleTriggeredAfterMouseMove.cancel()}},{key:"getTooltipEventType",value:function(){var e=Y(this.props.children,Hr);if(e&&"boolean"==typeof e.props.shared){var t=e.props.shared?"axis":"item";return f.indexOf(t)>=0?t:l}return l}},{key:"getMouseInfo",value:function(e){if(!this.container)return null;var t,n=this.container,r=n.getBoundingClientRect(),o=(t=r).top+window.scrollY-document.documentElement.clientTop,i=t.left+window.scrollX-document.documentElement.clientLeft,a={chartX:Math.round(e.pageX-i),chartY:Math.round(e.pageY-o)},l=r.width/n.offsetWidth||1,u=this.inRange(a.chartX,a.chartY,l);if(!u)return null;var c=this.state,s=c.xAxisMap,f=c.yAxisMap;if("axis"!==this.getTooltipEventType()&&s&&f){var p=C(s).scale,d=C(f).scale,h=p&&p.invert?p.invert(a.chartX):null,y=d&&d.invert?d.invert(a.chartY):null;return Xg(Xg({},a),{},{xValue:h,yValue:y})}var v=rb(this.state,this.props.data,this.props.layout,u);return v?Xg(Xg({},a),v):null}},{key:"inRange",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=this.props.layout,o=e/n,i=t/n;if("horizontal"===r||"vertical"===r){var a=this.state.offset;return o>=a.left&&o<=a.left+a.width&&i>=a.top&&i<=a.top+a.height?{x:o,y:i}:null}var l=this.state,u=l.angleAxisMap,c=l.radiusAxisMap;if(u&&c){var s=C(u);return Af({x:o,y:i},s)}return null}},{key:"parseEventsOfWrapper",value:function(){var e=this.props.children,t=this.getTooltipEventType(),n=Y(e,Hr),r={};return n&&"axis"===t&&(r="click"===n.props.trigger?{onClick:this.handleClick}:{onMouseEnter:this.handleMouseEnter,onMouseMove:this.handleMouseMove,onMouseLeave:this.handleMouseLeave,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd}),Xg(Xg({},B(this.props,this.handleOuterEvent)),r)}},{key:"addListener",value:function(){Eg.on(jg,this.handleReceiveSyncEvent)}},{key:"removeListener",value:function(){Eg.removeListener(jg,this.handleReceiveSyncEvent)}},{key:"filterFormatItem",value:function(e,t,n){for(var r=this.state.formattedGraphicalItems,o=0,i=r.length;o<i;o++){var a=r[o];if(a.item===e||a.props.key===e.key||t===H(a.item.type)&&n===a.childIndex)return a}return null}},{key:"renderAxis",value:function(e,t,n,r){var i=this.props,l=i.width,u=i.height;return o.createElement(ym,Bg({},e,{className:a("recharts-".concat(e.axisType," ").concat(e.axisType),e.className),key:t.key||"".concat(n,"-").concat(r),viewBox:{x:0,y:0,width:l,height:u},ticksGenerator:this.axesTicksGenerator}))}},{key:"renderClipPath",value:function(){var e=this.clipPathId,t=this.state.offset,n=t.left,r=t.top,i=t.height,a=t.width;return o.createElement("defs",null,o.createElement("clipPath",{id:e},o.createElement("rect",{x:n,y:r,height:i,width:a})))}},{key:"getXScales",value:function(){var e=this.state.xAxisMap;return e?Object.entries(e).reduce((function(e,t){var n=Lg(t,2),r=n[0],o=n[1];return Xg(Xg({},e),{},Gg({},r,o.scale))}),{}):null}},{key:"getYScales",value:function(){var e=this.state.yAxisMap;return e?Object.entries(e).reduce((function(e,t){var n=Lg(t,2),r=n[0],o=n[1];return Xg(Xg({},e),{},Gg({},r,o.scale))}),{}):null}},{key:"getXScaleByAxisId",value:function(e){var t;return null===(t=this.state.xAxisMap)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.scale}},{key:"getYScaleByAxisId",value:function(e){var t;return null===(t=this.state.yAxisMap)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.scale}},{key:"getItemByXY",value:function(e){var t=this.state,n=t.formattedGraphicalItems,r=t.activeItem;if(n&&n.length)for(var o=0,i=n.length;o<i;o++){var a=n[o],l=a.props,u=a.item,c=H(u.type);if("Bar"===c){var s=(l.data||[]).find((function(t){return Yp(e,t)}));if(s)return{graphicalItem:a,payload:s}}else if("RadialBar"===c){var f=(l.data||[]).find((function(t){return Af(e,t)}));if(f)return{graphicalItem:a,payload:f}}else if(kh(a,r)||Eh(a,r)||jh(a,r)){var p=Th({graphicalItem:a,activeTooltipItem:r,itemData:u.props.data}),d=void 0===u.props.activeIndex?p:u.props.activeIndex;return{graphicalItem:Xg(Xg({},a),{},{childIndex:d}),payload:jh(a,r)?u.props.data[p]:a.props.data[p]}}}return null}},{key:"render",value:function(){var e=this;if(!Q(this))return null;var t,n,r=this.props,i=r.children,l=r.className,u=r.width,c=r.height,s=r.style,f=r.compact,p=r.title,d=r.desc,h=zg(r,Dg),y=ne(h);if(f)return o.createElement(ue,Bg({},y,{width:u,height:c,title:p,desc:d}),this.renderClipPath(),ie(i,this.renderMap));this.props.accessibilityLayer&&(y.tabIndex=null!==(t=this.props.tabIndex)&&void 0!==t?t:0,y.role=null!==(n=this.props.role)&&void 0!==n?n:"img",y.onKeyDown=function(t){e.accessibilityManager.keyboardEvent(t)},y.onFocus=function(){e.accessibilityManager.focus()});var v=this.parseEventsOfWrapper();return o.createElement("div",Bg({className:a("recharts-wrapper",l),style:Xg({position:"relative",cursor:"default",width:u,height:c},s)},v,{ref:function(t){e.container=t},role:"region"}),o.createElement(ue,Bg({},y,{width:u,height:c,title:p,desc:d,style:Zg}),this.renderClipPath(),ie(i,this.renderMap)),this.renderLegend(),this.renderTooltip())}}],r&&Fg(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),y}(o.Component),Gg(t,"displayName",n),Gg(t,"defaultProps",Xg({layout:"horizontal",stackOffset:"none",barCategoryGap:"10%",barGap:4,margin:{top:5,right:5,bottom:5,left:5},reverseStackOrder:!1,syncMethod:"index"},v)),Gg(t,"getDerivedStateFromProps",(function(e,t){var n=e.dataKey,r=e.data,o=e.children,i=e.width,a=e.height,l=e.layout,u=e.stackOffset,c=e.margin;if(void 0===t.updateId){var f=ib(e);return Xg(Xg(Xg({},f),{},{updateId:0},m(Xg(Xg({props:e},f),{},{updateId:0}),t)),{},{prevDataKey:n,prevData:r,prevWidth:i,prevHeight:a,prevLayout:l,prevStackOffset:u,prevMargin:c,prevChildren:o})}if(n!==t.prevDataKey||r!==t.prevData||i!==t.prevWidth||a!==t.prevHeight||l!==t.prevLayout||u!==t.prevStackOffset||!M(c,t.prevMargin)){var p=ib(e),d={chartX:t.chartX,chartY:t.chartY,isTooltipActive:t.isTooltipActive},h=Xg(Xg({},rb(t,r,l)),{},{updateId:t.updateId+1}),y=Xg(Xg(Xg({},p),d),h);return Xg(Xg(Xg({},y),m(Xg({props:e},y),t)),{},{prevDataKey:n,prevData:r,prevWidth:i,prevHeight:a,prevLayout:l,prevStackOffset:u,prevMargin:c,prevChildren:o})}if(!re(o,t.prevChildren)){var v=s()(r)?t.updateId+1:t.updateId;return Xg(Xg({updateId:v},m(Xg(Xg({props:e},t),{},{updateId:v}),t)),{},{prevChildren:o})}return null})),Gg(t,"renderActiveDot",(function(e,t){var n;return n=(0,o.isValidElement)(e)?(0,o.cloneElement)(e,t):h()(e)?e(t):o.createElement(ld,t),o.createElement(fe,{className:"recharts-active-dot",key:t.key},n)})),t},ub=lb({chartName:"LineChart",GraphicalChild:Wm,axisComponents:[{axisType:"xAxis",AxisComp:mg},{axisType:"yAxis",AxisComp:gg}],formatAxisMap:wv}),cb=lb({chartName:"BarChart",GraphicalChild:hv,defaultTooltipEventType:"axis",validateTooltipEventTypes:["axis","item"],axisComponents:[{axisType:"xAxis",AxisComp:mg},{axisType:"yAxis",AxisComp:gg}],formatAxisMap:wv}),sb=lb({chartName:"PieChart",GraphicalChild:Wh,validateTooltipEventTypes:["item"],defaultTooltipEventType:"item",legendContent:"children",axisComponents:[{axisType:"angleAxis",AxisComp:th},{axisType:"radiusAxis",AxisComp:$d}],formatAxisMap:Of,defaultProps:{layout:"centric",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}}),fb=n(7557),pb=n.n(fb),db=["#1890FF","#66B5FF","#41D9C7","#2FC25B","#6EDB8F","#9AE65C","#FACC14","#E6965C","#57AD71","#223273","#738AE6","#7564CC","#8543E0","#A877ED","#5C8EE6","#13C2C2","#70E0E0","#5CA3E6","#3436C7","#8082FF","#DD81E6","#F04864","#FA7D92","#D598D9"],hb=["width","height","className","style","children","type"];function yb(e){return yb="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yb(e)}function vb(){return vb=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},vb.apply(this,arguments)}function mb(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ab(r.key),r)}}function gb(e,t){return gb=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gb(e,t)}function bb(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function xb(e){return xb=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},xb(e)}function wb(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ob(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wb(Object(n),!0).forEach((function(t){Sb(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wb(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Sb(e,t,n){return(t=Ab(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ab(e){var t=function(e,t){if("object"!==yb(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==yb(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yb(t)?t:String(t)}var kb="value",Eb=function e(t){var n,r,o=t.depth,i=t.node,a=t.index,l=t.valueKey,u=i.children,c=o+1,s=u&&u.length?u.map((function(t,n){return e({depth:c,node:t,index:n,valueKey:l})})):null;return r=u&&u.length?s.reduce((function(e,t){return e+t[kb]}),0):b()(i[l])||i[l]<=0?0:i[l],Ob(Ob({},i),{},(Sb(n={children:s},kb,r),Sb(n,"depth",o),Sb(n,"index",a),n))},jb=function(e,t,n){var r=t*t,o=e.area*e.area,i=e.reduce((function(e,t){return{min:Math.min(e.min,t.area),max:Math.max(e.max,t.area)}}),{min:1/0,max:0}),a=i.min,l=i.max;return o?Math.max(r*l*n/o,o/(r*a*n)):1/0},Pb=function(e,t,n,r){return t===n.width?function(e,t,n,r){var o=t?Math.round(e.area/t):0;(r||o>n.height)&&(o=n.height);for(var i,a=n.x,l=0,u=e.length;l<u;l++)(i=e[l]).x=a,i.y=n.y,i.height=o,i.width=Math.min(o?Math.round(i.area/o):0,n.x+n.width-a),a+=i.width;return i.width+=n.x+n.width-a,Ob(Ob({},n),{},{y:n.y+o,height:n.height-o})}(e,t,n,r):function(e,t,n,r){var o=t?Math.round(e.area/t):0;(r||o>n.width)&&(o=n.width);for(var i,a=n.y,l=0,u=e.length;l<u;l++)(i=e[l]).x=n.x,i.y=a,i.width=o,i.height=Math.min(o?Math.round(i.area/o):0,n.y+n.height-a),a+=i.height;return i&&(i.height+=n.y+n.height-a),Ob(Ob({},n),{},{x:n.x+o,width:n.width-o})}(e,t,n,r)},Cb=function e(t,n){var r=t.children;if(r&&r.length){var o,i,a=function(e){return{x:e.x,y:e.y,width:e.width,height:e.height}}(t),l=[],u=1/0,c=Math.min(a.width,a.height),s=function(e,t){var n=t<0?0:t;return e.map((function(e){var t=e[kb]*n;return Ob(Ob({},e),{},{area:b()(t)||t<=0?0:t})}))}(r,a.width*a.height/t[kb]),f=s.slice();for(l.area=0;f.length>0;)l.push(o=f[0]),l.area+=o.area,(i=jb(l,c,n))<=u?(f.shift(),u=i):(l.area-=l.pop().area,a=Pb(l,c,a,!1),c=Math.min(a.width,a.height),l.length=l.area=0,u=1/0);return l.length&&(a=Pb(l,c,a,!0),l.length=l.area=0),Ob(Ob({},t),{},{children:s.map((function(t){return e(t,n)}))})}return t},_b={isTooltipActive:!1,isAnimationFinished:!1,activeNode:null,formatRoot:null,currentRoot:null,nestIndex:[]},Tb=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&gb(e,t)}(s,e);var t,n,r,i,l,c=(i=s,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=xb(i);if(l){var n=xb(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===yb(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return bb(e)}(this,e)});function s(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Sb(bb(e=c.call.apply(c,[this].concat(n))),"state",Ob({},_b)),Sb(bb(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h()(t)&&t()})),Sb(bb(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h()(t)&&t()})),e}return t=s,r=[{key:"getDerivedStateFromProps",value:function(e,t){if(e.data!==t.prevData||e.type!==t.prevType||e.width!==t.prevWidth||e.height!==t.prevHeight||e.dataKey!==t.prevDataKey||e.aspectRatio!==t.prevAspectRatio){var n=Eb({depth:0,node:{children:e.data,x:0,y:0,width:e.width,height:e.height},index:0,valueKey:e.dataKey}),r=Cb(n,e.aspectRatio);return Ob(Ob({},t),{},{formatRoot:r,currentRoot:n,nestIndex:[n],prevAspectRatio:e.aspectRatio,prevData:e.data,prevWidth:e.width,prevHeight:e.height,prevDataKey:e.dataKey,prevType:e.type})}return null}},{key:"renderContentItem",value:function(e,t,n,r){if(o.isValidElement(e))return o.cloneElement(e,t);if(h()(e))return e(t);var i=t.x,a=t.y,l=t.width,u=t.height,c=t.index,s=null;l>10&&u>10&&t.children&&"nest"===n&&(s=o.createElement(id,{points:[{x:i+2,y:a+u/2},{x:i+6,y:a+u/2+3},{x:i+2,y:a+u/2+6}]}));var f=null,p=uo(t.name);l>20&&u>20&&p.width<l&&p.height<u&&(f=o.createElement("text",{x:i+8,y:a+u/2+7,fontSize:14},t.name));var d=r||db;return o.createElement("g",null,o.createElement(Zp,vb({fill:t.depth<2?d[c%d.length]:"rgba(255,255,255,0)",stroke:"#fff"},pb()(t,"children"),{role:"img"})),s,f)}}],(n=[{key:"handleMouseEnter",value:function(e,t){t.persist();var n=this.props,r=n.onMouseEnter;Y(n.children,Hr)?this.setState({isTooltipActive:!0,activeNode:e},(function(){r&&r(e,t)})):r&&r(e,t)}},{key:"handleMouseLeave",value:function(e,t){t.persist();var n=this.props,r=n.onMouseLeave;Y(n.children,Hr)?this.setState({isTooltipActive:!1,activeNode:null},(function(){r&&r(e,t)})):r&&r(e,t)}},{key:"handleClick",value:function(e){var t=this.props,n=t.onClick;if("nest"===t.type&&e.children){var r=this.props,o=r.width,i=r.height,a=r.dataKey,l=r.aspectRatio,u=Eb({depth:0,node:Ob(Ob({},e),{},{x:0,y:0,width:o,height:i}),index:0,valueKey:a}),c=Cb(u,l),s=this.state.nestIndex;s.push(e),this.setState({formatRoot:c,currentRoot:u,nestIndex:s})}n&&n(e)}},{key:"handleNestIndex",value:function(e,t){var n=this.state.nestIndex,r=this.props,o=r.width,i=r.height,a=r.dataKey,l=r.aspectRatio,u=Eb({depth:0,node:Ob(Ob({},e),{},{x:0,y:0,width:o,height:i}),index:0,valueKey:a}),c=Cb(u,l);n=n.slice(0,t+1),this.setState({formatRoot:c,currentRoot:e,nestIndex:n})}},{key:"renderItem",value:function(e,t,n){var r=this,i=this.props,a=i.isAnimationActive,l=i.animationBegin,u=i.animationDuration,c=i.animationEasing,s=i.isUpdateAnimationActive,f=i.type,p=i.animationId,d=i.colorPanel,h=this.state.isAnimationFinished,y=t.width,v=t.height,m=t.x,g=t.y,b=t.depth,x=parseInt("".concat((2*Math.random()-1)*y),10),w={};return(n||"nest"===f)&&(w={onMouseEnter:this.handleMouseEnter.bind(this,t),onMouseLeave:this.handleMouseLeave.bind(this,t),onClick:this.handleClick.bind(this,t)}),a?o.createElement(gr,{begin:l,duration:u,isActive:a,easing:c,key:"treemap-".concat(p),from:{x:m,y:g,width:y,height:v},to:{x:m,y:g,width:y,height:v},onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(n){var i=n.x,p=n.y,y=n.width,v=n.height;return o.createElement(gr,{from:"translate(".concat(x,"px, ").concat(x,"px)"),to:"translate(0, 0)",attributeName:"transform",begin:l,easing:c,isActive:a,duration:u},o.createElement(fe,w,b>2&&!h?null:r.constructor.renderContentItem(e,Ob(Ob({},t),{},{isAnimationActive:a,isUpdateAnimationActive:!s,width:y,height:v,x:i,y:p}),f,d)))})):o.createElement(fe,w,this.constructor.renderContentItem(e,Ob(Ob({},t),{},{isAnimationActive:!1,isUpdateAnimationActive:!1,width:y,height:v,x:m,y:g}),f,d))}},{key:"renderNode",value:function(e,t){var n=this,r=this.props,i=r.content,a=r.type,l=Ob(Ob(Ob({},ne(this.props)),t),{},{root:e}),u=!t.children||!t.children.length;return!(this.state.currentRoot.children||[]).filter((function(e){return e.depth===t.depth&&e.name===t.name})).length&&e.depth&&"nest"===a?null:o.createElement(fe,{key:"recharts-treemap-node-".concat(l.x,"-").concat(l.y,"-").concat(l.name),className:"recharts-treemap-depth-".concat(t.depth)},this.renderItem(i,l,u),t.children&&t.children.length?t.children.map((function(e){return n.renderNode(t,e)})):null)}},{key:"renderAllNodes",value:function(){var e=this.state.formatRoot;return e?this.renderNode(e,e):null}},{key:"renderTooltip",value:function(){var e=this.props,t=e.children,n=e.nameKey,r=Y(t,Hr);if(!r)return null;var i=this.props,a=i.width,l=i.height,u=this.state,c=u.isTooltipActive,s=u.activeNode,f={x:0,y:0,width:a,height:l},p=s?{x:s.x+s.width/2,y:s.y+s.height/2}:null,d=c&&s?[{payload:s,name:Bs(s,n,""),value:Bs(s,kb)}]:[];return o.cloneElement(r,{viewBox:f,active:c,coordinate:p,label:"",payload:d})}},{key:"renderNestIndex",value:function(){var e=this,t=this.props,n=t.nameKey,r=t.nestIndexContent,i=this.state.nestIndex;return o.createElement("div",{className:"recharts-treemap-nest-index-wrapper",style:{marginTop:"8px",textAlign:"center"}},i.map((function(t,i){var a=u()(t,n,"root"),l=null;return o.isValidElement(r)&&(l=o.cloneElement(r,t,i)),l=h()(r)?r(t,i):a,o.createElement("div",{onClick:e.handleNestIndex.bind(e,t,i),key:"nest-index-".concat(j()),className:"recharts-treemap-nest-index-box",style:{cursor:"pointer",display:"inline-block",padding:"0 7px",background:"#000",color:"#fff",marginRight:"3px"}},l)})))}},{key:"render",value:function(){if(!Q(this))return null;var e=this.props,t=e.width,n=e.height,r=e.className,i=e.style,l=e.children,u=e.type,c=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,hb),s=ne(c);return o.createElement("div",{className:a("recharts-wrapper",r),style:Ob(Ob({},i),{},{position:"relative",cursor:"default",width:t,height:n}),role:"region"},o.createElement(ue,vb({},s,{width:t,height:"nest"===u?n-30:n}),this.renderAllNodes(),te(l)),this.renderTooltip(),"nest"===u&&this.renderNestIndex())}}])&&mb(t.prototype,n),r&&mb(t,r),Object.defineProperty(t,"prototype",{writable:!1}),s}(o.PureComponent);Sb(Tb,"displayName","Treemap"),Sb(Tb,"defaultProps",{aspectRatio:.5*(1+Math.sqrt(5)),dataKey:"value",type:"flat",isAnimationActive:!Dr.isSsr,isUpdateAnimationActive:!Dr.isSsr,animationBegin:0,animationDuration:1500,animationEasing:"linear"});var Mb=n(3303),Nb=n.n(Mb),Ib=["width","height","className","style","children"],Db=["sourceX","sourceY","sourceControlX","targetX","targetY","targetControlX","linkWidth"];function Rb(e){return Rb="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rb(e)}function Lb(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function Bb(){return Bb=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bb.apply(this,arguments)}function zb(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,qb(r.key),r)}}function Fb(e,t){return Fb=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Fb(e,t)}function Ub(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wb(e){return Wb=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Wb(e)}function $b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vb(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$b(Object(n),!0).forEach((function(t){Hb(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Hb(e,t,n){return(t=qb(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qb(e){var t=function(e,t){if("object"!==Rb(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Rb(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Rb(t)?t:String(t)}var Kb={x:0,y:0},Xb=function(e){return e.y+e.dy/2},Gb=function(e){return e&&e.value||0},Yb=function(e,t){return t.reduce((function(t,n){return t+Gb(e[n])}),0)},Qb=function(e,t,n){return n.reduce((function(n,r){var o=t[r],i=e[o.source];return n+Xb(i)*Gb(t[r])}),0)},Zb=function(e,t,n){return n.reduce((function(n,r){var o=t[r],i=e[o.target];return n+Xb(i)*Gb(t[r])}),0)},Jb=function(e,t){return e.y-t.y},ex=function e(t,n){for(var r=n.targetNodes,o=0,i=r.length;o<i;o++){var a=t[r[o]];a&&(a.depth=Math.max(n.depth+1,a.depth),e(t,a))}},tx=function(e,t,n){for(var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=0,i=e.length;o<i;o++){var a=e[o],l=a.length;r&&a.sort(Jb);for(var u=0,c=0;c<l;c++){var s=a[c],f=u-s.y;f>0&&(s.y+=f),u=s.y+s.dy+n}u=t+n;for(var p=l-1;p>=0;p--){var d=a[p],h=d.y+d.dy+n-u;if(!(h>0))break;d.y-=h,u=d.y}}},nx=function(e,t,n,r){for(var o=0,i=t.length;o<i;o++)for(var a=t[o],l=0,u=a.length;l<u;l++){var c=a[l];if(c.sourceLinks.length){var s=Yb(n,c.sourceLinks),f=Qb(e,n,c.sourceLinks)/s;c.y+=(f-Xb(c))*r}}},rx=function(e,t,n,r){for(var o=t.length-1;o>=0;o--)for(var i=t[o],a=0,l=i.length;a<l;a++){var u=i[a];if(u.targetLinks.length){var c=Yb(n,u.targetLinks),s=Zb(e,n,u.targetLinks)/c;u.y+=(s-Xb(u))*r}}},ox=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Fb(e,t)}(s,e);var t,n,r,i,l,c=(i=s,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Wb(i);if(l){var n=Wb(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===Rb(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Ub(e)}(this,e)});function s(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Hb(Ub(e=c.call.apply(c,[this].concat(n))),"state",{activeElement:null,activeElementType:null,isTooltipActive:!1,nodes:[],links:[]}),e}return t=s,n=[{key:"handleMouseEnter",value:function(e,t,n){var r=this.props,o=r.onMouseEnter,i=Y(r.children,Hr);i?this.setState((function(n){return"hover"===i.props.trigger?Vb(Vb({},n),{},{activeElement:e,activeElementType:t,isTooltipActive:!0}):n}),(function(){o&&o(e,t,n)})):o&&o(e,t,n)}},{key:"handleMouseLeave",value:function(e,t,n){var r=this.props,o=r.onMouseLeave,i=Y(r.children,Hr);i?this.setState((function(e){return"hover"===i.props.trigger?Vb(Vb({},e),{},{activeElement:void 0,activeElementType:void 0,isTooltipActive:!1}):e}),(function(){o&&o(e,t,n)})):o&&o(e,t,n)}},{key:"handleClick",value:function(e,t,n){var r=this.props,o=r.onClick,i=Y(r.children,Hr);i&&"click"===i.props.trigger&&(this.state.isTooltipActive?this.setState((function(e){return Vb(Vb({},e),{},{activeElement:void 0,activeElementType:void 0,isTooltipActive:!1})})):this.setState((function(n){return Vb(Vb({},n),{},{activeElement:e,activeElementType:t,isTooltipActive:!0})}))),o&&o(e,t,n)}},{key:"renderLinks",value:function(e,t){var n=this,r=this.props,i=r.linkCurvature,a=r.link,l=r.margin,c=u()(l,"top")||0,s=u()(l,"left")||0;return o.createElement(fe,{className:"recharts-sankey-links",key:"recharts-sankey-links"},e.map((function(e,r){var l=e.sy,u=e.ty,f=e.dy,p=t[e.source],d=t[e.target],h=p.x+p.dx+s,y=d.x+s,v=function(e,t){var n=+e,r=t-n;return function(e){return n+r*e}}(h,y),m=v(i),g=v(1-i),b=Vb({sourceX:h,targetX:y,sourceY:p.y+l+f/2+c,targetY:d.y+u+f/2+c,sourceControlX:m,targetControlX:g,sourceRelativeY:l,targetRelativeY:u,linkWidth:f,index:r,payload:Vb(Vb({},e),{},{source:p,target:d})},ne(a)),x={onMouseEnter:n.handleMouseEnter.bind(n,b,"link"),onMouseLeave:n.handleMouseLeave.bind(n,b,"link"),onClick:n.handleClick.bind(n,b,"link")};return o.createElement(fe,Bb({key:"link-".concat(e.source,"-").concat(e.target,"-").concat(e.value)},x),n.constructor.renderLinkItem(a,b))})))}},{key:"renderNodes",value:function(e){var t=this,n=this.props,r=n.node,i=n.margin,a=u()(i,"top")||0,l=u()(i,"left")||0;return o.createElement(fe,{className:"recharts-sankey-nodes",key:"recharts-sankey-nodes"},e.map((function(e,n){var i=e.x,u=e.y,c=e.dx,s=e.dy,f=Vb(Vb({},ne(r)),{},{x:i+l,y:u+a,width:c,height:s,index:n,payload:e}),p={onMouseEnter:t.handleMouseEnter.bind(t,f,"node"),onMouseLeave:t.handleMouseLeave.bind(t,f,"node"),onClick:t.handleClick.bind(t,f,"node")};return o.createElement(fe,Bb({key:"node-".concat(e.x,"-").concat(e.y,"-").concat(e.value)},p),t.constructor.renderNodeItem(r,f))})))}},{key:"renderTooltip",value:function(){var e=this.props,t=e.children,n=e.width,r=e.height,i=e.nameKey,a=Y(t,Hr);if(!a)return null;var l,u=this.state,c=u.isTooltipActive,s=u.activeElement,f=u.activeElementType,p={x:0,y:0,width:n,height:r},d=s?(l=s,"node"===f?{x:l.x+l.width/2,y:l.y+l.height/2}:{x:(l.sourceX+l.targetX)/2,y:(l.sourceY+l.targetY)/2}):Kb,h=s?function(e,t,n){var r=e.payload;if("node"===t)return[{payload:e,name:Bs(r,n,""),value:Bs(r,"value")}];if(r.source&&r.target){var o=Bs(r.source,n,""),i=Bs(r.target,n,"");return[{payload:e,name:"".concat(o," - ").concat(i),value:Bs(r,"value")}]}return[]}(s,f,i):[];return o.cloneElement(a,{viewBox:p,active:c,coordinate:d,label:"",payload:h})}},{key:"render",value:function(){if(!Q(this))return null;var e=this.props,t=e.width,n=e.height,r=e.className,i=e.style,l=e.children,u=Lb(e,Ib),c=this.state,s=c.links,f=c.nodes,p=ne(u);return o.createElement("div",{className:a("recharts-wrapper",r),style:Vb(Vb({},i),{},{position:"relative",cursor:"default",width:t,height:n}),role:"region"},o.createElement(ue,Bb({},p,{width:t,height:n}),te(l),this.renderLinks(s,f),this.renderNodes(f)),this.renderTooltip())}}],r=[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.data,r=e.width,o=e.height,i=e.margin,a=e.iterations,l=e.nodeWidth,u=e.nodePadding,c=e.sort;if(n!==t.prevData||r!==t.prevWidth||o!==t.prevHeight||!M(i,t.prevMargin)||a!==t.prevIterations||l!==t.prevNodeWidth||u!==t.prevNodePadding||c!==t.sort){var s=function(e){var t=e.data,n=e.width,r=e.height,o=e.iterations,i=e.nodeWidth,a=e.nodePadding,l=e.sort,u=t.links,c=function(e,t,n){for(var r=e.nodes,o=e.links,i=r.map((function(e,t){var n=function(e,t){for(var n=[],r=[],o=[],i=[],a=0,l=e.length;a<l;a++){var u=e[a];u.source===t&&(o.push(u.target),i.push(a)),u.target===t&&(n.push(u.source),r.push(a))}return{sourceNodes:n,sourceLinks:r,targetLinks:i,targetNodes:o}}(o,t);return Vb(Vb(Vb({},e),n),{},{value:Math.max(Yb(o,n.sourceLinks),Yb(o,n.targetLinks)),depth:0})})),a=0,l=i.length;a<l;a++){var u=i[a];u.sourceNodes.length||ex(i,u)}var c=Pd()(i,(function(e){return e.depth})).depth;if(c>=1)for(var s=(t-n)/c,f=0,p=i.length;f<p;f++){var d=i[f];d.targetNodes.length||(d.depth=c),d.x=d.depth*s,d.dx=n}return{tree:i,maxDepth:c}}(t,n,i),s=c.tree,f=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];t[o.depth]||(t[o.depth]=[]),t[o.depth].push(o)}return t}(s),p=function(e,t,n,r){for(var o=Vc()(e.map((function(e){return(t-(e.length-1)*n)/Nb()(e,Gb)}))),i=0,a=e.length;i<a;i++)for(var l=0,u=e[i].length;l<u;l++){var c=e[i][l];c.y=l,c.dy=c.value*o}return r.map((function(e){return Vb(Vb({},e),{},{dy:Gb(e)*o})}))}(f,r,a,u);tx(f,r,a,l);for(var d=1,h=1;h<=o;h++)rx(s,f,p,d*=.99),tx(f,r,a,l),nx(s,f,p,d),tx(f,r,a,l);return function(e,t){for(var n=0,r=e.length;n<r;n++){var o=e[n],i=0,a=0;o.targetLinks.sort((function(n,r){return e[t[n].target].y-e[t[r].target].y})),o.sourceLinks.sort((function(n,r){return e[t[n].source].y-e[t[r].source].y}));for(var l=0,u=o.targetLinks.length;l<u;l++){var c=t[o.targetLinks[l]];c&&(c.sy=i,i+=c.dy)}for(var s=0,f=o.sourceLinks.length;s<f;s++){var p=t[o.sourceLinks[s]];p&&(p.ty=a,a+=p.dy)}}}(s,p),{nodes:s,links:p}}({data:n,width:r-(i&&i.left||0)-(i&&i.right||0),height:o-(i&&i.top||0)-(i&&i.bottom||0),iterations:a,nodeWidth:l,nodePadding:u,sort:c}),f=s.links,p=s.nodes;return Vb(Vb({},t),{},{nodes:p,links:f,prevData:n,prevWidth:a,prevHeight:o,prevMargin:i,prevNodePadding:u,prevNodeWidth:l,prevIterations:a,prevSort:c})}return null}},{key:"renderLinkItem",value:function(e,t){if(o.isValidElement(e))return o.cloneElement(e,t);if(h()(e))return e(t);var n=t.sourceX,r=t.sourceY,i=t.sourceControlX,a=t.targetX,l=t.targetY,u=t.targetControlX,c=t.linkWidth,s=Lb(t,Db);return o.createElement("path",Bb({className:"recharts-sankey-link",d:"\n          M".concat(n,",").concat(r,"\n          C").concat(i,",").concat(r," ").concat(u,",").concat(l," ").concat(a,",").concat(l,"\n        "),fill:"none",stroke:"#333",strokeWidth:c,strokeOpacity:"0.2"},ne(s)))}},{key:"renderNodeItem",value:function(e,t){return o.isValidElement(e)?o.cloneElement(e,t):h()(e)?e(t):o.createElement(Zp,Bb({className:"recharts-sankey-node",fill:"#0088fe",fillOpacity:"0.8"},ne(t),{role:"img"}))}}],n&&zb(t.prototype,n),r&&zb(t,r),Object.defineProperty(t,"prototype",{writable:!1}),s}(o.PureComponent);Hb(ox,"displayName","Sankey"),Hb(ox,"defaultProps",{nameKey:"name",dataKey:"value",nodePadding:10,nodeWidth:10,linkCurvature:.5,iterations:32,margin:{top:5,right:5,bottom:5,left:5},sort:!0});var ix,ax=lb({chartName:"RadarChart",GraphicalChild:ty,axisComponents:[{axisType:"angleAxis",AxisComp:th},{axisType:"radiusAxis",AxisComp:$d}],formatAxisMap:Of,defaultProps:{layout:"centric",startAngle:90,endAngle:-270,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}}),lx=lb({chartName:"ScatterChart",GraphicalChild:vg,defaultTooltipEventType:"item",validateTooltipEventTypes:["item"],axisComponents:[{axisType:"xAxis",AxisComp:mg},{axisType:"yAxis",AxisComp:gg},{axisType:"zAxis",AxisComp:ng}],formatAxisMap:wv}),ux=lb({chartName:"AreaChart",GraphicalChild:tg,axisComponents:[{axisType:"xAxis",AxisComp:mg},{axisType:"yAxis",AxisComp:gg}],formatAxisMap:wv}),cx=lb({chartName:"RadialBarChart",GraphicalChild:Oy,legendContent:"children",defaultTooltipEventType:"axis",validateTooltipEventTypes:["axis","item"],axisComponents:[{axisType:"angleAxis",AxisComp:th},{axisType:"radiusAxis",AxisComp:$d}],formatAxisMap:Of,defaultProps:{layout:"radial",startAngle:0,endAngle:360,cx:"50%",cy:"50%",innerRadius:0,outerRadius:"80%"}}),sx=lb({chartName:"ComposedChart",GraphicalChild:[Wm,tg,hv,vg],axisComponents:[{axisType:"xAxis",AxisComp:mg},{axisType:"yAxis",AxisComp:gg},{axisType:"zAxis",AxisComp:ng}],formatAxisMap:wv});function fx(e){return fx="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fx(e)}function px(){return px=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},px.apply(this,arguments)}function dx(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function hx(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dx(Object(n),!0).forEach((function(t){yx(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dx(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function yx(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==fx(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==fx(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===fx(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function vx(e,t){var n="".concat(t.x||e.x),r=parseInt(n,10),o="".concat(t.y||e.y),i=parseInt(o,10),a="".concat((null==t?void 0:t.height)||(null==e?void 0:e.height)),l=parseInt(a,10);return hx(hx(hx({},t),Sh(e)),{},{height:l,x:r,y:i})}function mx(e){return o.createElement(Ah,px({shapeType:"trapezoid",propTransformer:vx},e))}function gx(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return bx(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bx(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bx(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function xx(e){return xx="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xx(e)}function wx(){return wx=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},wx.apply(this,arguments)}function Ox(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Sx(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ox(Object(n),!0).forEach((function(t){Px(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ox(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ax(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Cx(r.key),r)}}function kx(e,t){return kx=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},kx(e,t)}function Ex(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jx(e){return jx=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},jx(e)}function Px(e,t,n){return(t=Cx(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Cx(e){var t=function(e,t){if("object"!==xx(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==xx(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===xx(t)?t:String(t)}var _x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&kx(e,t)}(c,e);var t,n,r,i,l,u=(i=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=jx(i);if(l){var n=jx(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===xx(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return Ex(e)}(this,e)});function c(){var e;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Px(Ex(e=u.call.apply(u,[this].concat(n))),"state",{isAnimationFinished:!1}),Px(Ex(e),"handleAnimationEnd",(function(){var t=e.props.onAnimationEnd;e.setState({isAnimationFinished:!0}),h()(t)&&t()})),Px(Ex(e),"handleAnimationStart",(function(){var t=e.props.onAnimationStart;e.setState({isAnimationFinished:!1}),h()(t)&&t()})),e}return t=c,r=[{key:"getDerivedStateFromProps",value:function(e,t){return e.animationId!==t.prevAnimationId?{prevAnimationId:e.animationId,curTrapezoids:e.trapezoids,prevTrapezoids:t.curTrapezoids}:e.trapezoids!==t.curTrapezoids?{curTrapezoids:e.trapezoids}:null}}],(n=[{key:"isActiveIndex",value:function(e){var t=this.props.activeIndex;return Array.isArray(t)?-1!==t.indexOf(e):e===t}},{key:"renderTrapezoidsStatically",value:function(e){var t=this,n=this.props,r=n.shape,i=n.activeShape;return e.map((function(e,n){var a=t.isActiveIndex(n)?i:r,l=Sx(Sx({},e),{},{isActive:t.isActiveIndex(n),stroke:e.stroke});return o.createElement(fe,wx({className:"recharts-funnel-trapezoid"},z(t.props,e,n),{key:"trapezoid-".concat(null==e?void 0:e.x,"-").concat(null==e?void 0:e.y,"-").concat(null==e?void 0:e.name,"-").concat(null==e?void 0:e.value),role:"img"}),o.createElement(mx,wx({option:a},l)))}))}},{key:"renderTrapezoidsWithAnimation",value:function(){var e=this,t=this.props,n=t.trapezoids,r=t.isAnimationActive,i=t.animationBegin,a=t.animationDuration,l=t.animationEasing,u=t.animationId,c=this.state.prevTrapezoids;return o.createElement(gr,{begin:i,duration:a,isActive:r,easing:l,from:{t:0},to:{t:1},key:"funnel-".concat(u),onAnimationStart:this.handleAnimationStart,onAnimationEnd:this.handleAnimationEnd},(function(t){var r=t.t,i=n.map((function(e,t){var n=c&&c[t];if(n){var o=_(n.x,e.x),i=_(n.y,e.y),a=_(n.upperWidth,e.upperWidth),l=_(n.lowerWidth,e.lowerWidth),u=_(n.height,e.height);return Sx(Sx({},e),{},{x:o(r),y:i(r),upperWidth:a(r),lowerWidth:l(r),height:u(r)})}var s=_(e.x+e.upperWidth/2,e.x),f=_(e.y+e.height/2,e.y),p=_(0,e.upperWidth),d=_(0,e.lowerWidth),h=_(0,e.height);return Sx(Sx({},e),{},{x:s(r),y:f(r),upperWidth:p(r),lowerWidth:d(r),height:h(r)})}));return o.createElement(fe,null,e.renderTrapezoidsStatically(i))}))}},{key:"renderTrapezoids",value:function(){var e=this.props,t=e.trapezoids,n=e.isAnimationActive,r=this.state.prevTrapezoids;return!(n&&t&&t.length)||r&&Xc()(r,t)?this.renderTrapezoidsStatically(t):this.renderTrapezoidsWithAnimation()}},{key:"render",value:function(){var e=this.props,t=e.hide,n=e.trapezoids,r=e.className,i=e.isAnimationActive,l=this.state.isAnimationFinished;if(t||!n||!n.length)return null;var u=a("recharts-trapezoids",r);return o.createElement(fe,{className:u},this.renderTrapezoids(),(!i||l)&&Qf.renderCallByParent(this.props,n))}}])&&Ax(t.prototype,n),r&&Ax(t,r),Object.defineProperty(t,"prototype",{writable:!1}),c}(o.PureComponent);ix=_x,Px(_x,"displayName","Funnel"),Px(_x,"defaultProps",{stroke:"#fff",fill:"#808080",legendType:"rect",labelLine:!0,hide:!1,isAnimationActive:!Dr.isSsr,animationBegin:400,animationDuration:1500,animationEasing:"ease",nameKey:"name",lastShapeType:"triangle"}),Px(_x,"getRealFunnelData",(function(e){var t=e.props,n=t.data,r=t.children,o=ne(e.props),i=G(r,eo);return n&&n.length?n.map((function(e,t){return Sx(Sx(Sx({payload:e},o),e),i&&i[t]&&i[t].props)})):i&&i.length?i.map((function(e){return Sx(Sx({},o),e.props)})):[]})),Px(_x,"getRealWidthHeight",(function(e,t){var n=e.props.width,r=t.width,o=t.height,i=t.left,a=t.right,l=t.top,u=t.bottom,c=o,s=r;return w()(n)?s=n:p()(n)&&(s=s*parseFloat(n)/100),{realWidth:s-i-a-50,realHeight:c-u-l,offsetX:(r-s)/2,offsetY:(o-c)/2}})),Px(_x,"getComposedData",(function(e){var t=e.item,n=e.offset,r=ix.getRealFunnelData(t),o=t.props,i=o.dataKey,a=o.nameKey,l=o.tooltipType,u=o.lastShapeType,c=o.reversed,s=n.left,f=n.top,p=ix.getRealWidthHeight(t,n),d=p.realHeight,h=p.realWidth,y=p.offsetX,v=p.offsetY,m=Math.max.apply(null,r.map((function(e){return Bs(e,i,0)}))),g=r.length,b=d/g,x={x:n.left,y:n.top,width:n.width,height:n.height},w=r.map((function(e,t){var n,o=Bs(e,i,0),c=Bs(e,a,t),p=o;if(t!==g-1)(n=Bs(r[t+1],i,0))instanceof Array&&(n=gx(n,1)[0]);else if(o instanceof Array&&2===o.length){var d=gx(o,2);p=d[0],n=d[1]}else n="rectangle"===u?p:0;var w=(m-p)*h/(2*m)+f+25+y,O=b*t+s+v,S=p/m*h,A=n/m*h,k=[{name:c,value:p,payload:e,dataKey:i,type:l}],E={x:w+S/2,y:O+b/2};return Sx(Sx({x:w,y:O,width:Math.max(S,A),upperWidth:S,lowerWidth:A,height:b,name:c,val:p,tooltipPayload:k,tooltipPosition:E},pb()(e,"width")),{},{payload:e,parentViewBox:x,labelViewBox:{x:w+(S-A)/4,y:O,width:Math.abs(S-A)/2+Math.min(S,A),height:b}})}));return c&&(w=w.map((function(e,t){var n=e.y-t*b+(g-1-t)*b;return Sx(Sx({},e),{},{upperWidth:e.lowerWidth,lowerWidth:e.upperWidth,x:e.x-(e.lowerWidth-e.upperWidth)/2,y:e.y-t*b+(g-1-t)*b,tooltipPosition:Sx(Sx({},e.tooltipPosition),{},{y:n+b/2}),labelViewBox:Sx(Sx({},e.labelViewBox),{},{y:n})})}))),{trapezoids:w,data:r}}));var Tx=lb({chartName:"FunnelChart",GraphicalChild:_x,validateTooltipEventTypes:["item"],defaultTooltipEventType:"item",axisComponents:[],defaultProps:{layout:"centric"}})},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>i(u,n))c<o&&0>i(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>i(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,p=null,d=3,h=!1,y=!1,v=!1,m="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function w(e){if(v=!1,x(e),!y)if(null!==r(c))y=!0,N(O);else{var t=r(s);null!==t&&I(w,t.startTime-e)}}function O(e,n){y=!1,v&&(v=!1,g(E),E=-1),h=!0;var i=d;try{for(x(n),p=r(c);null!==p&&(!(p.expirationTime>n)||e&&!C());){var a=p.callback;if("function"==typeof a){p.callback=null,d=p.priorityLevel;var l=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===r(c)&&o(c),x(n)}else o(c);p=r(c)}if(null!==p)var u=!0;else{var f=r(s);null!==f&&I(w,f.startTime-n),u=!1}return u}finally{p=null,d=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,A=!1,k=null,E=-1,j=5,P=-1;function C(){return!(t.unstable_now()-P<j)}function _(){if(null!==k){var e=t.unstable_now();P=e;var n=!0;try{n=k(!0,e)}finally{n?S():(A=!1,k=null)}}else A=!1}if("function"==typeof b)S=function(){b(_)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,M=T.port2;T.port1.onmessage=_,S=function(){M.postMessage(null)}}else S=function(){m(_,0)};function N(e){k=e,A||(A=!0,S())}function I(e,n){E=m((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){y||h||(y=!0,N(O))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(s,e),null===r(c)&&e===r(s)&&(v?(g(E),E=-1):v=!0,I(w,i-a))):(e.sortIndex=l,n(c,e),y||h||(y=!0,N(O))),e},t.unstable_shouldYield=C,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},4089:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var r=n(3379),o=n.n(r),i=n(7795),a=n.n(i),l=n(569),u=n.n(l),c=n(3565),s=n.n(c),f=n(9216),p=n.n(f),d=n(4589),h=n.n(d),y=n(28),v={};v.styleTagTransform=h(),v.setAttributes=s(),v.insert=u().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),o()(y.Z,v);const m=y.Z&&y.Z.locals?y.Z.locals:void 0},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var u=e[l],c=r.base?u[0]+r.base:u[0],s=i[c]||0,f="".concat(c," ").concat(s);i[c]=s+1;var p=n(f),d={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=o(d,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var u=r(e,o),c=0;c<i.length;c++){var s=n(i[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},4610:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=r(n(1684)),a=n(2389);t.default=()=>{const e=i.default[0].sales;return o.default.createElement("section",{className:"chart-container"},o.default.createElement(a.ResponsiveContainer,{width:"100%",height:"100%"},o.default.createElement(a.LineChart,{width:500,height:300,data:e,margin:{top:5,right:30,left:20,bottom:5}},o.default.createElement(a.XAxis,{dataKey:"weekEnding",type:"category"}),o.default.createElement(a.YAxis,{hide:!0}),o.default.createElement(a.Tooltip,null),o.default.createElement(a.Line,{type:"monotone",dataKey:"retailSales",stroke:"#49B1F2",strokeWidth:5,dot:!1}),o.default.createElement(a.Line,{type:"monotone",dataKey:"wholesaleSales",strokeWidth:5,stroke:"#9BA7BF",dot:!1}))))}},488:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=r(n(4610)),a=r(n(6999)),l=r(n(3050));t.default=()=>o.default.createElement(o.default.Fragment,null,o.default.createElement(l.default,null),o.default.createElement(i.default,null),o.default.createElement(a.default,null))},9370:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=r(n(6782));t.default=()=>o.default.createElement("header",{className:"header-container"},o.default.createElement("div",{className:"logo"},o.default.createElement(i.default,null)))},3050:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=r(n(1684));t.default=()=>{const e=i.default[0],t=e.tags?e.tags.map((e=>o.default.createElement("span",{className:"tags"},e))):o.default.createElement("span",null),n=e.title?e.title+" image":"No image";return o.default.createElement("div",{id:"product",className:"product-container"},o.default.createElement("figure",null,o.default.createElement("img",{src:e.image,alt:n}),o.default.createElement("figcaption",{id:"title"},e.title),o.default.createElement("figcaption",{id:"subtitle"},e.subtitle)),o.default.createElement("hr",null),o.default.createElement("div",{id:"spans"},t),o.default.createElement("hr",null))}},6999:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=r(n(1684));t.default=()=>{const e=i.default[0].sales.map((e=>o.default.createElement("tr",null,o.default.createElement("td",null,e.weekEnding.toLocaleString()),o.default.createElement("td",null,"$"+e.retailSales.toLocaleString()),o.default.createElement("td",null,"$"+e.wholesaleSales.toLocaleString()),o.default.createElement("td",null,e.unitsSold.toLocaleString()),o.default.createElement("td",null,"$"+e.retailerMargin.toLocaleString()))));return o.default.createElement("section",{className:"table-container"},o.default.createElement("table",{id:"table"},o.default.createElement("thead",null,o.default.createElement("tr",null,o.default.createElement("th",{scope:"col"},o.default.createElement("div",null,"WEEK ENDING")),o.default.createElement("th",{scope:"col"},o.default.createElement("div",null,"RETAIL SALES")),o.default.createElement("th",{scope:"col"},o.default.createElement("div",null,"WHOLESALE SALES")),o.default.createElement("th",{scope:"col"},o.default.createElement("div",null,"UNITS SOLD")),o.default.createElement("th",{scope:"col"},o.default.createElement("div",null,"RETAILER MARGIN")))),o.default.createElement("tbody",null,e)))}},2629:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),i=n(745),a=r(n(3712));n(4089);const l=document.getElementById("root");l&&(0,i.createRoot)(l).render(o.default.createElement(a.default,null))},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},1684:e=>{"use strict";e.exports=JSON.parse('[{"id":"B007TIE0GQ","title":"Shark Ninja","image":"https://images-na.ssl-images-amazon.com/images/I/51h-a5IaHeL.jpg","subtitle":"Magic Bullet NutriBullet 12-Piece High-Speed Blender/Mixer System","brand":"Nutribullet","reviews":[{"customer":"ILoveToReview","review":"I had not seen the infomercial when I purchased this. I was looking for a powerful smoothie maker after my smoothie blender died. The base is MUCH heavier/substantial and well made than the Magic Bullet. It also looks more expensive/nice. I know this because I was at Target examining them both closely. The 600 watts of power has been great to tear through kale, chard, frozen berries, almonds, chia seeds. I love the consistency of the smoothie when I am done. it is not a complete liquid, but really well blended. I love that you keep the nutrition of the pulp. It is not like my first old juicer that left the pulp out of the juice, but also the nutrition. It was a NIGHTMARE to clean. Then I bought the smoothie blender that is now kaput! The Nutri Bullet literally rinses clean in ten seconds. Obviously rinse it right after you are done using it. My daughter won\'t touch anything green and we put kale, chard, broccoli and fruit,berries to make it NOT green and she likes it. Honestly we are NOT a family that likes kale, chard, broccoli, prunes, but feel so much better now that we are ingesting them. It took about two weeks for me to notice a difference and feel better. My husband and I have been having two a day and I have lost 4 lbs in 18 days without trying. They just keep you full and satisfied. It has taken the edge off my sweet tooth. They will keep you regular.I not sure know why they can not just give you two large smoothie cups. We only use the big size.","score":5}],"retailer":"Amazon","details":["Effortlessly pulverizes fruits, vegetables, superfoods and protein shakes","High-torque power base and 600-watt motor","Power, patented blade design with cyclonic action","Includes a power base, 1 tall cup, 2 short cups, 1 flat blade and 1 emulsifying blade, 2 re-sealable lids, pocket nutritionist and manual with recipes","This product is manufactured in compliance with US & Canadian Electrical Standards"],"tags":["Pantry","Obsolete","Blender","Lightning Deal"],"sales":[{"weekEnding":"2017-01-01","retailSales":348123,"wholesaleSales":255721,"unitsSold":887,"retailerMargin":123294},{"weekEnding":"2017-01-08","retailSales":256908,"wholesaleSales":189678,"unitsSold":558,"retailerMargin":67230},{"weekEnding":"2017-01-15","retailSales":243522,"wholesaleSales":255721,"unitsSold":623,"retailerMargin":567845},{"weekEnding":"2017-01-22","retailSales":458646,"wholesaleSales":356475,"unitsSold":745,"retailerMargin":453645},{"weekEnding":"2017-01-29","retailSales":929844,"wholesaleSales":405784,"unitsSold":832,"retailerMargin":676577},{"weekEnding":"2017-02-05","retailSales":243522,"wholesaleSales":255721,"unitsSold":900,"retailerMargin":978654},{"weekEnding":"2017-02-12","retailSales":243522,"wholesaleSales":255721,"unitsSold":432,"retailerMargin":342467},{"weekEnding":"2017-02-19","retailSales":243522,"wholesaleSales":255721,"unitsSold":789,"retailerMargin":734523},{"weekEnding":"2017-02-26","retailSales":243522,"wholesaleSales":255721,"unitsSold":826,"retailerMargin":134573},{"weekEnding":"2017-03-05","retailSales":243522,"wholesaleSales":255721,"unitsSold":904,"retailerMargin":423422},{"weekEnding":"2017-03-12","retailSales":243522,"wholesaleSales":255721,"unitsSold":508,"retailerMargin":123466},{"weekEnding":"2017-03-19","retailSales":243880,"wholesaleSales":254521,"unitsSold":550,"retailerMargin":129466},{"weekEnding":"2017-03-26","retailSales":662052,"wholesaleSales":378093,"unitsSold":698,"retailerMargin":99533},{"weekEnding":"2017-04-02","retailSales":165945,"wholesaleSales":995034,"unitsSold":730,"retailerMargin":516961},{"weekEnding":"2017-04-09","retailSales":944774,"wholesaleSales":32244,"unitsSold":176,"retailerMargin":63347},{"weekEnding":"2017-04-16","retailSales":961954,"wholesaleSales":876110,"unitsSold":110,"retailerMargin":171001},{"weekEnding":"2017-04-23","retailSales":31320,"wholesaleSales":793023,"unitsSold":235,"retailerMargin":968592},{"weekEnding":"2017-04-30","retailSales":996174,"wholesaleSales":725131,"unitsSold":899,"retailerMargin":419650},{"weekEnding":"2017-05-07","retailSales":748745,"wholesaleSales":526733,"unitsSold":0,"retailerMargin":781147},{"weekEnding":"2017-05-14","retailSales":206527,"wholesaleSales":357796,"unitsSold":954,"retailerMargin":116289},{"weekEnding":"2017-05-21","retailSales":219886,"wholesaleSales":295664,"unitsSold":70,"retailerMargin":336168},{"weekEnding":"2017-05-28","retailSales":694206,"wholesaleSales":914412,"unitsSold":487,"retailerMargin":688093},{"weekEnding":"2017-06-04","retailSales":550176,"wholesaleSales":30485,"unitsSold":785,"retailerMargin":192444},{"weekEnding":"2017-06-11","retailSales":950385,"wholesaleSales":497104,"unitsSold":136,"retailerMargin":793489},{"weekEnding":"2017-06-18","retailSales":154184,"wholesaleSales":171133,"unitsSold":941,"retailerMargin":219036},{"weekEnding":"2017-06-25","retailSales":929986,"wholesaleSales":654481,"unitsSold":58,"retailerMargin":468615},{"weekEnding":"2017-07-02","retailSales":582966,"wholesaleSales":958050,"unitsSold":393,"retailerMargin":591443},{"weekEnding":"2017-07-09","retailSales":615994,"wholesaleSales":684949,"unitsSold":858,"retailerMargin":585443},{"weekEnding":"2017-07-16","retailSales":277902,"wholesaleSales":533123,"unitsSold":7,"retailerMargin":232085},{"weekEnding":"2017-07-23","retailSales":714227,"wholesaleSales":802642,"unitsSold":596,"retailerMargin":362263},{"weekEnding":"2017-07-30","retailSales":647010,"wholesaleSales":308343,"unitsSold":404,"retailerMargin":262778},{"weekEnding":"2017-08-06","retailSales":256788,"wholesaleSales":976758,"unitsSold":743,"retailerMargin":660243},{"weekEnding":"2017-08-13","retailSales":232111,"wholesaleSales":821974,"unitsSold":894,"retailerMargin":376970},{"weekEnding":"2017-08-20","retailSales":458834,"wholesaleSales":205921,"unitsSold":903,"retailerMargin":482657},{"weekEnding":"2017-08-27","retailSales":26084,"wholesaleSales":877868,"unitsSold":992,"retailerMargin":639437},{"weekEnding":"2017-09-03","retailSales":298974,"wholesaleSales":39117,"unitsSold":857,"retailerMargin":682272},{"weekEnding":"2017-09-10","retailSales":551218,"wholesaleSales":208424,"unitsSold":113,"retailerMargin":257158},{"weekEnding":"2017-09-17","retailSales":108107,"wholesaleSales":813976,"unitsSold":972,"retailerMargin":540079},{"weekEnding":"2017-09-24","retailSales":3381,"wholesaleSales":903222,"unitsSold":995,"retailerMargin":548705},{"weekEnding":"2017-10-01","retailSales":70672,"wholesaleSales":656673,"unitsSold":270,"retailerMargin":458334},{"weekEnding":"2017-10-08","retailSales":551759,"wholesaleSales":422642,"unitsSold":217,"retailerMargin":777812},{"weekEnding":"2017-10-15","retailSales":983322,"wholesaleSales":41612,"unitsSold":637,"retailerMargin":283919},{"weekEnding":"2017-10-22","retailSales":978696,"wholesaleSales":427687,"unitsSold":224,"retailerMargin":853781},{"weekEnding":"2017-10-29","retailSales":140026,"wholesaleSales":710663,"unitsSold":909,"retailerMargin":798857},{"weekEnding":"2017-11-05","retailSales":601628,"wholesaleSales":726254,"unitsSold":789,"retailerMargin":544741},{"weekEnding":"2017-11-12","retailSales":66432,"wholesaleSales":916471,"unitsSold":491,"retailerMargin":296807},{"weekEnding":"2017-11-19","retailSales":450518,"wholesaleSales":625939,"unitsSold":853,"retailerMargin":94781},{"weekEnding":"2017-11-26","retailSales":385909,"wholesaleSales":838994,"unitsSold":790,"retailerMargin":33772},{"weekEnding":"2017-12-03","retailSales":557592,"wholesaleSales":893702,"unitsSold":346,"retailerMargin":682656},{"weekEnding":"2017-12-10","retailSales":832201,"wholesaleSales":102479,"unitsSold":897,"retailerMargin":114349},{"weekEnding":"2017-12-17","retailSales":303739,"wholesaleSales":823573,"unitsSold":782,"retailerMargin":734937},{"weekEnding":"2017-12-24","retailSales":709638,"wholesaleSales":753473,"unitsSold":855,"retailerMargin":110398},{"weekEnding":"2017-12-31","retailSales":798739,"wholesaleSales":550042,"unitsSold":822,"retailerMargin":181968}]}]')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.nc=void 0,n(2629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,